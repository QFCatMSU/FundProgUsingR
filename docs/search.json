[
  {
    "objectID": "lessons/1-15_Functions3.html",
    "href": "lessons/1-15_Functions3.html",
    "title": "1-15: Functions 3",
    "section": "",
    "text": "look at other functions in temperature.r\n\nsee Section 1 for more",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#sec-first",
    "href": "lessons/1-15_Functions3.html#sec-first",
    "title": "1-15: Functions 3",
    "section": "",
    "text": "look at other functions in temperature.r\n\nsee Section 1 for more",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#questions-about-the-material",
    "href": "lessons/1-15_Functions3.html#questions-about-the-material",
    "title": "1-15: Functions 3",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nSecond Script: a second script containing functions can be downloaded here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#functions-and-arguments",
    "href": "lessons/1-15_Functions3.html#functions-and-arguments",
    "title": "1-15: Functions 3",
    "section": "3 Functions and arguments",
    "text": "3 Functions and arguments\nIn this lesson we will build up to a function that takes two arguments:\n\na vector of temperature values\nthe units of the temperature (e.g., F, C)\n\n \nAnd the function will return:\n\na vector that has categorical values for the temperatures (e.g. “high”, “low”, “medium”).\n\n \nFrom the outside the function will look like this:\ntempCategory5 = function(tempVector, unit=\"F\")\ntempVector and unit are the two arguments for the function and unit is given a default value of “F” (Fahrenheit), but can be changed by the caller. \n\n3.1 Arguments and variables\nArguments are variables – more specifically, argumentsare variables that are:\n\nset by the caller of the function\n\n-   or, sometimes set to default value by the function if the caller does not set the value\n\nused inside the function’s codeblock\n\n \nSo, tempCategory5() has two variables that can be set by the caller (tempVector and unit).  It might have more variables inside, but those are hidden from the caller.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#functions-are-kind-of-like-black-boxes",
    "href": "lessons/1-15_Functions3.html#functions-are-kind-of-like-black-boxes",
    "title": "1-15: Functions 3",
    "section": "4 Functions are kind of like black boxes",
    "text": "4 Functions are kind of like black boxes\nR has numerous built-in function in what is called the R Base package, the R Base package is automatically installed in every version of R. Here is a list of all the functions in R Base. Even though these function are not a part of your script, you can access any of these functions from your script – you just need to know what arguments to pass to the function.\n \nMost functions have arguments.  mean() will take the x value passed in by the caller and find the mean value.  It will probably do this by adding all the value and dividing that by the number of values.  But, we do not know this for sure because we cannot see inside a function – we just see the input (arguments) and the output (return value).\n \nWhen you call mean(), you are setting the variable x for the function and x gets used inside the function.  You can also, optionally, set trim and na.rm – but those already have default values (0 and FALSE).\n\n\n\n\n\n\nFigure 1: The mean() function – note than stat.ethz.ch is the website used in the RStudio Help tab",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#creating-your-own-functions",
    "href": "lessons/1-15_Functions3.html#creating-your-own-functions",
    "title": "1-15: Functions 3",
    "section": "5 Creating your own functions",
    "text": "5 Creating your own functions\nYou can create your own function to perform a task that you do multiple times, and this function can be used in any of your scripts.  It is best to put functions in a script of their own because they should be designed to operate independently.  Putting functions in a separate script also helps reinforce the independence of functions from the rest of script.\n \nWe will start be creating a new script file called termperature.r and save it to the script folder.  temperature.r.\n\n5.1 Categorizing temperatures using a function\nWe will start off simply and have our first function, tempCategory(), take one value as an argument and give a category for the temperature (e.g., hot, warm, cold).  This argument will be called tempValue.  tempValue could be given a default value (e.g., tempValue = 50), but this probably does not make sense because there are too many values the caller could use (and infinitely many if you include decimals).\ntempCategory = function(tempValue)  # there is no default value for tempValue\n{\n  # like if-else statements and for loops, the curly brackets create a codeblock\n  # attached to the function -- and all code inside the function gets indented\n}\nNext we add in a if-else-if structure to categorize the temperature value:\n\nfreezing (1-20 degrees)\ncold (21-40 degrees)\nmoderate (41-60 degrees)\nwarm (61-80 degrees)\nhot (81-100 degrees)\n\n \nAnd for each if-else-if statement, we will return the temperature category.\ntempCategory = function(tempValue)\n{\n  if(tempValue &gt;= 1 & tempValue &lt;= 20)\n  {\n    return(\"freezing\");\n  }\n  else if(tempValue &gt;= 21 & tempValue &lt;= 40)\n  {\n    return(\"cold\");\n  }\n  else if(tempValue &gt;= 41 & tempValue &lt;= 60)\n  {\n    return(\"moderate\");\n  }\n  else if(tempValue &gt;= 61 & tempValue &lt;= 80)\n  {\n    return(\"warm\");\n  }\n  else if(tempValue &gt;= 81 & tempValue &lt;= 100)\n  {\n    return(\"hot\");\n  }\n}\n\n\n5.2 Getting functions into a script\ntempCategory() exists in the script temperature.r in the scripts folder of you project.  tempCategory() can be used in any script file in your project by including the line:\nsource(file=\"scripts/temperature.r\");\nThe line above reads all the functions inside temperature.r and puts them into the Environment so that the rest of the script can use the functions inside temperature.r.\ntempCategory:   function (tempValue)\n\n\n5.3 Calling functions\nNow we can call tempCategory().\n \nThe argument tempValue is a variable that is set by the caller and used by the function tempCategory().  Here we test out 4 different calls to tempCategory() – each setting tempValue to a value:\ncat1a = tempCategory(45);\ncat1b = tempCategory(tempValue=85);\ncat1c = tempCategory(tempValue=17);\ncat1d = tempCategory(-2); \ncat1a:   \"moderate\"\ncat1b:   \"hot\"\ncat1c:   \"freezing\"\ncat1d:   NULL\nWhen -2 is the argument, NULL is the return value.  The function does not handle negative values so nothing, or NULL, was returned.\n\nNote: In programming, NULL is an empty object whereas NA is an empty or nonexistent value.\n\n\n5.4 Return values\nFunctions, in many ways, are designed to answer a question from the caller.  The answer comes in the form of a return value given by return().  It is up to the caller to determine how to use the return value.   When the following line of code is executed:\ncat1b = tempCategory(tempValue=85);\ntempCategory() is called with the argument tempValue set to 85.  The code inside tempCategory() is executed and the value “hot” is returned.  The variable cat1b is set to the return value, “hot”.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#adding-an-argument-for-the-unit",
    "href": "lessons/1-15_Functions3.html#adding-an-argument-for-the-unit",
    "title": "1-15: Functions 3",
    "section": "6 Adding an argument for the unit",
    "text": "6 Adding an argument for the unit\nUp to this point we are assuming that the temperature will be in Fahrenheit.  But, we want to make the function more robust and allow for both Fahrenheit and Celsius temperatures.  This means we need the caller to give us two pieces of information (i.e., two arguments).  One that gives the temperature and one that gives the unit.\n \nThe easiest way is to just create a string argument that holds the unit.  Since there are only two choices (at this point), we will put a default value of “F”.  This means that if the caller does not set unit, the temperature is assumed to be in Fahrenheit:\ntempCategory2 = function(tempValue, unit=\"F\") # there is a default value for unit.\n{\n\n}\nThe function will allow for two possibilities units for tempValue: Fahrenheit (F) and Celsius (C).  This means we need code to handle both situations.\n \nThe if-else structure already uses Fahrenheit temperatures so we only need to do something extra if the unit is Celsius.  The easiest thing to do is convert the Celsius temperatures into Fahrenheit before the if-else structure:\ntempCategory2 = function(tempValue, unit=\"F\")\n{\n  «if(unit == \"C\")»  # if the unit is set to Celsius by the caller\n  {\n    «tempValue = (9/5)*tempValue + 32;»    # Convert tempValue to Fahrenheit\n  }\n  # note: the if statement above is completely independent from the\n  #       if-else-if structure below\n  if(tempValue &gt;= 1 & tempValue &lt;= 20)\n  {\n    return(\"freezing\");\n  }\n  else if(tempValue &gt;= 21 & tempValue &lt;= 40)\n  {\n    return(\"cold\");\n  }\n  else if(tempValue &gt;= 41 & tempValue &lt;= 60)\n  {\n    return(\"moderate\");\n  }\n  else if(tempValue &gt;= 61 & tempValue &lt;= 80)\n  {\n    return(\"warm\");\n  }\n  else if(tempValue &gt;= 81 & tempValue &lt;= 100)\n  {\n    return(\"hot\");\n  }\n}\n\n6.1 Calling tempCategory2()\nLet’s test the unit argument in tempCategory2() from our outside script:\ncat2a = tempCategory2(45);       \ncat2b = tempCategory2(15, \"F\");  \ncat2c = tempCategory2(15, \"C\");                 # 15C ~ 59F\ncat2d = tempCategory2(tempValue=35, unit=\"C\");  # 35C ~ 95F\ncat2e = tempCategory2(tempValue=45, unit=\"C\");  # NULL because 45C &gt; 100F\ncat2a:   \"moderate\"\ncat2b:   \"freezing\"\ncat2c:   \"moderate\"\ncat2d:   \"hot\"\ncat2e:   NULL\n\n\n6.2 setting ( = ) vs comparing ( == )\nThis is probably a good time to reinforce the difference between these two commonly mixed up operations: ( = ) and ( == ). \nThe ( = ) operation setsthe variable on the left to the value on the right:\na = 4;           # set a to be 4\ntempValue = 45;  # set tempValue to be 45\nunit = \"F\";      # set unit to be \"F\"\nThe ( == ) operation comparesthe variable on the left to the value on the right and returns a Boolean (TRUE/FALSE) value:\na == 4          # Is a equal to 4?  TRUE if a is 4, FALSE otherwise\ntempValue == 45 # Is tempValue equal to 45? TRUE if tempValue is 45, FALSE otherwise\nunit == \"F\"     # Is unit equal to \"F\"? TRUE if unit is \"F\", FALSE otherwise\nNote: “F” here means Fahrenheit – another reason to not use T or F to represent TRUE and FALSE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#boolean-argument",
    "href": "lessons/1-15_Functions3.html#boolean-argument",
    "title": "1-15: Functions 3",
    "section": "7 Boolean argument",
    "text": "7 Boolean argument\nAn alternate way to setup the tempCategory() function is to use a Boolean argument to determine whether the temperature is Fahrenheit or Celsius.  A Booleanhas two possible values: TRUE and FALSE.  Boolean values are convenient to use when there are only two choice.  In this case the two choice are Fahrenheit and Celsius, or, another way to put it: Fahrenheit and not Fahrenheit.\ntempCategory3 = function(tempValue, isFahr=TRUE) # isFahr = FALSE means Celsius\n{\n\n}\nTRUE and FALSE do not go into quotes.  They are predefined variables in R.  If you use quotes then R will think you mean the character “T” followed by the character “R” followed by the character “U” followed by the character “E”.  This is not the same as the Boolean TRUE.\ntempCategory3 = function(tempValue, isFahr=TRUE)\n{\n  # Do not put TRUE and FALSE in quotes. They are variables in R -- not strings.\n  «if(isFahr == FALSE)»  # the tempValue is Celsius\n  {\n    # convert tempValue to Fahrenheit\n    «tempValue = (9/5)*tempValue + 32;»\n  }\n\n  if(tempValue &gt;= 1 & tempValue &lt;= 20)\n  {\n    return(\"freezing\");\n  }\n  else if(tempValue &gt;= 21 & tempValue &lt;= 40)\n  {\n    return(\"cold\");\n  }\n  else if(tempValue &gt;= 41 & tempValue &lt;= 60)\n  {\n    return(\"moderate\");\n  }\n  else if(tempValue &gt;= 61 & tempValue &lt;= 80)\n  {\n    return(\"warm\");\n  }\n  else if(tempValue &gt;= 81 & tempValue &lt;= 100)\n  {\n    return(\"hot\");\n  }\n}\n\n7.1 Using tempCategory3()\nAside from changing the second argument to a Boolean value, this function works the same as the last:\ncat3a = tempCategory3(45);\ncat3b = tempCategory3(15, TRUE);\ncat3c = tempCategory3(15, FALSE);\ncat3d = tempCategory3(tempValue=35, isFahr=FALSE);\ncat3e = tempCategory3(tempValue=45, isFahr=FALSE);\nSince we used the same values and units as last time, the results are the same:\ncat3a:   \"moderate\"\ncat3b:   \"freezing\"\ncat3c:   \"moderate\"\ncat3d:   \"hot\"\ncat3e:   NULL\n\n\n7.2 Advantages/disadvantages of using Boolean\nThe advantages to using Boolean arguments over string arguments:\n\nThe script runs faster.  The difference is tiny but tiny differences could become noticeable if you are executing the function 100,000 times.\nThe script is less prone to user error.  A Boolean has two possible values for the caller: TRUE and FALSE.  Whereas strings can be misinterpreted – someone might type in “Fahr” instead of “F”, or just misspell Fahrenheit and the function will not be able to handle it.\n\n \nThe disadvantage to Boolean arguments is that string values are more robust and can handle more complex situations.  For instance, you might want to extend the function to include Kelvin temperatures.  You cannot handle 3 units (F, K, and C) with one Boolean variable, but you can handle as many units as you want with one string variable – you just need to extend the if-else-if structure that coverts the value:\ntempCategory4 = function(tempValue, unit=\"F\")\n{\n  if(unit == \"C\")\n  {\n    tempValue = (9/5)*tempValue + 32;\n  }\n  «else if(unit == \"K\")»\n  {\n    «tempValue = tempValue - 273;»      # convert K to C\n    tempValue = (9/5)*tempValue + 32; # convert C to F\n  }\n\n  if(tempValue &gt;= 1 & tempValue &lt;= 20)\n  {\n    return(\"freezing\");\n  }\n  else if(tempValue &gt;= 21 & tempValue &lt;= 40)\n  {\n    return(\"cold\");\n  }\n  else if(tempValue &gt;= 41 & tempValue &lt;= 60)\n  {\n    return(\"moderate\");\n  }\n  else if(tempValue &gt;= 61 & tempValue &lt;= 80)\n  {\n    return(\"warm\");\n  }\n  else if(tempValue &gt;= 81 & tempValue &lt;= 100)\n  {\n    return(\"hot\");\n  }\n}\nNote: I broke the conversion from Kelvin to Fahrenheit into 2 steps: Kelvin to Celsius and Celsius to Fahrenheit.  This could have been done in one step.\n\n\n7.3 Using tempCategory4()\nTesting out the Kelvin is less intuitive as 300K is about room temperature:\ncat4a = tempCategory4(305, \"K\");   # ~89F\ncat4b = tempCategory4(270, \"K\");   # ~26F            \ncat4c = tempCategory4(285, \"K\");   # ~53F\ncat4d = tempCategory4(tempValue=325, unit=\"K\"); # ~125F\nSince we used the same values and units as last time, the results are the same:\ncat4a:   \"hot\"\ncat4b:   \"cold\"\ncat4c:   \"moderate\"\ncat4d:   NULL",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#using-a-vector-instead-of-a-single-value",
    "href": "lessons/1-15_Functions3.html#using-a-vector-instead-of-a-single-value",
    "title": "1-15: Functions 3",
    "section": "8 Using a vector instead of a single value",
    "text": "8 Using a vector instead of a single value\nFinally, we do not just want to categorize one value at a time, we want to be able to categorize a vector of values.\n \nThere are three changes we need to make to the code to handle vectors instead of single values:\n\na for loop to cycle through each value in the vector\nindex the temperature vector so that we are checking one value at a time\na vector output of categories (i.e, we need a category for each value in the vector)\n\n\n8.1 For loop to cycle through every value\nWe need a for loop to cycle through, and categorize, every value in the vector tempVector.  The number of cycles we need is the same as the length of tempVector, which is given by length(tempVector).\ntempCategory5 = function(tempVector, unit=\"F\")\n{\n  «# This part stays the same» \n  if(unit == \"C\") \n  {\n    tempVector = (9/5)*tempVector + 32;\n  }\n  else if(unit == \"K\")\n  {\n    tempValue = tempValue - 273;      # convert K to C\n    tempValue = (9/5)*tempValue + 32; # convert C to F\n  }\n\n  # go through each value in tempVector\n  «for(i in 1:length(tempVector))»\n  {\n    # the i will index tempVector each time through the loop\n    # i will go from 1 to the length of the vector\n  }\n}\n\n\n8.2 Index the temperature values\nInside the for loop, we need to index the vector, tempVector so that we are only checking one value at a time.  i is the value that index tempVector and i changes each time the for loop cycles (i goes from 1 to the length of the vector)\ntempCategory5 = function(tempVector, unit=\"F\")\n{\n  # This part stays the same\n  if(unit == \"C\") \n  {\n    tempVector = (9/5)*tempVector + 32;\n  }\n  else if(unit == \"K\")\n  {\n    tempValue = tempValue - 273;      # convert K to C\n    tempValue = (9/5)*tempValue + 32; # convert C to F\n  }\n\n  # go through each value in tempVector\n  for(i in 1:length(tempVector))\n  {\n    if(tempVector«[i]» &gt;= 1 & tempVector«[i]» &lt;= 20)\n    {\n\n    }\n    else if(tempVector«[i]» &gt;= 21 & tempVector«[i]» &lt;= 40)\n    {\n\n    }\n    else if(tempVector«[i]» &gt;= 41 & tempVector«[i]» &lt;= 60)\n    {\n \n    }\n    else if(tempVector«[i]» &gt;= 61 & tempVector«[i]» &lt;= 80)\n    {\n\n    }\n    else if(tempVector«[i]» &gt;= 81 & tempVector«[i]» &lt;= 100)\n    {\n\n    }\n  }\n}\n\n\n8.3 Return a vector output\nWe are no longer returning a single categorical value, we are returning a vector of categorical values.  The return vector is the same size at the temperature vector.\n \nThere are 3 steps here:\n\nCreate a return vector before the for loop (this is a state variable that updates each time through the for loop)\nAppend categorical values to the return vector inside the for loop\nReturn the vector to the caller after the for loop (after the vector has been fully populated with values)\n\ntempCategory5 = function(tempVector, unit=\"F\")\n{\n  # This part stays the same\n  if(unit == \"C\") \n  {\n    tempVector = (9/5)*tempVector + 32;\n  }\n  else if(unit == \"K\")\n  {\n    tempValue = tempValue - 273;      # convert K to C\n    tempValue = (9/5)*tempValue + 32; # convert C to F\n  }\n\n  «# step 1: create a return vector»\n  «retVector = c();»   # c() means this is a vector\n\n  # go through each value in tempVector\n  for(i in 1:length(tempVector))\n  {\n    if(tempVector[i] &gt;= 1 & tempVector[i] &lt;= 20)\n    {\n      «# step 2: populate the return value inside the for loop»\n      «retVector[i] = \"freezing\";» \n    }\n    else if(tempVector[i] &gt;= 21 & tempVector[i] &lt;= 40)\n    {\n      retVector[i] = \"cold\";  \n    }\n    else if(tempVector[i] &gt;= 41 & tempVector[i] &lt;= 60)\n    {\n      retVector[i] = \"moderate\";  \n    }\n    else if(tempVector[i] &gt;= 61 & tempVector[i] &lt;= 80)\n    {\n      retVector[i] = \"warm\";  \n    }\n    else if(tempVector[i] &gt;= 81 & tempVector[i] &lt;= 100)\n    {\n      retVector[i] = \"hot\";  \n    }\n  }\n  «# step 3: return the populated vector to the caller:»\n  «return(retVector);»\n}\n\n\n8.4 Using tempCategory5()\nLet’s first test to make sure the function still works with one value:\ncat5a = tempCategory(45);\ncat5b = tempCategory(tempVector=85);\ncat5c = tempCategory(tempVector=17);\ncat5d = tempCategory(-2); \ncat5a:   \"moderate\"\ncat5b:   \"hot\"\ncat5c:   \"freezing\"\ncat5d:   NULL\nAnd next test tempCategory5() with vectors that we create using c() and seq():\ncat5e = tempCategory5(c(10,30,50,70,90));\ncat5f = tempCategory5(seq(from=5, to=90, by=20));\ncat5g = tempCategory5(tempVector=c(30,25,20,15,10), unit=\"C\");\ncat5h = tempCategory5(tempVector=seq(from=25, to=-5, by=-5), unit=\"C\");\ncat5e = tempCategory5(c(10,30,50,70,90));\ncat5f = tempCategory5(seq(from=5, to=90, by=20));\ncat5g = tempCategory5(tempVector=c(30,25,20,15,10), unit=\"C\");\ncat5h = tempCategory5(tempVector=seq(from=25, to=-5, by=-5), unit=\"C\");\nAnd, lastly, test tempCategory5() with vectors from a data frame.  For this we will use the Lansing weather data for the year 2016 and use the maxTemp and minTemp columns:\nweatherData = read.csv(file=\"data/LansingNOAA2016.csv\", \n                       sep=\",\",\n                       header=TRUE, \n                       stringsAsFactors = FALSE); \n\ncat5i = tempCategory5(weatherData$maxTemp);\ncat5j = tempCategory5(weatherData$minTemp);\n\n\n8.5 Saving vectors to a data frame\nThe Environment says that there are 366 values inside cat5i and cat5j, but it would be easier to see the values in context – by adding the vectors to the weatherData data frame.\n  weatherData$maxTempCat = cat5i;\n  weatherData$minTempCat = cat5j;\nWhen you double-click on weatherData in the Environment, you will see the new columns at the end (maxTempCat and minTempCat).  The view in Figure 2 is days at the beginning of the year – so, January and it’s cold.\n\n\n\n\n\n\nFigure 2: Adding the temperature vectors to the weatherData data frame\n\n\n\n \nExtension: Creating a factor (categorical) vector",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#application",
    "href": "lessons/1-15_Functions3.html#application",
    "title": "1-15: Functions 3",
    "section": "9 Application",
    "text": "9 Application\n1) Create a script named app1-15.r in your scripts folder.\nNote: in this application you will by modifying and creating functions in the temperature.r script – these functions all need to be tested in the app1-15.r script.\n \n2) In comments at the top of your script, answer the following questions:\n\nHow do arguments make a function more robust? \nWhy does this code from Functions and arguments have a default value for unit but not for tempVector?\nWhy does the first part of tempCategory5 (in Index the temperature values), where you check for the unit and convert all the values in the vector,not need to be in a for loop?\n\n \n3) Fix the following two issues in tempCategory5():\n\nGive errors for temperatures not covered in the if-else-if structure – and have a different error for temperature that are too high and temperatures that are too low.\nThe function works for all integer values from 1-100.  Have the function work for all decimal values.  Some values that do not currently not work (i.e., returns NULL) in tempCategory5() are 20.5, 40.5, 60.5, and 80.5.\n\n \nQuestions 4 and 5 can be done with or without a for loop.  You should first get 4 and 5 to work for a single value and then move to multiple values (i.e., vectors)\n4) Create one function in temperature.r that converts a vector from Celsius to Fahrenheit and Fahrenheit to Celsius. \n\nHave the function use a Boolean argument to determine the direction of the conversion\n\n \n5) Createone function that does all of the following temperature conversions (note: Kelvin = Celsius + 273):\na) F -&gt; C\nb) C -&gt; F\nc) F -&gt; K\nd) C -&gt; K\ne) K -&gt; C\nf) K -&gt; F\n \nThis can be done with 2 arguments:\n\na temperature vector\na string that gives the conversion type (“FtoC”, “CtoK”…)\n \n\nThis method requires an if-else-if structure that looks at the second argument to determine which conversion is needed.\n \nA better way to do it is with 3 arguments:\n\nthe temperature vector\nthe unit to convert from\nthe unit to convert to\n \n\nThe second method will require multiple conditions in your if-else-if structure:\nif(convertFrom == “C” & convertTo == “F”)\n \n6) Create a function that finds the difference in temperatures between consecutive days and returns the temperature differences as a vector.\n \nSo if you have four high temperatures: 40, 45, 35, 42:\n\nthe four calculations would be: (no calculation), (45-40), (35-45), (42-35)\nand the return vector would be:  (NA, 5, -10, 7\n\nNote: The first value of the return vector is always NA because there is nothing to subtract.\nSave you script file as app1-15.r  in the scripts folder of your RStudio Project for the class.\n \nSave the script as app1-15.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#for-next-lesson",
    "href": "lessons/1-15_Functions3.html#for-next-lesson",
    "title": "1-15: Functions 3",
    "section": "10 {for next lesson}",
    "text": "10 {for next lesson}\n5) Create a function in toolbox.r that calculates the Mean Square Error (MSE) of a vector (V) of numeric values.\n\\[\nM S E=\\frac{1}{n} \\sum_{i=1}^{n}\\left(V_{i}-\\operatorname{mean}(V)\\right)^{2}\n\\]\nA good middle step for this problem is to calculate the mean of the vector using a for loop (i.e., add all the vector values using a for loop and then divide by the length of the vector).\n\n10.1 Tips for question 4\n\nn is the same as the length of the vector\nUse the mean() function to find the mean of the vector.\nCreate a state variable that hold the total value\nUse a for loop to cycle through each value in the vector.  For each value you want to calculate \\(\\left(V_{i}-\\operatorname{mean}(V)\\right)^{2}\\) and add that to the total value\nAfter you get the total, divide it by the length of the vector\n\n \nExample If you have:\nvec = c(8, 11, 9, 4);\nthen the mean(vec) = 8 and\n\\[\nM S E=\\frac{(8-8)^{2}+(11-8)^{2}+(9-8)^{2}+(4-8)^{2}}{4}=6.5\n\\]\n\n\n10.2 End-of-unit survey\nPlease take this short (less than 5 minute) survey regarding this class.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-15_Functions3.html#extension-creating-a-factor-categorical-vector",
    "href": "lessons/1-15_Functions3.html#extension-creating-a-factor-categorical-vector",
    "title": "1-15: Functions 3",
    "section": "11 Extension: Creating a factor (categorical) vector",
    "text": "11 Extension: Creating a factor (categorical) vector\ncat5i is a string vector with only 5 values in it: hot, warm, moderate, cold, and freezing.\n \nWe can convert this vector into a factor, or categorical, vector using as.factor();\n  factorVector = as.factor(cat5i);\nIn the Environment we see factorVector is:\nfactorVector:  Factor w/ 5 levels \"cold\", \"freezing\",...: 1 1 1 1 1 1 4 1 4 ...\nThe 5 levels are just the five possible values from the original vector cat5i in alphabetical order.  You can also get these five levels in the Console:\n&gt; levels(factorVector)\n[1] \"cold\"     \"freezing\" \"hot\"      \"moderate\" \"warm\"  \nThe numbers refer to the 5 levels.  1 is “cold”, 2 is “freezing”… We can look at the numbers in the Console using as.numeric():\n&gt; as.numeric(factorVector)\n  [1] 1 1 1 1 1 1 4 1 4 1 2 1 2 1 4 1 1 2 1 1 1 1 1 1 1 4 1 1 1 4 4 4 1 4 1 1 1\n [38] 4 1 1 1 1 1 2 2 1 1 1 1 4 4 4 1 4 1 1 1 4 4 4 1 1 1 1 1 4 4 5 5 4 4 4 4 4\n [75] 4 4 4 4 1 4 4 4 4 1 4 4 5 4 4 5 5 4 1 4 1 4 4 1 1 1 4 4 4 4 4 5 5 5 3 5 5\n[112] 5 4 4 5 5 4 4 4 4 4 4 4 5 4 5 5 5 5 5 4 5 5 5 4 4 5 5 5 5 5 5 5 5 3 3 3 3\n[149] 3 3 3 3 5 5 3 3 5 5 5 5 5 3 3 3 5 5 3 5 3 3 3 3 3 3 5 3 3 3 3 5 5 3 5 5 5\n[186] 3 3 3 3 3 5 3 3 3 3 3 5 5 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 3 3 3 3 3 3 3 3 3\n[223] 3 3 3 3 3 3 3 3 3 3 3 5 5 5 3 3 3 5 3 3 3 5 5 5 5 5 3 3 3 5 5 5 5 5 3 5 5\n[260] 5 5 5 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 3 4 5 5 5 5 4 5 5 5 5 5 5 4 4 4\n[297] 5 4 4 1 4 4 5 4 4 5 5 4 4 5 5 5 4 4 5 4 4 4 4 4 4 5 5 4 1 1 1 1 4 4 1 4 4\n[334] 4 4 4 1 1 1 1 4 1 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 1 1 4 1 1 1 1 4\nWe can reorder the levels to go by temperature category instead of alphabetical instead using factor():\n  reorderedFactor = factor(factorVector, \n                           levels=c(\"freezing\", \"cold\", \"moderate\", \n                                    \"warm\", \"hot\"));\nAnd now the output is a bit more intuitive:\n&gt; levels(reorderedFactor)\n[1] \"freezing\" \"cold\"     \"moderate\" \"warm\"     \"hot\"     \n&gt; as.numeric(reorderedFactor)\n  [1] 2 2 2 2 2 2 3 2 3 2 1 2 1 2 3 2 2 1 2 2 2 2 2 2 2 3 2 2 2 3 3 3 2 3 2 2 2\n [38] 3 2 2 2 2 2 1 1 2 2 2 2 3 3 3 2 3 2 2 2 3 3 3 2 2 2 2 2 3 3 4 4 3 3 3 3 3\n [75] 3 3 3 3 2 3 3 3 3 2 3 3 4 3 3 4 4 3 2 3 2 3 3 2 2 2 3 3 3 3 3 4 4 4 5 4 4\n[112] 4 3 3 4 4 3 3 3 3 3 3 3 4 3 4 4 4 4 4 3 4 4 4 3 3 4 4 4 4 4 4 4 4 5 5 5 5\n[149] 5 5 5 5 4 4 5 5 4 4 4 4 4 5 5 5 4 4 5 4 5 5 5 5 5 5 4 5 5 5 5 4 4 5 4 4 4\n[186] 5 5 5 5 5 4 5 5 5 5 5 4 4 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 5 5 5 5 5 5 5 5 5\n[223] 5 5 5 5 5 5 5 5 5 5 5 4 4 4 5 5 5 4 5 5 5 4 4 4 4 4 5 5 5 4 4 4 4 4 5 4 4\n[260] 4 4 4 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 3 4 4 4 4 3 4 4 4 4 4 4 3 3 3\n[297] 4 3 3 2 3 3 4 3 3 4 4 3 3 4 4 4 3 3 4 3 3 3 3 3 3 4 4 3 2 2 2 2 3 3 2 3 3\n[334] 3 3 3 2 2 2 2 3 2 2 2 2 2 2 2 2 1 1 2 2 1 2 2 2 2 2 2 3 2 2 2 2 3\nThe advantage to using factors is that they are faster.  Factors are actually numeric vectors with each possible number asigned a string value.  So, there are 366 numeric values and 5 string values in reorderedFactor.  Numeric values can be be read in and processed much quicker than string values.  Also, there are older statistical and plotting functions that only accept factors as an argument.\n \nThe disadvantage is that factors are clumsy to work with.  While they are faster than string vectors, modern functions will essentially factorize a string vector in the background – minimizing the lost processing time.  And pretty much all modern statistical and plotting functions will happily take string vectors – including GGPlot.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-15: Functions 3"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html",
    "href": "lessons/1-13_Functions.html",
    "title": "1-13: Functions",
    "section": "",
    "text": "4 parts of programming\nswitch to standard if-else statement spacing?\nlink median() to lesson 5 section 2",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#purpose",
    "href": "lessons/1-13_Functions.html#purpose",
    "title": "1-13: Functions",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreate reusable code (a function)\nUse arguments in functions\nUse return values in functions",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#sec-downloads",
    "href": "lessons/1-13_Functions.html#sec-downloads",
    "title": "1-13: Functions",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nMain Script: download the main script here\nFunction Script: download the function script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#reusable-scripts",
    "href": "lessons/1-13_Functions.html#reusable-scripts",
    "title": "1-13: Functions",
    "section": "3 Reusable scripts",
    "text": "3 Reusable scripts\nFunctions are self-contained scripts that performs a common task. For example, there are statistical functions that take a vector of values and return the statistical value (e.g., mean() and median()), functions that take data and create plots (e.g., plot(), boxplot()), and functions that interact with the Console (e.g., cat() and print()). The functions listed above are all built into R and are designed to be used in any script.\n \nThere are essentially three types of functions in R:\n1) Built-in to R\n2) Packages, which are extensions of R (e.g., ggplot2, tidyverse – we cover these in the next part of the class)\n3) User-created, which we will focus on in this lesson",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#parts-of-a-function",
    "href": "lessons/1-13_Functions.html#parts-of-a-function",
    "title": "1-13: Functions",
    "section": "4 Parts of a function",
    "text": "4 Parts of a function\nAll functions, whether built into R, in packages, or user-created, have the same four components: name, argument, codeblock, and return value. \n \nIn the Help tab we can see most of the components for the statistical function, mean():\n\n\n\n\n\n\nFigure 1: Info about the function mean() in the Help tab\n\n\n\n\n4.1 Name\nFunctions, like variables, are named objects that stores information.  The difference is that variables store values whereas functions store script.\n \nThe name of the function in Figure 1 is mean(). When referring to a function, we often put parentheses after the name to indicate that this object is a function, not a variable.\n\n\n4.2 Arguments (inputs to a function)\nArguments are variables whose values are supplied by the caller and used by the function.\n \nIn the Help tab (Figure 1) we see that the Default S3 Method (the most commonly used method) for mean() has three arguments (x, trim, na.rm). Note: the ( … ) indicates that mean() can be extended with more arguments.\nmean(x, trim = 0, na.rm = FALSE, ...)\nIn this case, x is the vector of values that the caller want to find the mean for. Note: x is often used by R as a generic argument for input values.\n \nThe other two arguments, trim and na.rm, are tweaks to mean() that give mean() more functionality. trim is used to remove extreme values and na.rm is used to ignore NA values. trim and na.rm have default values (trim = 0, na.rm= FALSE) meaning the caller does not need to provide values for these arguments unless they want to change the default functionality of mean().\n \nExtension: Functions without arguments\n\n\n4.3 Codeblock\nIn order to interact with a function, the caller needs to know the functions’ name, arguments, and return value. The caller generally does not need to know the rest of the code inside the codeblock, and this code is usually hidden from the caller.\n \nThe Help tab does not show the codeblock for mean(). However, you can see the codeblock for mean() using this code in Console:\n&gt; getAnywhere(\"mean.default\");\nfunction (x, trim = 0, na.rm = FALSE, ...) \n«{»\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x &lt;- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n &lt;- length(x)\n    if (trim &gt; 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim &gt;= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo &lt;- floor(n * trim) + 1\n        hi &lt;- n + 1 - lo\n        x &lt;- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n«}»\nFor a full explanation of why you need to use mean.default() instead of mean() go to Extension: codeblock for mean()\n \nThe main takeaway is that, like if-else statements and for loops, all functions have an associated codeblock that is designated by curly bracket ( { } ). We will see more codeblocks when we look at the function script for this lesson.\n\n\n4.4 Return value (output of a function)\nWhen a caller calls a function, they usually expect to get some information back from the function. In the case of mean(), the caller is expecting the mean value of the vector provided as an argument. The Value section of Figure 1 gives information about what the function is returning to the caller. mean() returns a “length-one object”.\n \nIn other words, the return value from mean() is one value: the mean.\n\n\n4.5 Using a function\nWe will call mean() multiple times with the same vector of values but changing the arguments. One value in the vector is NA, which we need to deal with because the mean of any vector with an NA value is NA. Note: this was covered in more detail in lesson 5 with median().\n \nEach line of code below calls the function mean(), passes in values for one or more arguments, and saves the return value from the function to the variables named ret1, ret2, ret3, and ret4.\ntestVector = c(10, 15, 5, NA, -100, 10); # has an NA value\nret1 = mean(x=testVector);               # uses default for na.rm, which is FALSE\nret2 = mean(x=testVector, na.rm=FALSE);  # same as above\nret3 = mean(x=testVector, na.rm=TRUE);   # remove NAs\nret4 = mean(x=testVector, na.rm=TRUE, trim=0.1);  # remove NAs and trims high and low value\nIn the Environment we can see the return values stored in the variables.\nret1: NA_real_\nret2: NA_real_\nret3: -12\nret4: 10\nret1 and ret2 are NA_real because there was an unignored NA value in the vector and we did not choose to remove the NA. note: NA_real_ means the value is NA but should be a real number (as opposed to a string value).\nret3 is -12, the mean of the values when the NA is removed\nret4 is 10, the mean of the values when the high (15) and low (-100) values are also removed. Note: trim=0.1 means trim top and bottom 10%.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#using-a-function-script",
    "href": "lessons/1-13_Functions.html#using-a-function-script",
    "title": "1-13: Functions",
    "section": "5 Using a function script",
    "text": "5 Using a function script\nSo far we have used functions that are built in to R. Now we will use functions from the function script for the lesson named 1-13_myFunctions.R (in Section 2).\n \nIn 1-13_myFunctions.R, there are two functions that calculate mean called mean_class() and mean_adv(). Both functions have an argument named vec, which is the values that the caller want to find the mean of. mean_adv() has a second argument called removeNA, which is set to a default value of FALSE.\n \n\n\n\nmean_class = function(vec)\n\nmean_adv = function(vec, removeNA = FALSE)\n\n\nFigure 2: Headers for the two functions in 1-13_myFunctions.R\n\n\n\n\n5.1 Sources the functions script\nSince the functions are in a separate script, we must first read in the functions script to gain access to the functions. In the main lesson script, 1-13_Functions.R. we read in the functions script using source() and the path to the function script as the argument (in this case: scripts/myFunctions.R):\nsource(\"scripts/1-13_myFunctions.R\")\nThe above code adds the two functions from 1-13_myFunction.R to the Functions section of the Environment, giving the script the ability to use the functions.\n\n\n\nFunctions\nmean_adv:   function (vec, removeNA = FALSE)\nmean_class: function (vec)\n\n\nFigure 3: Environment after sourcing the functions script\n\n\n\nnote: source() and the Source button both execute all code within a script\n\n\n5.2 Parts of the functions\nLooking at the two functions in 1-13_myFunctions.R, we see the four components of a function:\n\nname: mean_class() and mean_adv()\narguments:\n\nmean_class() has one: vec\nmean_adv() has two: vec and removeNA\n\ncodeblock: everything between ( { ) and ( } ) – this is the code that gets executed when the function is called\nreturn value: both functions return the mean value using return()",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#using-the-function-script",
    "href": "lessons/1-13_Functions.html#using-the-function-script",
    "title": "1-13: Functions",
    "section": "6 Using the function script",
    "text": "6 Using the function script\nThe function, mean_class() solves for the mean by going through all the values in vec using a for loop, adds the values, and then dividing that by the number of values in vec.\n\n6.1 Header line of a function\nThe first line of a function is often called the header and gives the name of the function (mean_class()) and the arguments (vec):\nmean_class = function(vec)\nvec is the vector that the caller wants to find the mean for. Since vec has no default value, vec must be supplied by the caller.\n\n\n6.2 Function codeblock\nFunctions, just like if() and for(), have codeblocks attached to them that are executed when the function is called. The codeblock is encapsulated with curly brackets { }.\nmean_class = function(«vec»)\n{ # start function codeblock\n  vecAdded = 0; ### state variable -- starts at 0\n\n  ### Use the for loop to cycle through all the values in vec and add them to vecAdded\n  for(i in 1:length(«vec»))\n  {\n    ### Adds the next value in vec\n    vecAdded = vecAdded + «vec»[i];\n  }\n\n  ### Divide the total value by the number of values to get the mean\n  meanVal = vecAdded / length(«vec»);\n\n  ### return the mean value to the caller\n  «return(meanVal)»;\n} # end function codeblock\nA function codeblock operates like any other R code with two exceptions:\n\nThe arguments in the function call are variables used in the codeblock. So, the caller gives a value to vec and the codeblock uses this value.\nFunctions explicitly return a value to the caller using return(). In this case, meanVal is returned.\n\n\n\n6.3 return value\nTo the caller a function acts largely like a block box that takes input (arguments) and has an output (the return value). The return value is sent in this line:\nreturn(meanVal);\nWhen the caller calls the function, they often set a variable equal to the function (e.g., retVal in the code below). The return value is stored in the variable set equal to the function:\nretVal = mean_class(c(3,5,2,7));  # saves the return value, 4.25, to the variable retVal\n\n\n6.4 Calling the function\nRemember that a function, like a variable, cannot be used unless it is in your Environment, this is what source(\"scripts/1-13_myFunctions.R\") does.\n \nWe will call mean_class() multiple times and save the results to four different variables:\nret1b = mean_class(vec=c(6,2,8,3));        # 4.75\n# ret2b = mean_class();                    # error because argument not provided\nret3b = mean_class(vec=c(6,2, NA, 8,3));   # NA_Real because of the NA \nret4b = mean_class(vec=c(6,2,8,3,75,200)); # 49\nanotherVec = (7, -7, 10, -8);\nret5b = mean_class(vec=anotherVec);        # can use a predefined vector\nEach line of code above calls the function mean(), passes in values for one or more arguments, and saves the return value from the function to a variable. In the Environment we can see the return values stored in the variables.\nret1b: 4.75 \nret3b: NA_real_\nret4b: 49\nret5b: 1",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#mean_adv",
    "href": "lessons/1-13_Functions.html#mean_adv",
    "title": "1-13: Functions",
    "section": "7 mean_adv",
    "text": "7 mean_adv\nJust like mean_class(), the function, mean_adv() solves for the mean by going through all the values, adding them up, and then dividing that answer by the number of values in vec. The difference is that mean_adv() checks for NA values and gives the caller the option to remove them.\n\n7.1 Header line of a function\nThe header for mean_adv() looks similar to mean_class() except there is a second argument, removeNA, and this argument has a default value of FALSE. This means if the caller does not set removeNA, it will be FALSE (i.e., NA values will not be removed).\nmean_adv = function(vec, removeNA = FALSE)\n\n\n7.2 Codeblock\nIn the codeblock attached to mean_adv(), we need to conditionally handle the situation where NA values are to be removed, based on the value of the argument removeNA. We do this using an if-else-if structure inside the for loop.\nmean_adv = function(vec, removeNA = FALSE)\n{\n  vecAdded = 0; ### state variable -- starts at 0\n  numNA = 0;    ### second state variable that counts the number of NA values\n\n  ### Use the for loop to cycle through all the values in vec and add them to vecAdded\n  for(i in 1:length(vec))\n  {\n    «if»(is.na(vec[i]) == FALSE)  ### If the value is not NA\n    {\n      ### Adds the next value in vec\n      vecAdded = vecAdded + vec[i];\n\n    }«else if» (removeNA == TRUE)   ## we have a NA value and want to remove it\n    {\n      ### Don't add the value, instead increase the number of NA by 1\n      numNA = numNA +1;\n    \n    }«else if» (removeNA == FALSE)  ## we have a NA value and don't want to remove it\n    {\n      ### We cannot solve for a mean with an NA so the return value has to be NA\n      return(NA);  # this will end the function\n    }\n    \n    ### Divide the total value by the number of values that are not NA to get the mean\n    meanVal = vecAdded / ( length(vec) - numNA);\n  \n    ### return the mean value to the caller\n    return(meanVal);\n  }\nThere are three possible situations, hence three parts to the if-else-if structure:\n\nif(is.na(vec[i]) == FALSE)  # The current vec value is not NA\n\nThe ith value is not NA (i.e., it’s a number), so add the number to the total\n\nelse if (removeNA == TRUE)  # We have a NA value and want to remove it\n\nignore the NA value and add 1 to the number of NA values\n\nelse if (removeNA == FALSE) # We have a NA value and don't want to remove it\n\nwe know the return value has to be NA – so return NA\n\n\n\n\n7.3 return value\nJust like break immediately ends a for loop, return() immediately ends a function.\n \nThere are two return() statements in this function:\n\nOnce an NA value is hit, and the caller did not ask for NA values to be removed. At this point we know the answer is NA. There is no point in checking any more values in the vector. We put a return() to end the function and pass NA back to the caller\nAt the end of the codeblock after the for loop cycles through all the values in the vector.\n\n \nSince return() ends a function, only one return() can be executed per function call.\n\n\n7.4 Using the function\nret1c = mean_adv(vec=c(6,2,8,3));       # 4.75\n# ret2c = mean_adv();                   # will cause error because argument not provided \nret3c = mean_adv(vec=c(6,2, NA, 8,3));  # will be NA (removeNA default is FALSE)\nret4c = mean_adv(vec=c(6,2, NA, 8,3), removeNA = TRUE);  # 4.75\nret5c = mean_adv(vec=c(6,2,8,3, 75,200)); # 49\nEach line of code above calls the function mean(), passes in values for one or more arguments, and saves the return value from the function to a variable. In the Environment we can see the return values stored in the variables.\nret1c:  4.75 \nret3c:  NA_real_\nret4c:  4.75\nret5c:  49",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#application",
    "href": "lessons/1-13_Functions.html#application",
    "title": "1-13: Functions",
    "section": "8 Application",
    "text": "8 Application\n1) For this application you need two scripts:\n\na functions script named app1-13_functions.r that contains the functions created in this application\na main script named app1-13.r where you will answer questions in comments and use and test the functions created in this application\nMake sure you test all the functions thoroughly in your main script. I want to see the test code.\nsource() your functions script from the main script\n\n \n2) For the function mean_adv(), answer the following questions in comments in the main script:\n\nWhy do we count the number of NAs?\nFor the two else if statements, what assumption can be made about the value being checked? Why can we make this assumption?\nWhy does removeNA have a default value but vec does not?\nUnder what circumstances, if any, will this line not be executed?\nmeanVal = vecAdded / ( length(vec) - numNA);\n\n \n3) Create a function that returns either the standard deviation or variance of a vector:\n\nThere should be two arguments: (1) the vector and (2) something that allows the caller choose whether they want the standard deviation or the variance.\nDo not use var() or sd() – use your own formula. You can use the code from application 1-03 as a starting point.\n\n \n4) Create a function that converts a temperature from either Celsius to Fahrenheit or Fahrenheit to Celsius\n\nThe conversion is: \\(F=\\frac{9}{5} C+32\\)\nThe user needs to pass in two arguments: the temperature value and which direction they want to convert\n\n \n5) Create a function that takes a number from 0 to 100 and returns a grade from A to F. \n\nReturn an error if the number is less than 0 and return a different error if the number is greater than 100.\n\n \nSave the script as app1-13.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#sec-meanCodeblock",
    "href": "lessons/1-13_Functions.html#sec-meanCodeblock",
    "title": "1-13: Functions",
    "section": "9 Extension: getAnywhere() and mean()",
    "text": "9 Extension: getAnywhere() and mean()\ngetAnywhere() is the built-in R function that allows you to see the codeblock associated with built-in R functions. But if you pass in mean as the argument you get this:\n&gt; getAnywhere(\"mean\") \nA single object matching ‘mean’ was found \nIt was found in the following places   \n  package:base   \n  namespace:base with value  \n  \nfunction (x, ...)  \nUseMethod(\"mean\") &lt;bytecode: 0x000001c00fe2d450&gt; \n&lt;environment: namespace:base&gt;\nThis is because mean() is a function that calls other functions (sometimes called a generic function) depending on the argument type (e.g., numeric, string, date).\n \nTo find the possible functions that mean() calls, we use methods()\n&gt; methods(\"mean\") \n[1] mean.Date     mean.default  mean.difftime mean.POSIXct  mean.POSIXlt \nThere are five possible calls. Four of the calls are related to times and dates. Only the second function, mean.default(), handles number (you can look this up in the Help tab). To see the codeblock for the function that handles numeric values, we need to pass mean.default into the argument of getAnywhere():\n&gt; getAnywhere(\"mean.default\");\n A single object matching ‘mean.default’ was found\nIt was found in the following places\n  package:base\n  registered S3 method for mean from namespace base\n  namespace:base\nwith value\n\nfunction (x, trim = 0, na.rm = FALSE, ...) \n{\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x &lt;- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n &lt;- length(x)\n    if (trim &gt; 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim &gt;= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo &lt;- floor(n * trim) + 1\n        hi &lt;- n + 1 - lo\n        x &lt;- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n}\n&lt;bytecode: 0x000001c00fc0f500&gt;\n&lt;environment: namespace:base",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#extension-functions-without-arguments",
    "href": "lessons/1-13_Functions.html#extension-functions-without-arguments",
    "title": "1-13: Functions",
    "section": "10 Extension: Functions without arguments",
    "text": "10 Extension: Functions without arguments\nMost of the time when you call a function, including the ones above, an argument is needed inside the parentheses.\n \nThis is not always true, for instance c(), which creates a vector, is often used without an argument, which means the vector initially has no values, also called a NULL vector:\nvec1 = c();         # a vector that initially has no values (an empty vector) \nvec2 = c(5,2,9,1);  # a vector with four values\nvec1: NULL\nvec2: num [1:4] 5 2 9 1",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#purpose",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#purpose",
    "title": "1-11: For Loops and State Variables",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nShow more example of using for loops with state variables",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#questions-about-the-material",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#questions-about-the-material",
    "title": "1-11: For Loops and State Variables",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#for-loops-a-vital-skill",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#for-loops-a-vital-skill",
    "title": "1-11: For Loops and State Variables",
    "section": "3 For loops – a vital skill",
    "text": "3 For loops – a vital skill\nIn this lesson, we will be using for loops and if() statements to do common calculations on a vector (e.g., finding the sum, finding maximum value, checking if any value meets a condition).  There are functions for all of these calculations in R that are easier to use than a for loop.  Hoever, the best way to learn for loops is to use them in applications that are easy to understand.  You are going to have many situations where you cannot rely on an R function or package – and for loops with embedded if-else statements are the best solution.\n \nUnderstanding how to effectively use for loops is perhaps the most vital skill you will learn as a programmer.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#multiple-state-variables",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#multiple-state-variables",
    "title": "1-11: For Loops and State Variables",
    "section": "4 Multiple state variables",
    "text": "4 Multiple state variables\nWe ended last lesson by introducing you to the concept of a state variable – a state variable is a variable that updates information (e.g., the state of some value) as the for loops cycles.  The state variable is always declared outside of the for loop and modified within the for loop.\n \nNote: if the state variable was declared inside the for loop then it would be re-initialized every time the for loop cycles.\n \nThe state variable needs to be initialized to some default value – or the value the state variable should be if the for loop has no cycles (an empty vector).  In the last example from last lesson, the state variable sunnyDays was initialized to 0, which is the correct value if the condition inside the for loop is FALSE every cycle..\n\n\n\nsunnyDays = 0; # state variable -- will hold the count of sunny days\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")  # was the day sunny\n  {\n    sunnyDays = sunnyDays +1;   # it was -- increase sunnyDays by 1\n  }\n  # there is no else here -- we don't care about non-sunny days\n}\n\n\nFigure 1: Using a state variable to calculate how many sunny days there was in noonCond (from last lesson)\n\n\n\nNow, let’s expand this for loop to count for two different conditions: Sunny and Rain.  We will now need two state variables – initializing both values to 0. \n\n\n\nsunnyDays = 0; # state variable -- will hold the count of sunny days\nrainyDays = 0; # state variable -- will hold the count of rainy days\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    sunnyDays = sunnyDays +1; # increases sunnyDays by 1\n  # We use else if here because we know \"Sunny\" and \"Rain\" are mutually exclusive\n  }else if(noonCond[i] == \"Rain\")\n  {\n    rainyDays = rainyDays +1; # increases rainyDays by 1\n  }\n}\n\n\nFigure 2: Using multiple state variables\n\n\n\nAnd we can look in the Environment tab to see what the final values of rainyDays and sunnyDays were:\nrainyDays:   3\nsunnyDays:   6\nYou can double check the noonCond vector and see there are 6 sunny and 3 rain days.\n&gt; noonCond\n[1] \"Cloudy\" \"Cloudy\" \"Sunny\" \"Rain\" \"Fog\" \"Sunny\" \"Sunny\" \"Cloudy\" \"Rain\" \"Rain\"\n[11] \"Snow\" \"Sunny\" \"Sunny\" \"Sunny\"\n\n4.1 The if-else statement\nIn Figure 2 we used an if-else structure to separate the two conditional statement (Sunny and Rain).  We could have just used two if() statements.  In other words, the 10th line could have been written:\nif(noonCond[i] == \"Rain\")\nBut we would be checking for Rain on days that we already know is Sunny.  noonCond on a specific day cannot be both Sunny and Rain (i.e., they are mutually exclusive) – so the extra checks are not needed.  The code would still work, just not be as efficient.  But, efficiency becomes more important as the number of values in your vector increases – and efficiency means quicker execution time.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variables-uses",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variables-uses",
    "title": "1-11: For Loops and State Variables",
    "section": "5 State variables uses",
    "text": "5 State variables uses\nWe can also use state variables on numeric values to count how many times a condition is met.\n \nIn this case, we will look at how many time\n\nthe temperature was greater than 60\nthe temperature was less than 50.\n\n \nWe are looking at two situations so we need two state variables.  Again, we initialize the values of the state variables to 0 because 0 would be the correct answer if the conditions inside the if-else statement were FALSE for every day.\n\n\n\ntempGT60 = 0; # days with temperatures greater than 60\ntempLT50 = 0; # days with temperatures less than 50\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &gt; 60)      # high temp more than 60\n  {\n    tempGT60 = tempGT60 +1;\n  }else if(highTemps[i] &lt; 50) # high temp less than 50\n  {\n    tempLT50 = tempLT50 +1;\n  }\n}\n\n\nFigure 3: Using multiple state variables to look at temperature values\n\n\n\nAnd we can look in the Environment tab to see the final values of the state variables:\ntempGT60:   2\ntempLT50:   4\nAgain, you can check highTemps in the Console to see this is correct:\n&gt; highTemps\n[1] 57 50 54 40 39 58 60 53 55 44 39 54 61 75\n\n5.1 Sequences with the for loops\nPerhaps you do not want to check every day – maybe you only want to check every-other day.  In this case you use seq() in the for loop to subset the days:\ntempGT60odd = 0; # odd indexed days with temperatures greater than 60\ntempLT50odd = 0; # odd indexed days with temperatures less than 50\n\nfor(i in «seq(from=1, to=numDays, by=2)») # every other day (1,3,5,7...)\n{\n  if(highTemps[i] &gt; 60)\n  {\n    tempGT60odd = tempGT60odd +1;\n  }else if(highTemps[i] &lt; 50)\n  {\n    tempLT50odd = tempLT50odd +1;\n  }\n}\nAnd, again, the Environment tab will show the final values of the state variables:\ntempGT60odd:   1\ntempLT50odd:   2",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variable-to-sum-values",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variable-to-sum-values",
    "title": "1-11: For Loops and State Variables",
    "section": "6 State variable to sum values",
    "text": "6 State variable to sum values\nWe have used state variables to count values – adding 1 to the state variable during each cycle of a for loop when a condition is TRUE.\n \nNext we will use a state variable to add values. In this case, adding up precipitation values to get the total precipitation.  Again, we initialize the state variable to default value of 0, because 0 is the answer if there is nothing to add.\n \nThe difference is that, instead of adding 1 to the state variable, we add the precipitation for that day, or precip[i] where i is the index variable.\n \nNote: there are no if() statements in this for loop because we are unconditionally adding every days’ precipitation to the total precipitation\n\n\n\ntotalPrecip = 0;\nfor(i in 1:numDays)\n{\n  totalPrecip = totalPrecip + precip[i];\n}\n\n\nFigure 4: Using a state variable to add values",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#if-any-checks",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#if-any-checks",
    "title": "1-11: For Loops and State Variables",
    "section": "7 if-any checks",
    "text": "7 if-any checks\nNow we are going to use a state variable to see if any value in the vector meets a condition.\n \nWe are going to initialize the state variable to FALSE and if any variable meets the condition, the state variable will be changed to TRUE.  The condition we will look is whether a temperature is less than 40.\n \nTrap: Using T and F to represent TRUE and FALSE is a bad idea\n\n\n\nanyDayLT40 = FALSE;\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &lt; 40)\n  {\n    anyDayLT40 = TRUE;\n  }\n}\n\n\nFigure 5: Using for loops to find out if any value in a vectors meets a condition\n\n\n\nAfter executing the script, we see that anyDayLT40 in TRUE in the Environment.  You can easily test other scenarios by changing the if() condition.  For example:\n  if(highTemps[i] &lt; 30)  # this will produce a FALSE result\n\n7.1 The break statement\nIn Figure 5, the for loop is inefficient because it will continue to check every temperature value even after one of them passes the condition of being greater that 40.  This is not necessary because we only care if at least one value meets the condition. We do not care if more than one meets the condition\n \nTo make the code more efficient, we can add a break statement to the codeblock attached to the if(). break is a command that tells R to immediately exit the for loop. In other words, if the 5th value passes the condition, the for loop will end and not cycle through values 6-14.\n  # A more efficient check if any value in highTemps is less than 40\n  anyDayLT40_2 = FALSE;     # initialize state variable to FALSE\n  for(i in 1:numDays) \n  {\n    if(highTemps[i] &lt; 40)\n    {\n      anyDayLT40_2 = TRUE;  # found a value -- change state variable to TRUE\n      «break;»                # exits the for loop immediately\n    }\n  }\nA break statement in the above code will not meaningfully speed up this script, but it will speed up script that is cycling through 1000s or 10000s of times through a for loop.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#finding-the-highest-or-lowest-value",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#finding-the-highest-or-lowest-value",
    "title": "1-11: For Loops and State Variables",
    "section": "8 Finding the highest (or lowest) value",
    "text": "8 Finding the highest (or lowest) value\nFor the last example we are going to find the highest temperature in a vector.  We do this by cycling though each value in the vector highTemps and comparing it to the current highest temperature.  If the new value is higher than the highest temperature, then we set that to be the highest temperature.\n \nHere is the code – we will go over it in more detail in a bit:\n\n\n\nhighestTemp = 0;  # initialize the state variable to 0\n\nfor (i in 1:numDays)\n{\n  if(highTemps[i] &gt; highestTemp) # is this day's value grater than the current high\n  {\n    # this day's value is higher -- set highestTemp to this value\n    highestTemp = highTemps[i]; \n    # browser();  # uncomment to pause the script's execution at this point\n  }\n}\n\n\nFigure 6: Finding the highest value in a vector\n\n\n\n\n8.1 Using browser() to pause your script\nThe for loop above is going through every value in the highTemps in order.  Each time a new high temperature is found, highestTemp is set top that value.  So, highestTemp is going to start at 0 (the initial value), and change multiple times.\n \nIf we put highTemps in the Console, we can see each time a new highest temperature will occur:\n&gt; highTemps\n [1] «57» 50 54 40 39 «58» «60» 53 55 44 39 54 «61» «75»\nA new highest temperature will be discovered 5 times: 57, 58, 60, 61, and 75 (cycles 1, 6 , 7, 13, and 14).\n \nWe can use browser() to see this, too.  browser() is an instruction to pause the script in the middle of execution and put it in debug mode.\n \nIf we uncomment the browser() line in Figure 6:\n   # browser();  # uncomment to pause the script's execution at this point\nThen the script will pause at that line when the condition if(highestTemp &gt; highTemps[i]) is TRUE, which happens 5 times (out of 14 cycles) when i = 1, 6, 7, 13, and 14.\n \nbrowser() will initially pause the script when i = 1 and you can click Continue to pause the script when i = 6, 7, 13, and 14.  For now, the only other button you should know is Stop, which ends debug mode.\n\n\n\n\n\n\nFigure 7: The script Sourced with browser() uncommented after Continue is clicked twice\n\n\n\n \nDebug mode is a complicated topic that will be more fully explored in future lessons.\n\n\n8.2 Initializing the state variable\nI initialized the state variable, highestTemp, to 0 – and that works in this case because we know there are temperatures greater than 0.  But, if all the temperatures were negative, then this would not work (I will let you answer why this would not work in the Application).\n \nA better solution is to set the state variable to the first value in the vector (highTemps[1]).  This makes the first value in the highTemps vector the default answer.  In other words, if every condition check is FALSE (i.e., no temperature is greater than the first) then the first temperature is the highest temperature.\n \nNote: this means you could start the indexing variable i at 2 instead of one.  You do not need to test the 1st value against the 1st value – there is no harm but it is a tiny bit inefficient.\n\n\n\nhighestTemp2 = highTemps[1];  # set the state variable to the first value in the vector\n\nfor(i in 1:numDays) # could be (i in 2:numDays)\n{\n  if(highTemps[i] &gt; highestTemp2) # is this day's value greater than the current high\n  {\n    highestTemp2 = highTemps[i];  # set the state variable to the current day's value\n    ### another way to debug your script...\n    cat(\"Day \", i, \" the highest temp changed to \", highTemps[i], \"\\n\", sep=\"\");\n  }\n}\n\n\nFigure 8: Using a for loop to find the highest value in a vector\n\n\n\nWhenever you are looking for the most extreme value in a vector, it is best to set the state variable to the first value in the vector.  By doing this, you do not have to guess what kind of values you are going to get.\n\n\n8.3 Debug with cat()\nUsing cat() to output information to the Console is a quick-and-dirty, if not the most robust, way to debug your script. In this case, cat() shows the four time the highest temperature was changed in the 14 cycles of the for loop.\nDay 6 the highest temp changed to 58\nDay 7 the highest temp changed to 60\nDay 13 the highest temp changed to 61\nDay 14 the highest temp changed to 75\nRemember to remove or comment out your cat() statements that are used for debugging before sharing your script.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#application",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#application",
    "title": "1-11: For Loops and State Variables",
    "section": "9 Application",
    "text": "9 Application\n1) In comments answer: What happens if you set the state variable to 0 when trying to find the highest temperature if all temperatures are negative.\n \n2) Find out if any of the even days were less than 40 degrees. Hint: use seq()\n\nadd code to exit the for loop as soon as the condition is met\nadd code that outputs to Console the first day that met the condition\n\n \n3) Find the mean low temperature using for loops: get the total and divide by the number\n \n4) In one for loop find out how many days had:\n\n1 inch or more rain\nbetween 0.1 and 1 inch of rain (not inclusive of 0.1 or 1)\n0.1 inches or less rain\n\n \n5) Find out the lowest low temp and output to the Console the lowest temperature and the date it occurred on.\n \n6) On days that were cloudy: find the highest temperature and the mean temperature .\n \nSave the script as app1-11.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#trap-using-t-and-f-to-represent-true-and-false-is-a-bad-idea",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#trap-using-t-and-f-to-represent-true-and-false-is-a-bad-idea",
    "title": "1-11: For Loops and State Variables",
    "section": "10 Trap: Using T and F to represent TRUE and FALSE is a bad idea",
    "text": "10 Trap: Using T and F to represent TRUE and FALSE is a bad idea\nThe terms TRUE and FALSE are reserved keywords in R (just like if, for, else…) – this means that TRUE and FALSE are predefined and cannot be used as variable names in R.\n \nIf you try to assign a value to a “variable” named TRUE or FALSE, you will get an invalid (do_set) left-hand side to assignment error (Figure 9).  This is the same error you get if you try to assign a number to a number (i.e., 10 = 5).\n\n\n\n\n\n\nFigure 9: Assigning a value to a keyword causes an error.\n\n\n\nYou will often see R scripts that use T and F as shortcuts for TRUE and FALSE.  R accepts T and F as shortcuts for TRUE and FALSE but you should not use T and F to represent TRUE and FALSE because T and F are not protected keywords.  T and F can be overwritten as shown in Figure 9.\n \nIf T or F get overwritten then your code will produce unexpected results.  It is best to stick with the reserved (and protected) keywords TRUE and FALSE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#purpose",
    "href": "lessons/1-09_If_Else_Statements.html#purpose",
    "title": "1-09: If-Else Statements",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreate condition statements that control flow for either TRUE or FALSE conditions using an if-else structure\nperform multiple conditional statements on one variable using an if-else-if structure\ncreate error conditions in an if-else-if structure with an else statement",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#questions-about-the-material",
    "href": "lessons/1-09_If_Else_Statements.html#questions-about-the-material",
    "title": "1-09: If-Else Statements",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#dealing-with-false-conditions",
    "href": "lessons/1-09_If_Else_Statements.html#dealing-with-false-conditions",
    "title": "1-09: If-Else Statements",
    "section": "3 Dealing with FALSE conditions",
    "text": "3 Dealing with FALSE conditions\nIn the last lesson we looked at execution of the if() statement and how it changes the flow of a script.  if() statements contain a conditional statement inside the parenthesis and an attached codeblock surrounded by curly brackets ( { } ).  The codeblock is only executed if the conditional statement is TRUE. \nrandomNum = sample(1:100, size=1);\n\nif(randomNum &gt; 50)  # execute the attached codeblock if TRUE\n{\n  cat(\"You win\");\n}\n\n3.1 Else and FALSE conditions\nMany times when you are programming you want to execute something when the condition (e.g., temperature &gt; 50) is TRUE and when the condition is FALSE.  You execute a codeblock on a FALSE condition by using an if-else statement:\n\n\n\nrandomNum2 = sample(1:100, size=1);\n\nif(randomNum2 &gt; 50)  # execute the attached codeblock if TRUE\n{\n  cat(\"You win\");\n}else # execute this codeblock if FALSE\n{\n  cat(\"You lose\");\n}\n\n\nFigure 1: This author’s preference for structuring an if-else statement in R\n\n\n\n\nIf the condition is TRUE, the codeblock in the curly brackets ( {  } ) attached to the if() gets executed.\nIf the condition is FALSE, the codeblock in the curly brackets attached to the else gets executed.\n\n \nNote: Like if() statements, if-else statements are often used within for loops to check multiple values at once (e.g., all values in a column of a data frame) – we will be getting to that in the next lesson.\n\n\n3.2 Curly bracket placement in R and a bug\nFigure 1 uses the bracket placement preferred by me. However, when you see an R script you often see people write their if-else statements like this:\n\n\n\nif(randomNum2 &gt; 50) { \n  cat(\"You win\");\n} else { \n  cat(\"You lose\");\n}\n\n\nFigure 2: The common way in R to structure an if-else statement\n\n\n\nI find the method in Figure 2 harder to read and more challenging to add comments to than the method in Figure 1. However, for this class, you can use either method when coding if-else structures.\n \nNote: Neither method follows programming standards that you will find in almost every other language. This is because of a bug R. More information about this is here: Extension: Programming standards for if-else statements",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#if-else-statements-and-conditional-operators",
    "href": "lessons/1-09_If_Else_Statements.html#if-else-statements-and-conditional-operators",
    "title": "1-09: If-Else Statements",
    "section": "4 If-else statements and conditional operators",
    "text": "4 If-else statements and conditional operators\nLet’s now look at the script for the lesson. Like last lesson, we:\n\nread in the data from twoWeekWeatherData.csv\nsave the highTemp and noonCondition column to a vector\n\n### read in data from twoWeekWeatherData.csv\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                     sep=\",\",\n                     header=TRUE, \n                     stringsAsFactors = FALSE);  \n\n### Extract the highTemps column from the data frame -- save it to a variable\nhighTemps = weatherData$highTemp;\nnoonCond = weatherData$noonCondition;\nThis time, the script executes a codeblock for both TRUE and FALSE conditions:\nif(highTemps[3] &gt; 50)\n{\n  cat(\"  high temp 3 is greater than 50\\n\");   \n}else  # highTemp[3] &lt;= 50\n{  \n  cat(\"  high temp 3 is not greater than 50\\n\");\n}\n\nif(highTemps[4] &gt; 50)\n{\n  cat(\"  high temp 4 is greater than 50\\n\");\n}else\n{\n  cat(\"  high temp 4 is not greater than 50\\n\");\n}\n\nif(highTemps[5] &gt; 50)\n{\n  cat(\"  high temp 5 is greater than 50\\n\");\n}else\n{\n  cat(\"  high temp 5 is not greater than 50\\n\");\n}\nNow the script outputs information for all three highTemp values, two of which were less than 50\n\n\n\nChecking highTemps 3, 4, and 5 to see which are &gt; 50:\n  high temp 3 is greater than 50\n  high temp 4 is not greater than 50\n  high temp 5 is not greater than 50\n\n\nFigure 3: If-else output when checking three highTemp values to see if they are greater than 50\n\n\n\nExtension: Skipping brackets in if-else structures",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#if-else-statements-using-strings",
    "href": "lessons/1-09_If_Else_Statements.html#if-else-statements-using-strings",
    "title": "1-09: If-Else Statements",
    "section": "5 If-Else statements using strings",
    "text": "5 If-Else statements using strings\nConditional operators can also be used to compare two string values.  Usually, we are using == or != to compare string values.  So, the else statement is the opposite condition:\n\n\n\nif(noonCond[2] == \"Cloudy\")  # noonCond[2] is \"Cloudy\"\n{\n  cat(\"  Day was Cloudy\\n\");\n}else # noonCond[2] is not \"Cloudy\"\n{\n  cat(\"  Day was not Cloudy\\n\");\n}\n\nif(noonCond[3] != \"Sunny\")   # noonCond[3] is not \"Sunny\"\n{\n  cat(\"  Day was not Sunny\\n\")\n}else # noonCond[3] is \"Sunny\"\n{\n  cat(\"  Day was Sunny\\n\")\n}\n\n\nFigure 4: Using if-else statements on strings\n\n\n\nDay 2 was cloudy (the if condition) and day 3 was sunny (the else condition)\nCheck to see the noon condition on the day 2:\n  Day was Cloudy\n  Day was Sunny\n\n5.1 If-else vs. if() statements\nYou could just write the code in Figure 4 using only if statements and the code would output the same messages:\n\n\n\n  if(noonCond[2] == \"Cloudy\")  # noonCond[2] is \"Cloudy\"\n  {\n    cat(\"  Day was Cloudy\\n\");\n  }\n  if(noonCond[2] != \"Cloudy\")  # noonCond[2] != \"Cloudy\"\n  {\n    cat(\"  Day was not Cloudy\\n\");\n  }\n\n  if(noonCond[3] != \"Sunny\")   # noonCond[3] is not \"Sunny\"\n  {\n    cat(\"  Day was not Sunny\\n\")\n  }\n  if(noonCond[3] == \"Sunny\")   # noonCond[3] is \"Sunny\"\n  {\n    cat(\"  Day was Sunny\\n\")\n  }\n\n\nFigure 5: The inefficient way to check opposite conditions – using only if() statements\n\n\n\nBut there are two problems with the code above:\n\nYou are executing code that you know does not need to be executed.  Sunny and Not Sunny are mutually exclusive – there is no need for the script to check both.  This extra check adds a little bit to the script’s execution time – this can make a difference if you are checking 100,000 values in a data frame!\nAn if-else statement is easier to debug than two individual if() statements because you only need to debug one conditional statement – as opposed to two",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#adding-in-more-conditions-if-else-if-structures",
    "href": "lessons/1-09_If_Else_Statements.html#adding-in-more-conditions-if-else-if-structures",
    "title": "1-09: If-Else Statements",
    "section": "6 Adding in more conditions: If-Else-If Structures",
    "text": "6 Adding in more conditions: If-Else-If Structures\nWe are limited to two outcomes when using if-else structures: (a) the if() condition is TRUE or (b) The if() condition is FALSE.  However, the examples above contain situations that could easily have more than two possible condition.  For instance, the noonCondition can be “Sunny”, “Cloudy”, or “Rain” – and we can check for all three in an if-else-if structure.\n \nWith an if-else-if structure you can check as many mutually exclusive situations as you want.  And if-else-if structures are efficient because they will only execute the code until the first if-else-if condition is TRUE.\n\n\n\nif(noonCond[4] == \"Cloudy\")        # 1st check: the day is cloudy\n{\n  cat(\"  Day 4 was cloudy\\n\");\n}else if(noonCond[4] == \"Sunny\")  # 2nd check: the day is sunny\n{\n  cat(\"  Day 4 was sunny\\n\"); \n}else if(noonCond[4] == \"Rain\")   # 3rd check: the day is rainy\n{\n  cat(\"  Day 4 was rainy\\n\"); \n}\n\n\nFigure 6: Check multiple conditions using an if-else-if structure\n\n\n\nChecking day 4 against multiple conditions:\n  Day 4 was rainy \n\n6.1 The efficiency of if-else-if structures\nIn Figure 6, if we replaced day 4 with day 2, which was “Cloudy”, then only the first condition (noonCond[4] == “Cloudy”) gets checked.  Because “Cloudy” is TRUE there is no need to check “Sunny” and “Rain”.  If there are thousands of values to check (e.g., you are checking all the values in a large vector – next lesson) then a lot of computation time is saved by not checking conditions that cannot be TRUE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#the-error-or-everything-else-condition",
    "href": "lessons/1-09_If_Else_Statements.html#the-error-or-everything-else-condition",
    "title": "1-09: If-Else Statements",
    "section": "7 The error or everything else condition",
    "text": "7 The error or everything else condition\nWe usually want to execute something for values we have not prepared for.  For instance, a phone system might have menu options numbered 1 through 5.  In the user presses 7, the system will usually have a message saying something like “sorry, 7 is not an option”.\n \nThe problem with the script above is that it does nothing if the condition for the day is not given anywhere in the if-else-if structure (i.e., all the conditionals are FALSE). In an if-else-if structure you cannot anticipate everything that somebody will input into a dataframe – let alone all of the errant spellings.  To resolve this, we create what is often referred to as an error condition, meaning we set up a codeblock that gets executed if none of the conditions in the if-else-if structure are TRUE.  This error codeblock gets attached to the else statement.\n\n\n\nif(noonCond[5] == \"Cloudy\")       # 1st check: the day is cloudy\n{\n  cat(\"  Day 5 was cloudy\\n\");\n}else if(noonCond[5] == \"Sunny\")   # 2nd check: the day is sunny\n{\n  cat(\"  Day 5 was sunny\\n\"); \n}else if(noonCond[5] == \"Rain\")    # 3rd check: the day is rainy\n{\n  cat(\"  Day 5 was rainy\\n\"); \n}else  # none of the above are TRUE so output some error message\n{\n  cat(\"  The condition for day 5,\", noonCond[5], \", is invalid\\n\"); \n}\n\n\nFigure 7: Adding an error condition to the if-else-if structure\n\n\n\nSince we have an else statement at the end, there is guaranteed to be a response from the script no matter what noonCond is:\nChecking day 5 against multiple conditions:\n  The condition for day 5, Fog, is invalid\n\n7.1 Error statement help in debugging\nAdding the error statement also helps you debug your code.  In this case, the error statement tells you that some value does not meet any of the conditions (in this case, day 5 had Fog) and you can use the codeblock attached to the else statement to provide useful information about what went wrong – and perhaps suggest a fix.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#creating-number-ranges-using-if-else-structures",
    "href": "lessons/1-09_If_Else_Statements.html#creating-number-ranges-using-if-else-structures",
    "title": "1-09: If-Else Statements",
    "section": "8 Creating number ranges using if-else structures",
    "text": "8 Creating number ranges using if-else structures\nAnother use for if-else-if structures is to create number ranges.  The following code categorizes the highTemp by temperature range.\n\n\n\n  if(highTemps[3] &gt; 70)      # check for anything above 70\n  {\n    cat(\"  That is hot for April!\"); \n  }else if(highTemps[3] &gt; 60) # check for temps 61-70\n  {\n    cat(\"  That is warm for April!\");   \n  }else if(highTemps[3] &gt; 50) # check for temps 51-60\n  {\n    cat(\"  That temperature is about right for April!\");   \n  }else if(highTemps[3] &gt; 40) # check for temps 41-50\n  {\n    cat(\"  That is a little cold for April!\");   \n  }else # temperatures 40 and below\n  {\n    cat(\"  That is unusually cold for April!\");   \n  }\n\n\nFigure 8: Create number ranges with an if-else-if structure\n\n\n\nChecking temperature of day 3:\n  That temperature is about right for April!\n\n8.1 If-Else-If statements are mutually exclusive\nAn if-else-if structure ends as soon as a condition is determined to be TRUE.This means that at most one codeblock in an if-else-if structure gets executed.  In the above example (Figure 8), if the temperature is 75 (i.e., day 14), the first condition (highTemps[14] &gt; 70) is TRUE and “That is hot for April” is output. The if-else-if  ends here and none of the other conditions are checked.\n \nThe second condition (highTemp[14] &gt; 60) would, if checked, also be TRUE. But this condition does not get checked because a condition above was already TRUE – the if-else-if structure is done executing.\n \nAgain, in an if-else-if structure, only the codeblock attached to the first TRUE conditional statement gets executed. If none of the conditional statements are TRUE then the codeblock attached to  the else statement at the end is executed.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#application",
    "href": "lessons/1-09_If_Else_Statements.html#application",
    "title": "1-09: If-Else Statements",
    "section": "9 Application",
    "text": "9 Application\nA) In comments answer: Why can I say that the fourth condition else if(highTemps[3] &gt; 40) in Figure 8 checks only for values between 41 and 50 when the condition is highTemps[3] &gt; 40?\n \nB) In comments answer: Why might it be easier to find errors in a dataset using if-else-if structures vs. just if() statements?\n \nC) The following line randomly picks a letter from the vector and saves it to grade:\n  grade = sample(c(\"A\", \"B\", \"C\", \"D\", \"E\"), size=1);\nUse the above line \n\nHave the script output the score range for the grade (A is 90-100, B is 80-90…)\nHave the script output an error message if grade is anything except A,B,C,D,E (add more letters to the grade vector to test this out)\n\n \nD) The following line creates a random number between -30 and 120 and saves it to the variable temperature:\n  temperature = sample(-30:120, size=1);\n\nUse the above line and have the script output:\n\n\n“cold” if the temperature is between -20 and 30 (exclusive of -20 and 30)\n“warm” if the temperature is between 30 and 60 (inclusive of 30, exclusive of 60)\n“hot” if the temperature is between 60 and 100 (inclusive of 60 and inclusive of 100)\n“invalid value” if the temperature is below -20 or above 100\nhint: do the if-else-if structure strictly in ascending order or strictly in descending order – like the grades example above.  This mean splitting the “invalid” category into two conditions (less than -20 and greater then 100)\n\n\n\nChallenge: In the same script – change the output if the user enters a “border” value (in this case: 30 or 60)\n\n\nfor 30 output: “cold-ish”\nfor 60 output: “hot-ish”\n\n \nE) Repeat parts C, D, and E from the application in last lesson (1-08: Conditional Operations) using if-else statements. Note: there are a few different ways to do this.\n \nSave the script as app1-09.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#trap-true-and-false-are-keywords-t-and-f-are-not",
    "href": "lessons/1-09_If_Else_Statements.html#trap-true-and-false-are-keywords-t-and-f-are-not",
    "title": "1-09: If-Else Statements",
    "section": "10 Trap: TRUE and FALSE are keywords, T and F are not",
    "text": "10 Trap: TRUE and FALSE are keywords, T and F are not\nThe terms TRUE and FALSE are reserved keywords in R – this means that TRUE and FALSE are predefined and cannot be used as variable names in R.\n \nIf you try to assign a value to a “variable” named TRUE or FALSE, you will get an invalid (do_set) left-hand side to assignment error (Figure 9).  This is the same error you get if you try to assign a value to a number (e.g., 10 = “a”).\n\n\n\n\n\n\nFigure 9: Assigning a value to a keyword causes an error.\n\n\n\nYou will often see R scripts that use T and F as shortcuts for TRUE and FALSE.  R accepts T and F as shortcuts for TRUE and FALSE but T and F are not keywords.  This means that someone can assign a value to T or F that overrides the default TRUE/FALSE values – as done in Figure 9. If this happens, using T or F as shortcuts for TRUE or FALSE would produce unexpected results.  It is best to stick with the reserved (and protected) keywords TRUE and FALSE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#extension-brackets-and-code-blocks",
    "href": "lessons/1-09_If_Else_Statements.html#extension-brackets-and-code-blocks",
    "title": "1-09: If-Else Statements",
    "section": "11 Extension: brackets and code blocks",
    "text": "11 Extension: brackets and code blocks\nA codeblock enclosed by curly brackets { } usually follows an if() statement.  The brackets designate the start and end of the code block and R does not care how the brackets are placed in code – as long as the order is correct.\n \nThe following four code-blocks all execute exactly the same in R:\nrm(list=ls());  \n\nyourAge = readline(\"How old are you? \")\n\nif(yourAge &lt; 20)\n«{»\n    cat(\"You have your whole life ahead of you!!\");\n«}»\nrm(list=ls()); \n\nyourAge = readline(\"How old are you? \")\n\nif(yourAge &lt; 20)«{»\n    cat(\"You have your whole life ahead of you!!\");\n«}»\nrm(list=ls()); \n\nyourAge = readline(\"How old are you? \")\n \nif(yourAge &lt; 20)«{» cat(\"You have your whole life ahead of you!!\"); «}»\nrm(list=ls());\n\nyourAge = readline(\"How old are you? \")\n \nif(yourAge &lt; 20)\n                                           «{»\ncat(\"You have your whole life ahead of you!!\");     «}»                                            \nAll the above code blocks are valid.  R just looks for a start and end bracket and executes everything in between – it completely ignores the spaces in between.  The decision on where to place the brackets has to do with coding standards and viewability.  The first two code blocks above are the most commonly accepted standards and your code should use one of these two methods.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#extension-skipping-brackets-in-if-else-structures",
    "href": "lessons/1-09_If_Else_Statements.html#extension-skipping-brackets-in-if-else-structures",
    "title": "1-09: If-Else Statements",
    "section": "12 Extension: Skipping brackets in if-else structures",
    "text": "12 Extension: Skipping brackets in if-else structures\nYou will often see if-else statements with no curly brackets.  This only works if there is only one command attached to the if() and one command attached to the else.\nrm(list=ls()); \n\nfavAnimal = readline(\"What is your favorite animal? \");\n \nif(favAnimal == \"Llama\")\n  cat(\"You are wise beyond your years\");\nelse\n  cat(\"You still have a lot of room for growth\");\nThe code above works and is functionally equivalent to the code below\nrm(list=ls());   \n\nfavAnimal = readline(\"What is your favorite animal? \");\n \nif(favAnimal == \"Llama\")\n{\n   cat(\"You are wise beyond your years\");\n}else\n{\n   cat(\"You still have a lot of room for growth\");\n}\nThe only advantage to not using curly brackets is that it takes up less space.  I recommend that you include curly brackets even if there is only one command in the codeblock – it is more explicit and you avoid accidentally adding additional commands without the brackets.\n \nThe code below will give an unexpected ‘else’ error.  This is because R believes that the if() structure ends right after the first command, the cat() on line 7, because there are no curly brackets attached to the if(). This means the else statement is completely detached from the if(), so the else was unexpected.\nrm(list=ls());   options(show.error.locations = TRUE);\n  \nfavAnimal = readline(\"What is your favorite animal? \")\n   \nif(favAnimal == \"Llama\")\n   cat(\"You are wise beyond your years\\n\");\n   cat(\"No doubt about that.\");       # this line is NOT attached to the if()\nelse\n   cat(\"You still have a lot of room for growth\");\n\n\n\n\n\n\nFigure 10: Unexpected else error caused by not using curly brackets in if-else structures.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#trap-else-never-has-an-attached-condition",
    "href": "lessons/1-09_If_Else_Statements.html#trap-else-never-has-an-attached-condition",
    "title": "1-09: If-Else Statements",
    "section": "13 Trap: Else never has an attached condition",
    "text": "13 Trap: Else never has an attached condition\nA common mistake for people new to programming is to treat else like an if() or an else if() and attach a condition to it.  The codeblock attached to the else statement is supposed to be executed if all other conditional statements in the if-else-if structure fail, which is when the score is less than 60.\nrm(list=ls());\n \nscore = readline(\"Enter your score: \") \nscore = as.numeric(score);\n \nif(score &gt; 90) \n{\n   cat(\"A\");\n}else if(score &gt; 80) # score between 80-90\n{\n   cat(\"B\");\n}else if(score &gt; 70) # score between 70-80\n{ \n   cat(\"C\");\n}else if(score &gt; 60) # score between 60-70\n{ \n   cat(\"D\");\n}else (score &lt;= 60)  # will cause an error\n{                 \n   cat(\"E\");\n}\nThe script seems to work at first.  If you type in a value below 55 then “E” will be the output.  However, if you type in 75 the output is  “CE”.  If you type in 95  the output is “AE”. In fact, “E” will be part of the output no matter what you type in.\n\n\n\n\n\n\nFigure 11: Putting a condition on an else causes an error\n\n\n\nWhat happens is that the errant condition (score &lt;= 60) was attached to the else instead of the codeblock. Since the codeblock below was was detached from the else statement, it execute without condition (i.e., all the time).\n{                 \n   cat(\"E\");\n}\n \nThe proper way to code the else is as follows:\nrm(list=ls());\n \nscore = readline(\"Enter your score: \");\nscore = as.numeric(score);\n \nif(score &gt; 90) \n{\n   cat(\"A\");\n}else if(score &gt; 80) # score between 80-90\n{\n   cat(\"B\");\n}else if(score &gt; 70) # score between 70-80\n{ \n   cat(\"C\");\n}else if(score &gt; 60) # score between 60-70\n{ \n   cat(\"D\");\n}«else»  # all other conditions failed\n{                 \n   cat(\"E\")\n}\nNow the else will execute only when all other conditions fail.  In other words, it will execute when score is less than or equal to 60",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#extension-programming-standards-for-if-else-statements",
    "href": "lessons/1-09_If_Else_Statements.html#extension-programming-standards-for-if-else-statements",
    "title": "1-09: If-Else Statements",
    "section": "14 Extension: Programming standards for if-else statements",
    "text": "14 Extension: Programming standards for if-else statements\nNeither Figure 1 or Figure 2 is the programming standard for coding an if-else structure. The two most common methods put else on a line by itself either like this:\nif(randomNum2 &gt; 50) \n{ \n  cat(\"You win\"); \n}\nelse \n{ \n  cat(\"You lose\"); \n}\n Or like this:\nif(randomNum2 &gt; 50) { \n  cat(\"You win\");\n} \nelse { \n  cat(\"You lose\");\n}\nI would argue that both of the above methods improve upon the R standard for coding if-else structure. The problem is that, in R, the above methods will sometimes cause an unexpected ‘else’ error – something I consider to be a bug in R",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#purpose",
    "href": "lessons/1-07_Outputs.html#purpose",
    "title": "1-07: Outputs",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nOutput variables to the Console tab\nOutput messages to the Console tab\nOutput vectors, sequences, and mathematical operations\nOutput special characters to the Console tab, including a line feed\nOutput mixed message and variable statements to the Console tab\n\n\n1.1 Files for the lesson\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-to-console",
    "href": "lessons/1-07_Outputs.html#output-to-console",
    "title": "1-07: Outputs",
    "section": "2 Output to console",
    "text": "2 Output to console\nThe Console tab has many uses and one of them is to output messages from a script – the messages can contain text, variable, or some combination of the two.  Outputting messages to the Console can be done using the function cat(), which stands for concatenate. This is R’s way of saying that cat() will concatenate (combine) variables and values to create an output.\n \nExtension: cat() vs print()\n\n2.1 Output a message\nWe will first use cat() to output a text message to the Console tab – to do this we need to put the message in quotes:\ncat(\"Hello\");\n\n\n\nHello\n\n\nFigure 1: Outputting a text message in the Console tab\n\n\n\nIf you do not use quotes (” “), R will think you are referring to a variable.  For instance, the line cat(Hello) gives you the Object not found error because R thinks this is a reference to a variable named Hello – and, in this case, there is no variable named Hello. \ncat(Hello); # Will cause an «object not found» error\n\n\n\nError in cat(Hello) : object Hello not found\n\n\nFigure 2: An error that occurs if you try to output a variable (object) that does not exist in your script.\n\n\n\nNote: If there is a variable named Hello in your script, then cat(Hello); will output the value of the variable Hello.\n\n\n2.2 Output multiple messages\nYou can add as many cat() statements to your script as you like and they will be displayed sequentially in the Console tab:\ncat(\"Hello, World.\");\ncat(\"How are you?\");\ncat(\"I am fine.\");\n\n\n\nHello World. How are you? I am fine.\n\n\nFigure 3: Output message without spacing\n\n\n\n\n\n2.3 The line feed: \\n\nBut there is a problem here – R puts no spacing in between the lines (Figure 3).  This is typical behavior of programming languages – they do not add line feeds (e.g., enter or return) unless the script specifically requests that a line feed is added.\n \nThe instruction to add a line feed is to put \\n inside the quotes ( “  ” ):\ncat(\"Hello, World.\\n\");\ncat(\"How are you?\\n\");\ncat(\"I am\\n fine.\\n\"); # the first \\n will break up the line\n\n\n\nHello, World\nHow are you?\nI am\n fine.\n\n\nFigure 4: Message with line feeds\n\n\n\nIn Figure 4 we have our text on multiple lines.  Notice that the \\n does not get printed to the screen.  \\n is an instruction to R to add a line feed, sometimes called a newline character, and \\n needs to be put inside the quotes.\n \n\\n can be put anywhere in a quote.  In the above code there is a \\n put in between “am” and “fine”, hence the line feed between the two words.  The exact same message as Figure 4 can be output to the Console tab using only one cat() statement with multiple \\n:\ncat(\"Hello, World.\\nHow are you?\\nI am\\n fine?\\n\");\n\n\n\nHello, World\nHow are you?\nI am\n fine.\n\n\nFigure 5: Using one cat() statement with multiple \\n to output multiple lines of text",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#escape-character-backslash",
    "href": "lessons/1-07_Outputs.html#escape-character-backslash",
    "title": "1-07: Outputs",
    "section": "3 Escape character: backslash ( \\ )",
    "text": "3 Escape character: backslash ( \\ )\nThe backslash in programming is used in a string as an escape character. An escape character tells R that the next character is to be treated as a command rather than the character. This is similar to the way the Shift, Control, or Alt keys on your keyboard change the meaning of the character that is pressed with them (e.g, control-C is a command to copy).\n \nBackslash can be used to\n\nput in a control like a line feed ( \\n ) or a tab ( \\t )\nprint a character that has a functional meaning like a double quote ( \\“ ). In other words, treat the double quote as a character for output, not as the start or end of a string. This also works if you want to output a backslash ( \\\\ )\nuse Unicode to print our characters not on the keyboard using Unicode.  Here is a link to a partial list of Unicode characters.  Use the Escape sequence given on the page.  Note: according to Wikipedia, there are around 150,000 Unicode characters – and just recently Unicode has added lots of emojis.\n\n \ncat(\"\\tAnd the boy said, \\\"Hello\\\" \\n\");\ncat(\"Send a backslash \\\\ to the Console\\n\")\ncat(\"Some Unicode characters: \\u00C5 \\u0A94 \\u0115\\n\");\n\n\n\n    And the boy said, \"Hello\" \nSend a backslash \\ to the Console\nSome Unicode characters: Å ઔ ĕ\n\n\nFigure 6: Using backslash ( \\ ) to output special characters.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-messages-with-variables",
    "href": "lessons/1-07_Outputs.html#output-messages-with-variables",
    "title": "1-07: Outputs",
    "section": "4 Output messages with variables",
    "text": "4 Output messages with variables\nLet’s output data from the twoWeekWeatherData.csv file to the Console tab.\n \nFirst we will read in the file, like we did last lesson:\n  weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                         sep=\",\",                   \n                         header=TRUE);\n                        \nAnd then save the highTemp and lowTemp columns to their own variable:\nhighTemps = weatherData$highTemp;\nlowTemps = weatherData$lowTemp;\nWe can directly output the whole temperature vector values along with a line feed:\ncat(lowTemps);  # prints the variable lowTemps in the Console\ncat(\"\\n\");      # adds a line feed -- so the next message goes to the next line\n\n\n\n45 43 46 38 36 45 32 50 48 40 36 43 45 63\n\n\nFigure 7: Output the 12 values in the lowTemps variable\n\n\n\n\n4.1 Combine text and variables in one command\nWe can combine content (e.g., variables and text) in one cat() command by using comma to separate the different types of content:\ncat(\"The low temps are:\", lowTemps, \"\\n\");\n\n\n\nThe low temperatures are: 45 43 46 38 36 45 32 50 48 40 36 43 45 63\n\n\nFigure 8: Combining a text message and variables in one output\n\n\n\nTrap: Misplacing (or forgetting) quotes",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-indexed-values",
    "href": "lessons/1-07_Outputs.html#output-indexed-values",
    "title": "1-07: Outputs",
    "section": "5 Output indexed values",
    "text": "5 Output indexed values\nWe can output a single value from a vector by indexing it:\ncat(lowTemps[4], \"\\n\");     # 4th value in lowTemps\nOr, output a more robust message about the 4th day:\ncat(\"On the 4th day the high temperature was\", highTemps[4], \"and the low temperature was\", lowTemps[4], \"\\n\");\n\n\n\nOn the 4th day the high temperature was 40 and the low temperature was 38\n\n\nFigure 9: Combining multiple text messages and variables in an output\n\n\n\nOr, even do math on the values:\ncat(\"On the 4th day the difference in temperature was\", \n      highTemps[4] - lowTemps[4], \"degrees\\n\"); \nOn the 4th day the difference in temperature was 2 degrees",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-multiple-values",
    "href": "lessons/1-07_Outputs.html#output-multiple-values",
    "title": "1-07: Outputs",
    "section": "6 Output multiple values",
    "text": "6 Output multiple values\nWe can use c() to index multiple values within a vector:\ncat(lowTemps[c(4, 8, 3, 11)], \"\\n\");  # 4th, 8th, 3rd, and 11th values in lowTemps\n38 50 46 36 \nOr, we can use the sequencing operators to output multiple values in a vector:\n  cat(lowTemps[5:9], \"\\n\");   # simple sequence: 5th through 9th value\n  cat(lowTemps[seq(from=1, by=2, to=10)], \"\\n\"); # Values 1,3,5,7,9\n\n\n\n36 45 32 50 48\n45 46 36 32 48\n\n\nFigure 10: Output of sequenced values in lowTemps\n\n\n\nAnd add messages to the above output:\n  cat(\"Day 5-9 temperature:\",lowTemps[5:9], \"\\n\");  \n  cat(\"Temp on odd days:\", lowTemps[seq(from=1, by=2, to=10)], \"\\n\");\n\n\n\nDay 5-9 temperature: 36 45 32 50 48 \nTemp on odd days: 45 46 36 32 48 \n\n\nFigure 11: Outputting contiguous values in lowTemps using the sequencing operator.\n\n\n\ncat() commands can go across multiple lines – this one cat() is functionally the same as the above two cat():\n  cat(\"Day 5-9 temperature:\", lowTemps[5:9], \"\\n\", \n      \"Temp on odd days:\", lowTemps[seq(from=1, by=2, to=10)], \"\\n\");\n\n\n\nDay 5-9 temperature: 36 45 32 50 48 \nTemp on odd days: 45 46 36 32 48 \n\n\nFigure 12: Outputting the values of lowTemps using seq()",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#the-concatenate-cat-function",
    "href": "lessons/1-07_Outputs.html#the-concatenate-cat-function",
    "title": "1-07: Outputs",
    "section": "7 The concatenate, cat(), function",
    "text": "7 The concatenate, cat(), function\nWe have used cat() many times in this script to output variable and text to the Console but we really have not talked about cat() itself.\n \nLet’s search for cat in the search bar of the Help tab:\n\n\n\n\n\n\nFigure 13: Information about the cat() function in the Help tab.\n\n\n\nThe first part of cat() is the three dots “…”.  When the 3 dots are at the beginning of a function, the three dots say that cat() will accept any number of objectsas inputs.  The objects can be text in quotes, string variables, numeric variables, or other objects we have not discussed yet like Dates.\n \nNote: the three dots in cat() has a different meaning from the three dots in read.csv().  When three dots are at the first argument of a function (e.g., cat()) it means that any number of inputs are accepted.  When the three dots are elsewhere (e.g., read.csv()) it means the function can be extended with arguments that are not on the list.\n \nAfter the three dots, cat() has 5 arguments: file, sep, fill, labels, and append. These all have default values (e.g., file=““, sep=” “)\n\n7.1 The sep argument\nArguments are used to modify the behavior of a function.  sep changes how the different components of the output are separated– the default is to use 1 space.  We are going to change the sep argument.\n \nLet’s take the code from above and add the sep argument to cat() and give sep the value ” ** “:\n  cat(\"Day 5-9 temperature:\", lowTemps[5:9], \"\\n\", \n      \"Temp on odd days:\", lowTemps[seq(from=1, by=2, to=10)], \"\\n\",\n      sep = \" ** \");\nAnd you will notice that the different components in cat() are separated by ” ** “.\n\n\n\nDay 5-9 temperature: ** 36 ** 45 ** 32 ** 50 ** 48 ** \n ** Temp on odd days: ** 45 ** 46 ** 36 ** 32 ** 48 ** \n\n\nFigure 14: Using the sep argument in cat()\n\n\n\nNote: The most common way people use sep is to set sep=““– in other words, set sep to nothing so nothing is added to the output.\n \nTrap: Misplacing (or forgetting) quotes\n\n\n7.2 The file argument\nBy default, cat() will output to the Console. But, you could have cat() output to a file by using the file argument.  The file argument in cat() works just like the file argument in read.csv() with one exception:  if the file does not exist yet then R will create the file.\n \nSo, this line:\ncat(\"Hi\", file=\"hello.txt\");\ncreates a file called hello.txt in your Project Folder and add the text hi to the file.\n \nExtension: Sending Console info directly to file",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#application",
    "href": "lessons/1-07_Outputs.html#application",
    "title": "1-07: Outputs",
    "section": "8 Application",
    "text": "8 Application\nA. Line 47 in the script downloaded for this lesson is beyond 85 characters, break the line up so that it functions the same but does not go over 85 characters.\n \nB. In the Help for the function c(), the S3 method has 3 dots as the first argument. In comments answer: What does the three dots tell you about the c() function?\n \nC.  Using one cat(), output to the Console:\n\nthe date of the 11th day and the amount of precipitation on that day\nthe difference in precipitation between the 3rd and 4th day\nevery 3rd days precipitation\nthe precipitation for days 12, 9, 4 – using a index vector created with c()\nChallenge: output the total precipitation for the first 10 days (without using sum(), which is not something you have learned yet!)\n\nMake sure you use newlines (\\n) to make the output readable.\n \nD. Using cat(), output the data from part B to a file named output.txt in your data folder (instead of the Console)\n\nUse the file argument in cat()– the file format is the same as the file format in read.csv()\n\n \nE. Challenge: Using cat(), append your name and three different Unicode characters to the text in the output.txt file created in part C.  Hint: look at the arguments in cat() – you need to change one of them.\n \n \nSave the script as app1-07.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#extension-cat-vs-print",
    "href": "lessons/1-07_Outputs.html#extension-cat-vs-print",
    "title": "1-07: Outputs",
    "section": "9 Extension: cat() vs print()",
    "text": "9 Extension: cat() vs print()\nThe two main functions used to output to the Console are cat() and print(). The big difference is that print() does a lot more formatting of the output than cat().  You would likely use print() when you want to display the results of a statistical test, which often has a complicated format.  cat() does very little formatting on its own – cat() lets the programmer control the output.  You would use this when you want to output text and some simple data – or, where you really want control of the output format.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#trap-misplacing-or-forgetting-quotes",
    "href": "lessons/1-07_Outputs.html#trap-misplacing-or-forgetting-quotes",
    "title": "1-07: Outputs",
    "section": "10 Trap: Misplacing (or forgetting) quotes",
    "text": "10 Trap: Misplacing (or forgetting) quotes\nIt is easy to accidentally forget a quote, add a quote, or simply move a quote to a place it does not belong. The following code has a missing quote on line 8 right after “The values are…\nrm(list=ls());  options(show.error.locations = TRUE);\n\ndistance = 100;\ntime = 50;\nvelocity = distance/time;\n\ncat(\"The values are..., \"\\nDistance: \", distance, \"\\ntime: \",\n    time, \"\\nvelocity: \", velocity);\nIf you execute the script above, you will get the following message in the Console:\n&gt; source(\"~/.active-rstudio-document\")\nError in source(\"~/.active-rstudio-document\") : \n  ~/.active-rstudio-document:«7:26: unexpected '\\\\'»\n6: \n7: cat(\"The values are..., \"\\\n                            ^\nThe error is unexpected ‘\\\\’ on line 7, character 26. R is telling you that is does not understand why the character on line 7, character 26 is a backslash ( \\ ). This might not be the most helpful message.\n \nHowever, RStudio has a built-in feature to help you find misplaced quotes – the color scheme.  The quoted text is in a different color than other parts of the code.  For example, in the XCode color scheme – text in quotes is colored red.\n \n\n\n\n\n\n\nFigure 15: Missing quote in cat()\n\n\n\nFigure 15 shows that, right after “The value are… , the variables are all treated as if they are in quotes and the messages are outside the quotes. Since one quote was missing, the error propagated and assumed characters to be variables/numbers and variables/numbers to be characters.\n \nWe will add the missing quote to line 8:\ncat(\"The values are...«\"», \"\\nDistance: \", distance, \"\\ntime: \",\n    time, \"\\nvelocity: \", velocity);\nNow the correct components of the output are in quotes and the script executes without an error:\n&gt; source(\"~/.active-rstudio-document\")\nThe values are... \nDistance:  100 \ntime:  50 \nvelocity:  2",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#extension-sending-console-info-directly-to-file",
    "href": "lessons/1-07_Outputs.html#extension-sending-console-info-directly-to-file",
    "title": "1-07: Outputs",
    "section": "11 Extension: Sending Console info directly to file",
    "text": "11 Extension: Sending Console info directly to file\nsink() is a commonly used command in R that redirects all Console output to a file. The following command will send all future Console output to the file output2.txt in the data folder.\nsink(file=\"data/output2.txt\") # send Console content to data\nBy “all future output”, RStudio will send the output from all script execution (no matter the script file) to the file until you undo the command like this:\nsink(file=NULL)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#purpose",
    "href": "lessons/1-05_Functions_Introduction.html#purpose",
    "title": "1-05: Functions Introduction",
    "section": "1 Purpose",
    "text": "1 Purpose\nExplain how functions works and how to use the Help tab in RStudio.  The presentation of functions in R is inconsistent but it is very useful to understand how to read a function help page.\n\n1.1 Files\nThe script for the lesson is here\n\nSave the linked script file to the scripts folder in your Class Project\nAll the code in this lesson is sequentially placed in the script\n\nThe data used in this lesson, twoWeekWeatherData.csv\n\nSave the linked data file to the data folder in your Class Project",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#functions",
    "href": "lessons/1-05_Functions_Introduction.html#functions",
    "title": "1-05: Functions Introduction",
    "section": "2 Functions",
    "text": "2 Functions\nIn the last lesson we used two functions in R:\n\nread.csv(): open up a CSV file and read in the data\nseq(): create a configurable sequence of numbers\n\n \nFunctions are standalone scripts designed to do some repeatable operations.  A function almost always takes inputs (i.e., arguments) and sends a response (i.e., return value).\n \nIn the case of read.csv() from last lesson:\n\n\n\n# path to data file (from project folder)\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                       sep=\",\",      # values separated by comma\n                       header=TRUE); # there is a header row\n\n\nFigure 1: Calling read.csv() to get data from twoWeekWeatherData.csv and save it to weatherData\n\n\n\nThe inputs (arguments) are the values for file, sep, and header.\nThe response (return value) is the data from the CSV file and gets saved to the variable weatherData.\n \nIn the case of seq():\nseq1 = seq(from=1, to=10, by=3);\nThe inputs (arguments) are the values for from, to, and by.\nThe response (return value) is the sequence of numbers that gets saved to the variable seq1.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#arguments",
    "href": "lessons/1-05_Functions_Introduction.html#arguments",
    "title": "1-05: Functions Introduction",
    "section": "3 Arguments",
    "text": "3 Arguments\nIn programming, the values you pass into a function(e.g., file, sep, and header) are called arguments of the function.  Arguments are added to the function call to tweak the operation of the function – arguments act like the knobs and dials for a function.\n \nThe majority of the programming world uses the term parameters instead of arguments.  I tend to like parameters better as I think it better indicates that these values are properties of the function.  But, R is a programming language for statisticians and arguments is a mathematical term, so R chose to go with arguments. Just note you will occasionally see the term parameters, and it means the same thing as arguments.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#a-simpler-function-median",
    "href": "lessons/1-05_Functions_Introduction.html#a-simpler-function-median",
    "title": "1-05: Functions Introduction",
    "section": "4 A simpler function: median()",
    "text": "4 A simpler function: median()\nLet’s take a step back and look at a simpler function, median(), which takes a vector and finds the median value in the vector.\n \nTo use median() we need a vector with numeric values in it, which we will call vec1:\nvec1 = c(3,4,5,6,21,45,61);\nAnd then we pass vec1 in as an argument to the median() function:\nmedianVal1 = median(vec1);\nTrap: Forgetting to pass in a vector to median\n \nAnd the Environment shows the return value, saved to medianVal1, is 6\nmedianVal1:   6\n\n4.1 Help for median()\nNow let’s use RStudio’s Help tab to go behind-the-scenes of median().  RStudio Help tab is a useful resource for finding out more information on functions. The information that appears in Help is from the latest R documentation. If you do an internet search, you will often get older documentation. Note: the Help window is using the website https://search.r-project.org/.\n \nIf we type median in the search bar we get this:\n\n\n\n\n\n\nFigure 2: The median function in the Help tab in RStudio\n\n\n\n \nThe Help page shows that median() has two arguments:\n\nx: the vector that you want to find the median for\nna.rm: a TRUE/FALSE value that determines how to handle NA values in the vector. NA means Not Available and usually indicating a problem with the data\n\n \nNote: the ( … ) can be ignored – it is R indicating that this function can be expanded with more arguments\n\n\n4.2 Skipping argument names\nWhen we called median(), we did not include any argument names:\nmedianVal1 = median(vec1);\nHowever, since x is the first argument in median(), it is assumed that the first value is meant to be for x.\n \nThis is an equivalent call to median() that more explicitly says that the vec1 is the value for x:\nmedianVal1b = median(x=vec1);\nAnd the return value will be the same:\nmedianVal1:   6\nmedianVal1b:  6\n\n\n4.3 Default argument values\nThe other argument in median(), na.rm, has a default value of FALSE . This means that you do not have to supply a value for the argument na.rm when you call the function.  You only need to supply a value if you want to change na.rm to something other than FALSE (e.g., TRUE).\n \nOur first example did not have an NA values, let’s create a vector with an NA value in it:\nvec2 = c(3,4,5,NA,6,21,45,61);\nAnd then use that as an argument for median():\nmedianVal2 = median(x=vec2);\nIf there is an NA value in a vector then, for most mathenatical functions in R, the return value will be of type NA. The median of a vector with NA values will always be NA_real_. NA_real_ says that median cannot be determined but would be a real number.\nmedianVal2:   NA_real_\n\n\n4.4 Dealing with the NA\nna.rm is the argument that determines whether NA values are removed from the vector – and the default value is FALSE, meaning NA values are not removed.\n \nLet’s set na.rm to TRUE so the NA values are removed before finding the median:\nmedianVal2b = median(x=vec2, na.rm=TRUE);\nNow the NA in the vector is ignored and we get the same median value as before:\nmedianVal2b:   6\n\n\n4.5 Alternate ways to call median()\nArgument names (e.g., x and na.rm) are not needed if you put values in the correct order. All of these calls functionally do the same thing as the above median() call:\nmedianVal2c = median(vec2, TRUE);\nmedianVal2d = median(vec2, na.rm=TRUE);\nmedianVal2e = median(na.rm=TRUE, x=vec2);  # can reverse arguments if you name them\nmedianVal2f = median(x=vec2, TRUE);\nMy general recommendation is to always use argument names when calling a function.  This makes your code easier to read and you don’t have to worry about the order of the arguments.  This is especially important when you are dealing with more complicated functions that have lots of arguments (e.g., plotting functions).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#help-seq",
    "href": "lessons/1-05_Functions_Introduction.html#help-seq",
    "title": "1-05: Functions Introduction",
    "section": "5 Help seq()",
    "text": "5 Help seq()\nUnfortunately, the Help for functions can contain many abstractions and extraneous information. Throughout this course, we will open up the Help menu for new functions to get you more familiar with the abstractions.\n \nLet’s look at the function seq():\n\n\n\n\n\n\nFigure 3: The Help page for the seq() function\n\n\n\n \nWhen you see Default S3 Method, that is most likely the version of the function you care about.  S3 means S version 3, S is a programming language developed in the 1970s and was the predecessor to R (yeah, that sounds a bit backward…). The other object types you might see are S4, RC (very rare), and R6.\n\n5.1 The arguments and defaults\nseq() has 5 arguments: from, to, by, length.out, and along.with.  We are going to ignore along.with, which complicates matters and is not needed, nor very useful.\n \nThe descriptions of the arguments in Figure 3 are helpful but the default argument values for seq() are misinformative:\n## Default S3 method\nseq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),\n    length.out = NULL, along.with = NULL, ...)\nseq() essentially is solving for this equation:\n\\[\nby=\\frac{\\text{ to }-\\text{ from }}{\\text{ length.out }-1}\n\\]\nThere are four variables in the equation and you have to give exactly three out of four of them as arguments.  seq() will rearrange the formula, calculate the unknown fourth variable, and create the sequence.\n\n\n5.2 seq() examples\nIf you set from, to, and by as we did for seq1, seq() will calculate length.out (the number of values in the sequence)\nseq1 = seq(from=1, to=10, by=3);   # will have 4 values\nand give you the sequence:\nseq1: num[1:5] 1 4 7 10\nlength.out allows you to set the number of values in the sequence.  You can also set length.out to a value, but then you can only use 2 of these 3 arguments: from, to, and by.\n \nAn example of using length.out:\nseq2 = seq(from=1, to=10, length.out=5);\nThen you get 5 evenly spaced number starting with 1 and ending with 10\nseq2:   num[1:5] 1 3.25 5.5 7.75 10",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#read.csv-expanded",
    "href": "lessons/1-05_Functions_Introduction.html#read.csv-expanded",
    "title": "1-05: Functions Introduction",
    "section": "6 read.csv() expanded",
    "text": "6 read.csv() expanded\nWhen you go to the Help page for read.csv() , you are taken to the Help page for read.table(). This is because read.csv() is a version of the function read.table().  In other words, read.csv() is read.table() with different default values for the arguments. The different argument values are underlined in Figure 4.\n \nFor instance, the default value for sep (the separator between data) is a space in read.table() and a comma in read.csv().  read.csv() uses all the arguments from read.table() (e.g., row.names, col.names), read.csv() just changes some of the values for default arguments (underlined below).\n\n\n\n\n\n\nFigure 4: Using the Help tab in RStudio to look up functions (and a remainder that arguments are sometimes called parameters)\n\n\n\n\n6.1 read.csv arguments\nWhen you call read.csv(), you can use any of the argument from read.table().\n \nAnd there are a lot of arguments in read.table(). The majority of these arguments rarely need to be changed from their default value.\n \nMost of the arguments in read.table() look cryptic and you will probably never have to use them. A couple that are easier to understand:\n\ndecimal: the character that represents a decimal in the decimal number.  You might need to change this to a comma ( , ) if you get data from Europe\ncomment.char: the character after which everything on the line is a comment (i.e., not data)\n\nnotice that read.csv() has no comment.char whereas read.table() uses ( # ) as the default comment.char\n\n\n\n\n6.2 Required arguments and default arguments\nfile is an argument that is not set equal to anything in read.table() / read.csv().  This is because file must be supplied by the user –file is the only required argument.  This should make sense as there is no point in calling read.table() / read.csv() without any data.\n \nMost other argument in read.table() / read.csv() has a default value (except row.names and col.names – there is a question about this in the application). This means you can execute the function without using any argument except file.\n \nIn fact, the following code will produce the same results as the earlier read.csv() call in Figure 1:\nweatherData2 = read.csv(file = \"data/twoWeekWeatherData.csv\");\nIf you look in the Environment tab the values for weatherData and weatherData2 are exactly the same.\n\n\n\n\n\n\nFigure 5: Expanding weatherData and weatherData2 in the Environment tab\n\n\n\n\n\n6.3 The other arguments (aside from file)\nIn my original call to read.csv(), the arguments sep=“,” and header=TRUE are functionally not changing anything because I have them set to the same value as their default.  But, these arguments are changed often enough that it is nice to have them quickly at hand when copying read.csv() from one script to another.\n \n weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\",\n                       sep=\",\",                 \n                       header=TRUE);",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#application",
    "href": "lessons/1-05_Functions_Introduction.html#application",
    "title": "1-05: Functions Introduction",
    "section": "7 Application",
    "text": "7 Application\n1. Create this sequence: 13, 9, 5, 1, -3, -7, -11 using seq().\n\nCome up with two more ways (three in all) to produce the same sequence using seq(), but changing the arguments (from, by, to, length.out). \n\n \n2. Explain, in comments, why you get an error if you try to use all four arguments (from, by, to, length.out)\n \n3. In comments answer: What are the default values for row.names, col.names, na.strings, and fill in read.csv()? For row.names and col.names you will need to look at the Arguments section of the Help for read.csv to find the answer.\n \n4. Find the log (base 5) of this vector: c(0.04, 0.2, 25, 125) using the log() function\n\nUse the Help tab to find out more about the log() function\nThe answer is: -2, -1, 2, 3 (so you can check)\nnote: the default value for base is exp(1) = e1 = e = 2.71828… (i.e., the natural logarithm)\n\n \n5. Properly read in this CSV file of the same two week weather data but:\n\ncommas are used in place of decimals in precipitation column\nspaces are used to separate variables (instead of commas)\n\nSave the data to a dataframe name WD_Comma\n \n6. In comments, answer: How many factors levels does the noonCondition column have?  How about the date column?\n \n \nSave the script as app1-05.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n7.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#trap-forgetting-to-pass-in-a-vector-to-median",
    "href": "lessons/1-05_Functions_Introduction.html#trap-forgetting-to-pass-in-a-vector-to-median",
    "title": "1-05: Functions Introduction",
    "section": "8 Trap: Forgetting to pass in a vector to median",
    "text": "8 Trap: Forgetting to pass in a vector to median\nIf you want to find the median of the vector: c(3,4,6,2,7,10), you have two choices:\n \nSave the vector to a variable and use the variable as an argument to median():\n&gt; vec6 = c(3,4,6,2,7,10) \n&gt; median(vec6) \n[1] 5\nUse the vector directly as an argument to median():\n&gt; median(c(3,4,6,2,7,10)) \n[1] 5\nBoth produce the correct answer, 3.5.\n \nA mistake people often make is to forget to put the numbers into a vector by using c(), they do this instead:\n&gt; median(3,4,6,2,7,10) \n[1] 3\nIs this case, you are calling median() with 6 separate arguments: 3, 4, 6, 2, 7, and 10. median() only takes 1 arguments so it ignores the last five number and takes the median of 3, which is 3.\n \nWhen you put the six numbers into c(), you are saying that these numbers are all grouped together into one vector, and median will take in the whole vector as the argument.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#purpose",
    "href": "lessons/1-03_Mathematical_Operations.html#purpose",
    "title": "1-03: Mathematical Operations",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nPerform mathematical operations, including powers, on numerical variables\nExplicit use of mathematical symbols in formulas\nConvert algebraic formulas to programming formulas\nUse parentheses to establish the order of operations for formulas",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#questions-about-the-material",
    "href": "lessons/1-03_Mathematical_Operations.html#questions-about-the-material",
    "title": "1-03: Mathematical Operations",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#putting-a-formula-in-code",
    "href": "lessons/1-03_Mathematical_Operations.html#putting-a-formula-in-code",
    "title": "1-03: Mathematical Operations",
    "section": "3 Putting a formula in code",
    "text": "3 Putting a formula in code\nOnce again, we will calculate velocity using distance and time, except, we will now use the full version of the velocity formula, which looks at the changes in distance and time as opposed to absolute distance and time.\n \nThe full velocity formula is (subscript i means initial, subscript f means final):\n\\(v=\\frac{d_{f}-d_{i}}{t_{f}-t_{i}}\\) .\n \nNote: If ti and di are zero then you get the formula we used in Lesson 1-2: (\\(\\boldsymbol{v}=\\frac{d}{t}\\))\n \nWe are going to code this formula, but there are a couple of issues:\n\nfractions are “stacked” – but in scripts, equations can only be read left to right\nvariable names have subscript characters (e.g., ti), but subscript and superscript characters are not allowed in script\n\n\n3.1 Minding your parentheses\nIn script, everything goes left-to-right so you cannot write a fraction as you would in Algebra.  Instead, we need to be more explicit and put both both the numerator and the denominator in parentheses:\n\\[\nv=\\frac{\\left(d_{f}-d_{i}\\right)}{\\left(t_{f}-t_{i}\\right)}\n\\]\nThen, pull out the fraction between the numerator and denominator and replace it with a division sign:\n\\[\nv=\\left(d_{f}-d_{i}\\right) /\\left(t_{f}-t_{i}\\right)\n\\]\nNow the formula is all on one line, but the symbols need to be replaced with valid variable names that do not have subscripts:\n\\[\n\\text { velocity }=(\\text { finalDist }- \\text { initDist }) /(\\text { finalTime }- \\text { initTime })\n\\]\nThis is now a valid line of code in R, assuming all four variables on the right side have assigned values.\nvelocity = (finalDist - initDist) / (finalTime - initTime);\nThe line of code above says that velocity will be assigned the value equal to the calculations of the four variables on the right side of the equation.\n\n\n3.2 Other ways to assign values\nIn most programming languages the equal sign is used to assign values, and the equal sign always evaluates what is on the right side and assigns it to the variable on the left.  In R, you can use arrows to assign values:\n«velocity &lt;-» (finalDist - initDist) / (finalTime - initTime); # commonly used\n(finalDist - initDist) / (finalTime - initTime) «-&gt; velocity»; # rarely used\nThe top ( &lt;- ) is the most commonly used in R and the bottom ( -&gt; ) works but is rarely used anymore.  I prefer using ( = ) to ( &lt;- ) because ( = ) is used in most programming languages whereas ( &lt;- ) is not. \n \nNote: In this case, ( = ) and ( &lt;- ) are functionally the same. There are differences between the two, which we will talk about in the lesson on functions.\n\n\n3.3 Variable naming error\nHere is the full script with a small error on the line calculating velocity:\nrm(list=ls());   # Clear out environment\noptions(show.error.locations = TRUE); # give line number of error*\n\nfinalDistance = 100;\ninitDistance = 50;\nfinaltime = 20;       # misspelled: use t instead of T\ninitTime = 15;\n# error will be on the line below:\n«velocity = (finalDistance - initDistance) / (finalTime - initTime)»\nEvery variable on the right side of the velocity equation must be given a value beforehand –  otherwise, you will get the pesky Object not found error as shown in the image below (Figure 1)\n \n\n\n\n\n\n\nFigure 1: Object not found because the variable name does not exist (it is misspelled).\n\n\n\n \nExtension: The show.error.location line\n \nNote: Object is almost synonymous with Variable in R.  The error is basically saying that there is no variable with that name.  Any spelling error will cause the Object not found error.  In this case I “spelled” the variable name wrong by changing the case of the T.  finaltime is not the same as finalTime.\n \nrm(list=ls());           # clean out the environment\noptions(show.error.locations = TRUE); # give line number of error*\n \nfinalDistance = 100;\ninitDistance = 50;\n«finalTime» = 20;\ninitTime = 15;\nvelocity = (finalDistance - initDistance) / (finalTime - initTime);\n\n\n\n\n\n\nFigure 2: Misspelled variable name corrected – script now calculates velocity.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#powers-and-multiplication",
    "href": "lessons/1-03_Mathematical_Operations.html#powers-and-multiplication",
    "title": "1-03: Mathematical Operations",
    "section": "4 Powers and multiplication",
    "text": "4 Powers and multiplication\nWe will look at one more formula that relates kinetic energy to mass and velocity:\n\\[\nE_{k}=\\frac{1}{2} m v^{2}\n\\]\nThere are two new issues with coding this formula:\n\nthe square function is a superscript – you cannot use superscript characters in R\nthe implicit multiplication – we know that mass (m) and velocity (v) are being multiplied, but there is no multiplication sign\n\n\n4.1 Dealing with parenthesis and multiplication\nSo let’s first pull the one-half out of fraction form and into division form:\n\\[\nE_{k}=1 / 2 m v^{2}\n\\]\nWe need to be more explicit because this formula could be misinterpreted by the reader as \\(E_{k}=1 /\\left(2 m v^{2}\\right)\\), so we need to put the one-half in parenthesis:\n\\[\nE_{k}=(1 / 2) m v^{2}\n\\]\nNext, we will explicitly put in the multiplication symbols – a necessity in programming:\n\\[\nE_{k}=(1 / 2)^{*} m^{*} v^{2}\n\\]\nTraps: Forgetting Multiplication Symbol\n \nAnd then change the symbols to script-friendly variable names:\n\\[\n\\text { kineticEnergy }=(1 / 2)^{*} \\text { mass }^{*} \\text { velocity }^{2}\n\\]\n\n\n4.2 Dealing with square power\nIn R the ( ^ ) is the power operator.  So ^2 means raise to the power of 2 (i.e., square):\n# this formula works...\nkineticEnergy = (1/2)*mass*velocity^2;\nWhile the above works correctly, it is often helpful to be explicit and add parenthesis around the value or values that are getting raised to the power:\n# more explicit solution\nkineticEnergy = (1/2)*mass*(velocity)^2;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#the-power-operator",
    "href": "lessons/1-03_Mathematical_Operations.html#the-power-operator",
    "title": "1-03: Mathematical Operations",
    "section": "5 The power operator ( ^ )",
    "text": "5 The power operator ( ^ )\nThe ( ^ ) operator works for all powers including square roots, cubed roots, and mixed powers (e.g., raising to the 3/2 or 5/3).\n \nLet’s rearrange the kinetic energy formula to solve for velocity, which requires a square root\n\\[\nv=\\sqrt{\\frac{2 E_{k}}{m}}\n\\]\nTo put the above formula into a script form, we need to:\n1) Put the numerator and denominator on one line by taking out the fraction and replacing it with a division sign.\n\\[\nv=\\sqrt{\\left(2 E_{k} / m\\right)}\n\\]\n2) Be explicit and put in multiplication symbols.\n\\[\nv=\\sqrt{\\left(2^{*} E_{k} / m\\right)}\n\\]\n3) Spell the formula out using script-friendly variable names:\n\\[\n\\text { velocity }=\\sqrt{\\left(2^{*} \\text { kineticEnergy / mass }\\right)}\n\\]\n4) Use the power operator ( ^ ) to square root the whole formula.  Square rooting something is the same as saying raise it to the 1/2 power. Since we are square rooting the whole formula, we need to put the whole formula in parenthesis.\n\\[\n\\text { velocity }=\\left(2^{*} \\text { kineticEnergy } / \\text { mass }\\right)^{1 / 2}\n\\]\n\n5.1 Coding the power\nSo we have this in R:\nrm(list=ls());          # clean out the environment\n\nkineticEnergy = 50;\nmass = 5;\nvelocity = (2*kineticEnergy / mass)^1/2; # still a problem here!\n\n\n\n\n\n\nFigure 3: Incorrect answer for velocity because the power is missing parentheses\n\n\n\n\n\n5.2 Correcting the power with parenthses\nThe Environment tab (Figure 3) shows that v is, unexpectedly, 10.  This is because of the order-of-operations. Instead of raising the (2*kineticEnergy/mass) to the 1/2 power, the above code raised (2*kineticEnergy/mass) to the first (1) power and then divided everything by 2.  We need to be more explicit and put the 1/2 in parenthesis.\nrm(list=ls());          # clean out the environment\n\nkineticEnergy = 50;\nmass = 5;\nvelocity = (2*kineticEnergy / mass)^«(1/2)»; # now we are good!\n\n\n\n\n\n\nFigure 4: Correct answer for velocity\n\n\n\n\n\n5.3 More power and roots\nThis style will work for all powers and roots:\nrm(list=ls());          # clean out the environment\n\nkineticEnergy = 50;\nmass = 5;\n\ntest1 = (2*kineticEnergy / mass)«^(1/3)»;  # third root\ntest2 = (2*kineticEnergy / mass)«^(5)»;    # fifth power\ntest3 = (2*kineticEnergy / mass)«^(5/3)»;  # mixed root and power\ntest4 = (2*kineticEnergy / mass)«^(3.17)»; # decimal power\n\n\n\n\n\n\nFigure 5: Testing different powers in R",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#the-square-root-function",
    "href": "lessons/1-03_Mathematical_Operations.html#the-square-root-function",
    "title": "1-03: Mathematical Operations",
    "section": "6 The square root function",
    "text": "6 The square root function\nIn R, you will usually see square roots done using the sqrt() function:\nvelocity = «sqrt»(2*kineticEnergy / mass);  # how square roots are usually done\nsqrt() works just fine but there is no equivalent for all the other types of powers and roots.  That is why I prefer to use the ( ^ ) operator – it is easy to remember and you can use it for every power and root situation – you just need to attach the appropriate number.\nvelocity = (2*kineticEnergy / mass)^(1/2); # how I prefer to do them",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#random-values",
    "href": "lessons/1-03_Mathematical_Operations.html#random-values",
    "title": "1-03: Mathematical Operations",
    "section": "7 Random values",
    "text": "7 Random values\nIn Figure 5 we hardcoded the values for kineticEnergy and mass, which just means we directly provided a values for the two variables.  We can also randomly pick values for variables using sample().\n \nsample() requires two arguments:\n\nthe range of numbers you want to randomly sample from\nthe number of values you want to randomly sample (for now we will just do one)\n\n \nThe code to pick one random number between 20 and 100 is:\nrandomNum1 = sample(20:100, size=1);\nnote: 20:100 is inclusive of the numbers on both ends – so, 20 and 100 are both possibilities meaning there are 81 possible numbers to choose randomly from\n \nThe code to pick a random number between -100 and -50 is:\nrandomNum2 = sample(-100:-50, size=1);\nsample() always returns a whole number. \n\n7.1 normal values\nsample() treats every number the same.  If there are 100 numbers in the range then every number has a 1% chance of being picked.  If you want to pick a random value, but weigh the value (e.g., a normally distributed random values) then you can use rnorm().\n \nrnorm() requires three arguments:\n\nthe number of values you want to randomly pick (for now, we will just pick 1 at a time)\nthe mean of the normal distribution you want to pick randomly from\nthe standard deviation of the normal distribution\n\n \nThe code to pick one random number from a normal distribution with mean 10 and standard deviation 3 is:\nrandomNorm1 = rnorm(n=1, mean=10, sd=3);\nThe code to pick one random number from a normal distribution with mean -7.5 and standard deviation 0.5 is:\nrandomNorm2 = rnorm(n=1, mean=-7.5, sd=0.5);\nrnorm() always returns a decimal number\n\n\n\n\n\n\nFigure 6: Picking random numbers – the random numbers will be different each time you execute the code",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#application",
    "href": "lessons/1-03_Mathematical_Operations.html#application",
    "title": "1-03: Mathematical Operations",
    "section": "8 Application",
    "text": "8 Application\n1) Add this code right after the rm(list=ls()) lines:\nset.seed(5); \nThe above line will make sure that you get the same “random” number every time you execute your script by creating a seed value.  Seed values are covered in a much later lesson.\n \n2) Create six variables that all hold length values:\n\n1st and 2nd are assigned the values: 25, 30\n3rd and 4th are randomly picked between 20 and 30 (each number has an equal chance)\n5th and 6th are randomly picked from a normal distribution with mean of 25 and standard deviation of 2\n\n \n3) Calculate the (a) mean, (b) variance, and (c) standard deviation of the six values.\n\nVisit this page if you need a reminder about how to calculate mean, variance, and standard deviation\nyou can use R functions like mean(), var(), and sd() to check these values, but I want you to manually solve these – it is important to learn how to properly code the mathematics because you will often not have functions to do it for you.\nExtension: Mathematical operations across multiple lines\n\n \n4) Make sure the 6 values, their mean, their variance, and their standard deviation appear in the Environment tab after the script is executed.\n \n5) Challenge: Pick a random two-digit decimal number between 0 and 1 (e.g., 0.23, 0.89, 0.10)\n\nyou will need to use sample() and then manipulate the number\n\n \n \nSave the script as app1-03.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#extension-mathematical-operations-across-multiple-lines",
    "href": "lessons/1-03_Mathematical_Operations.html#extension-mathematical-operations-across-multiple-lines",
    "title": "1-03: Mathematical Operations",
    "section": "9 Extension: Mathematical operations across multiple lines",
    "text": "9 Extension: Mathematical operations across multiple lines\nIf you have a long mathematical formula to execute in code, there is a good chance that you will want to break the code up into multiple lines.\n \nTo keep it simple, let’s add 5 values together across multiple lines:\nc = 10 + 10 + 10 +\n    10 + 10;\nIf you put the above code in you script, then you will get c = 50 in the Environment.\n \nHowever, this code:\nd = 10 + 10 + 10\n    + 10 + 10;\nwill put d=30 in the Environment.\n \nThis is because R did not know the continue the equation for d to the second line.  R treated the first line as the complete command/equation.  By putting the ( + ) at the end of the first line for c, R knew it needed to continue the command to the next line.\n \nBy the way, R does do something with the second line for d – it prints the answer to Console if you click Run:\n&gt; d = 10 + 10 + 10\n&gt;     + 10 + 10;\n[1] 20\nIn other words:\n+ 10 + 10\nis a command that evaluates to 20",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#traps-forgetting-multiplication-symbol",
    "href": "lessons/1-03_Mathematical_Operations.html#traps-forgetting-multiplication-symbol",
    "title": "1-03: Mathematical Operations",
    "section": "10 Traps: Forgetting Multiplication Symbol",
    "text": "10 Traps: Forgetting Multiplication Symbol\nLet’s say you are solving for kinetic energy:\n\\[\nE_{k}=\\frac{1}{2} m v^{2}\n\\]\nAnd you have a value for velocity (v) and mass (m)\nrm(list=ls());          # clean out the environment\n\nm = 100;\nv = 10;\n«KE = ????;    # should be: KE = (1/2)*m*v^2;»\nIf you code KE like this::\nKE = 1/2*mv^2;\nThen you will get the error: object ‘mv’ not found in the Console tab because R does not realize you want to multiply the variables m and v, it thinks you are trying to use a variable named mv, and the variable mv does not exist.\n \nIf you code KE like this::\nKE = (1/2)m*v^2;  # same error arises if you do 1/2m*v^2\nyou will get the error: unexpected symbol (Figure 7) and the Console tab will point to the m\n\n\n\n\n\n\nFigure 7: Unexpected symbol error\n\n\n\n \nIn this case, R is expecting an operation (symbol) after (1/2).  m is a variable, not a operation, hence the error.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#trap-units-or-lack-thereof-in-programming",
    "href": "lessons/1-03_Mathematical_Operations.html#trap-units-or-lack-thereof-in-programming",
    "title": "1-03: Mathematical Operations",
    "section": "11 Trap: Units, or lack thereof, in programming",
    "text": "11 Trap: Units, or lack thereof, in programming\nOne problem that crops up quite often in programming is that none of the numbers used in calculations have units.  So we often have lines of code without any mention of units like this:\n# find an average of the following three weights\nweight1 = 175;\nweight2 = 200;\nweight3 = 210;\n\naveWeight = (weight1 + weight2 + weight3) / 3;\nAnd if we add units to the number…\n# find an average of the following three weights\n«weight1 = 175lb;  # causes \"unexpected symbol\" error»\nweight2 = 200lb;\nweight3 = 210lb;\n\naveWeight = (weight1 + weight2 + weight3) / 3;\nWe get the error unexpected symbol because R is expecting some sort of operation after the number 175 and lb is not a valid operation. \n \nNote: Lines 3 and 4 would also cause an unexpected symbol error but R ceases executing at the first error.\n \nIt is best to mention the units somewhere in the comments especially if your script is large or others are using your script.\n# find an average of the following three weights («all in pounds»)\nweight1 = 175;\nweight2 = 200;\nweight3 = 210;\n\naveWeight = (weight1 + weight2 + weight3) / 3;\nOtherwise, you risk a situation like the Mars Climate Orbiter crash, which could have easily been avoided with proper comments.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#extension-the-show.error.location-line",
    "href": "lessons/1-03_Mathematical_Operations.html#extension-the-show.error.location-line",
    "title": "1-03: Mathematical Operations",
    "section": "12 Extension: The show.error.location line",
    "text": "12 Extension: The show.error.location line\nThe second line of code in Figure 1 tells R to provide a line number where an error occurs:\noptions(show.error.locations = TRUE);\nIn Figure 1, in the Console tab the error includes the line number, 9, because of the line above. This seems like a great idea except that this line only works in a few limited situations. As you get into more complex code, this line will not work and R will not show you the line number for the error.\n \nUnfortunately, R is one of the harder programming languages to debug. We will get to some debugging strategies in later lessons. For now, you can include the show.error.location line in your code. It does not hurt – it just has limited utility.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#purpose",
    "href": "lessons/1-01-RStudioProjectsSetup.html#purpose",
    "title": "1-01: RStudio Projects Setup",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nInstall and test the software you will need for this class\nProvide a basic overview of how RStudio works and its relationship to R\nExecute, using the Source button, an R script\nShow how commenting works and the importance of commenting\n\n\n1.1 Special note about images in the lessons for this class\nRStudio is a rapidly evolving program, and it would be too much work to maintain all the images so that they reflect the newest version of RStudio and its visual likeness.  Some of the images in this class reflect older versions of RStudio and there are minor changes that I have made to the code that I did not believe warrants putting in new images. I have tried to make sure these differences change nothing functionally.  Inevitably, something will fall through the cracks – so please, contact the instructor if there is a problem!",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#questions-about-the-material",
    "href": "lessons/1-01-RStudioProjectsSetup.html#questions-about-the-material",
    "title": "1-01: RStudio Projects Setup",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "href": "lessons/1-01-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "title": "1-01: RStudio Projects Setup",
    "section": "3 Viewing file extensions and hidden files",
    "text": "3 Viewing file extensions and hidden files\nBy default, Windows and Mac hides file extensions from you (e.g., your Word document file is listed in the file manager as stuff instead of stuff.docx).  This is not convenient when you are programming as you are working with many file types (e.g., *.txt, *.r, *.csv) and, many times, the only difference between the name of two files is the extension.  For instance, you might have two files called weather.r and weather.csv in your folder – without file extensions they are both listed as weather.\n \nAlso, when you are programming, there are files you will need to access that are hidden by default by the operating system.\n \nThis section is technically optional, but I would highly recommend you learn how to view all file extensions – it will greatly assist you when programming.\n\n3.1 Viewing in newer versions of Windows 11\nThis is easy to to do in newer versions of Windows 11:\n\nOpen the File Explorer\nClick View -&gt; Show\nCheck File name extensions and Hidden items\n\n{#fig-win11 .fs”}\n\n\n3.2 Viewing in Windows 10 and older Windows 11 versions\nThis feature is a bit buried in these Window versions.\n \n\nOpen any File Explorer window (i.e., your folder viewer)\nIn menu bar\n\nWindows 10: click View -&gt; Options -&gt; Change folder and search options\nWindows 11: click 3 dots ( · · · ) -&gt; Options\n\nIn Folder Options window (Figure 1), go to the View tab\nUncheck Hide extensions for known file types\nCheck Show hidden files, folder, and drives\n\nNote: There is also a way to see hidden files in RStudio, which we will show later in this lesson\n\nClick OK\n\n\n\n\n\n\n\nFigure 1: Viewing in older versions of Windows\n\n\n\n\n\n3.3 Viewing in Mac\nFile Extensions:\n\nOpen Finder\nClick on Finder -&gt; Preferences…\nIn Finder Preferences window click on the Advanced tab\nCheck Show all filename extensions\n\n \nHidden files:\n\nYou can temporarily see hidden files in the Finder by pressing Command-Shift-Dot ( . ). \nYou can use the Terminal to permanently show hidden files as described on this webpage but this is not recommended unless you are comfortable with Terminal commands.\n\n\n\n\n\n\n\nFigure 2: Change settings to view all file extensions on a Mac",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "href": "lessons/1-01-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "title": "1-01: RStudio Projects Setup",
    "section": "4 Install R and RStudio on your computer",
    "text": "4 Install R and RStudio on your computer\nWe are going to install R and RStudio on your computer. R is a programming language and RStudio provides a structured environment for the R programming language, similar to the way Microsoft Word provides a structured environment for document editing. RStudio is patterned on other popular programming environments like Microsoft’s Visual Studio.\n \nOn Windows the default installation can be used for R and RStudio. For Mac, installation is a bit trickier – details below.\n \nNote: Even if you already have the software installed, it is a good idea to verify you have a recent version.\n\n4.1 Install or update R (need version 4.3 or higher)\nThe R for Windows download is here. Click on Download R 4.#.# for Windows.\n \nThe R for Mac download is here.  \n\nThere are two versions of R for Mac \n\nR-4.#.#-arm64.pkg: for Macs with Apple-based processors (M1, M2, M3…), all Macs from 2021 on use Apple-based processors\nR-4.#.#.pkg: for older Macs with Intel-based processors\n\nThe installer will tell you If you pick the wrong pkg file – there is no harm except a bit of wasted time.\n\n \nAnd for those of you using Linux – the R for Linux download instructions are here.\n\n\n4.2 Install or update RStudio (need version 2023.12 or higher)\nYou can download the RStudio Installer here. Download the appropriate file for your computer under Installers, open the file, and use the default installation options.\n\n4.2.1 Special instructions for Mac users\nFor Mac users there are some extra complexities:\n\nYou might be asked to install Command Line Developer Tools while installing RStudio. Go ahead and install the developer tools.\n \nThe download for RStudio is called RStudio-202X.XX.dmg.  Double-clicking the file will open the window below (Figure 3).  In the window, drag the RStudio file to the Applications folder\n\n\n\n\n\n\n\nFigure 3: Opening RStudio DMG file\n\n\n\nIf you already have RStudio installed, you will be asked if you want to replace the old version – go ahead and Replace it.\n \n\nAfter installation, unmount the RStudio device in the Finder by clicking the eject button (Figure 4)\n\n\n\n\n\n\n\nFigure 4: Unmounting the RStudio device (very important!)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#installing-the-ggplot2-package",
    "href": "lessons/1-01-RStudioProjectsSetup.html#installing-the-ggplot2-package",
    "title": "1-01: RStudio Projects Setup",
    "section": "5 Installing the GGPlot2 package",
    "text": "5 Installing the GGPlot2 package\nThe package, GGPlot2, does not come with R or RStudio – so we are going to install the GGPlot2 package in RStudio.\n \nTo install the package GGPlot2 using RStudio (Figure 5):\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type GGPlot2 in the Packages textbox\nClick Install\n\n \nGGPlot2 requires many other packages (its dependencies) – and RStudio will install those packages along with GGPlot2.  Be patient, as this could take a little time.\n\n\n\n\n\n\nFigure 5: Installing the GGPlot2 Package in RStudio\n\n\n\n \nExtension: Different ways to install packages",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "href": "lessons/1-01-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "title": "1-01: RStudio Projects Setup",
    "section": "6 RStudio Projects and Project Folders",
    "text": "6 RStudio Projects and Project Folders\nMost of the work you will do in R involves multiple scripts, data files, and perhaps other types of files.  All these files together make up your project and they exist within a Project Folder, which is the folder on your computer than contains all the files and subfolders for your project – and it is very important that you keep all files associated with a project within a Project Folder.\n \nIn this class we will be using RStudio to create, edit, and execute R scripts.  In RStudio, there is a feature called RStudio Projects, which is a Project Folder, that makes it much easier to move, share, and host your project on GitHub.  You need to keep all of your class work in an RStudio Project.\n\n6.1 Create a new RStudio Project\nTo create a new RStudio Project, which is also your project folder:\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click New Directory\nIn the Project Type window click New Project\n\n\n\n\n\n\n\nFigure 6: Creating a new RStudio Project\n\n\n\n \nIn the Create New Project window:\n\nThe Directory name is the name of the Project Folder that will contain your whole RStudio Project\nThe Project Folder will be created in the folder listed in the second textbox (Create project as subdirectory of:)\n\n \nIn Figure 7, the Project Folder named My_Project will contain the RStudio Project and is in the Desktop folder.  Note: you can name the folder whatever you want and put it in any folder location.\n\n\n\n\n\n\nFigure 7: Creating a directory for the RStudio Project\n\n\n\n \nExtension: RStudio Project in an existing directory\n\n\n6.2 RStudio Project Files Tab\nThe Files tab (bottom-right corner) in RStudio is a File Manager, and it allows you to do many things that you can do in your operating systems File Manager (called File Explorer in Windows and Finder in Mac). The Files tab can be used to open, add, remove, or rename files and folders. When we first create the RStudio Project, the Files tab will be set to the Project Folder (Figure 8, C:/Users/Charlie/Desktop/My_Project) and there is one file in the folder: My_Project.Rproj.\n \nWhenever you create an RStudio Project, an .Rproj file is added to the Project Folder. This main purpose of this file is to designate this folder as the working directory for your project.  Double-clicking on the .Rproj file will open your Project in RStudio (just like double-clicking a .docx file opens the file in Word).\n\n\n\n\n\n\nFigure 8: Files tab opened to the Project Folder\n\n\n\n\n\n6.3 Viewing hidden files in RStudio\nBy default, the Files tab shows file extension but it does not show hidden files.  If you click on More -&gt; Show Hidden Files, you will see the hidden folder .Rproj.user – this is not a folder you will use in this class.\n \n\n\n\n\n\n\nFigure 9: Showing hidden files\n\n\n\nExtension: *.RProj and .Rhistory\n\n\n6.4 Add Subfolders\nWe will use the Files tab in RStudio (bottom-right tab) to create two subfolders: scripts and data.\n \nTo add two folders named scripts and data:\n\nClick on New Folder in the Files tab\nEnter scripts in the textbox and click OK\nRepeat the last two steps to add a folder called data\n\n\n\n\n\n\n\nFigure 10: Adding folders using the Files tab in RStudio\n\n\n\n\n\n6.5 Add files to the project\nWe are going to download two files and add them to your new RStudio Project.\n\nlesson01-Setup.r: put this file in your scripts directory\nlesson01-Setup.csv: put this file in your data directory\n\n\n\n6.6 Opening File Manager from Files tab\nThe Files tab can do a lot of things that File Explorer/Finder can do – but not everything.  For instance, you cannot drag and drop files in the Files tab like you can in File Explorer/Finder.\n \nYou can open up a File Explorer/Finder window to the same folder by clicking More… -&gt; Show Folder in New Window.\n\n\n\n\n\n\nFigure 11: The Files tab in RStudio and the File Manager\n\n\n\n\n\n6.7 RStudio Project File Manager\nYou should now be running RStudio, opened to the RStudio Project that you just created.  If you click on the Files tab in the lower-right corner, you will see all the folders and files within your RStudio Project (linked to your Project Folder). You will also see your project name in the upper-right corner (in this case, My_Project).\n\n\n\n\n\n\nFigure 12: RStudio opened with an RStudio Project (named My_Project)\n\n\n\nThe *.RProj files is here and you might also see a file named .RHistory. These are not files you will need to use right away but you can learn more about them at Extension: *.RProj and .Rhistory.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#rstudio-basics",
    "href": "lessons/1-01-RStudioProjectsSetup.html#rstudio-basics",
    "title": "1-01: RStudio Projects Setup",
    "section": "7 RStudio Basics",
    "text": "7 RStudio Basics\nNow we are going to execute the script file, lesson01-Setup.R, that we just downloaded to your RStudio Project’s script folder.\n \nlesson01-Setup.R takes weather data from the other downloaded file, lesson01-Setup.csv and creates boxplots showing how Wind Direction and Wind Speed relate to the Change In Temperature.\n \nThe code in lesson01-Setup.R is something you will learn throughout the course – for now we are executing the script to test your setup and help you become familiar with the RStudio environment.\n\n7.1 Open your RStudio Project\nThere are multiple ways to open an RStudio Project – three of them are:\n\nOpen your Project Folder in File Explorer (Windows) or Finder (Mac) window and double-click the *.Rproj file (where * is the name of your Project)\nIn RStudio, click File -&gt; Open Project… -&gt; navigate to the Project Folder and click the *.Rproj file\nIn RStudio, click File -&gt; Recent Projects -&gt; choose the RStudio Project you just created\n\n\n\n7.2 Open a script file in your Project\nTo open the script file either:\n\nIn Files tab, go to the scripts folder and click on lesson01-Setup.R or\nIn RStudio click File -&gt; Open File -&gt; and then find  lesson01-Setup.R in the scripts folder and click Open.\n\n \nAfter opening the script file, you should see something that looks like this (Figure 13) on your screen:\n\n\n\n\n\n\nFigure 13: Opening your first script in RStudio\n\n\n\nThe script will only execute if it is opened inside your RStudio Project.\n\n\n7.3 Setting up RStudio tabs for scripts\nWhen we are editing and executing an R script, we generally have the following RStudio tabs open (Figure 14):\n\nFile Viewer – text viewer and editor for the opened script files (upper-left corner)\nConsole – displays information about the execution of your script file (lower-left corner)\nEnvironment – displays data points, or variables, from the execution of your script file (upper-right corner)\nPlots – plots produced by the execution of your script file are displayed here (lower-right corner)\n\n \nThe fourth (lower-right corner) tab is on Files, so we switched the tab to Plots:\n\n\n\n\n\n\nFigure 14: The Tabs most commonly used in RStudio\n\n\n\n \nNote: the Help tab in the lower-right corner is something you might find useful. Extension: The Help Tab\n\n\n7.4 Common buttons used in RStudio\nThe script file, lesson01-Setup.r, is a fully functioning script that takes temperature and wind data from the Comma Separated Value (CSV) file, lesson01-Setup.csv, and plots out the data – the code will be explained later. I am going to use this program to demonstrate a few of the useful buttons in RStudio.\n \nThe one button you will use most in R is Source, which executes your whole script.  Press the Source button to execute the script (Figure 15).\n \nNote: If you have already used R, there is a good chance you highlight lines of code and click Run to execute just those lines.  We are not using this method in this class.  For this class, you should always use Source to execute your code.  For more information go to Extension: Run vs. Source\n\n\n\n\n\n\nFigure 15: Running (Sourcing) the script\n\n\n\nAfter the script is run:\n\nThe Environment tab displays values for the data (variables) in the script (e.g., weatherData, windLabels).\nThe Console tab displays information about the execution of the script.\nThe Plot tab displays the box plots.  If there are multiple plots, you can use the arrow buttons to switch between the plots.\n\n\n\n7.5 Cleaning up the RStudio windows\nThere many times where you want to clean up the windows, which can get very crowded with information from old script executions.\n\nTo clean the Environment, Plot, and Console tabs use the brush button (Figure 15).\n\n\n\n\n\n\n\nFigure 16: Cleaning out the windows\n\n\n\n \nIf you click Source again, the Environment, Plot, and Console tabs will once again be populated with data from the script.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#application",
    "href": "lessons/1-01-RStudioProjectsSetup.html#application",
    "title": "1-01: RStudio Projects Setup",
    "section": "8 Application",
    "text": "8 Application\n\nIn your RStudio Project, create a new script file (File -&gt; New File -&gt; R Script)\nCopy and paste this lesson’s script, lesson01-Setup1.r, to the new script.\nChange the colors in the boxplot (edit lines 17-21)\n\nHere is a comprehensive list of color names you can use in R\n\nSave the script as app01.r, and to your script folder\n\n \nSave the script as app1-01.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n8.2 Zip your Project Folder\nIn your File Manager (not in RStudio), right-click on the Project Folder and in:\n\nWindows 10:\n\nClick Send to\nClick Compressed (zipped) folder\n\nWindows 11:\n\nClick Compress to Zip file\n\nMac:\n\nClick Compress “&lt;Project Folder&gt;”\n\n\nFor all operating systems, a zipped file named &lt;Project Folder&gt;.zip with all the Project Folders’ contents is created in the same folder. You can email the zip file.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-color-schemes",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-color-schemes",
    "title": "1-01: RStudio Projects Setup",
    "section": "9 Extension: Color Schemes",
    "text": "9 Extension: Color Schemes\nI am not a big fan of the default color scheme in RStudio.  It does not create enough differentiation between the different components of a script.  For instance, comments (red arrows) are in green and quoted items (blue arrows) are in just a slightly different green (Figure 17).\n\n\n\n\n\n\nFigure 17: The text color for comments and quotes\n\n\n\n\n9.1 Changing the color scheme\nA good color scheme can really help a programmer by allowing them to quickly identify parts of a script and common errors, like misplaced quotes.\n \nRStudio offers many color schemes – you can change the color scheme by:\n\nclicking on Tools in the main menu (circled in Figure 18)\nchoose Global Options\nWhen the Global Options window open (in Figure 18), click on Appearance\n\n\n\n\n\n\n\nFigure 18: Color schemes for RStudio (note: the Editor font might be different in your window – that is OK)\n\n\n\n \nThe image above shows the Xcode color scheme ( Figure 18).  I prefer Xcode because it does a good job differentiating the different aspects of the script. Notice how the comments (in green) are now clearly distinguished from the quotes (in red).\n \nYou can choose from around 20 themes in the Editor theme window and you can change the theme anytime without affecting anything else.\n\n\n9.2 Adding more color to differentiate output\nThere are a couple more helpful options in RStudio that use color to distinguish components of your code and the output in the Console tab.\n \nTo make these changes go to\nTools -&gt; Global Options… -&gt; Code -&gt; Display and check:\n\nHighlight R function calls\n\n \nTools -&gt; Console and check:\n\nShow syntax highlighting in console input\n\n\n\n\n\n\n\nFigure 19: Console Window changes",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "title": "1-01: RStudio Projects Setup",
    "section": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes",
    "text": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes\nA common complaint I have gotten from my students is they hate the way RStudio tries to be “helpful” by automatically adding matching parenthesis or quotes when the user types in a parenthesis or start quote.\n \nYou can turn off this feature by:\n\ngoing to Tools -&gt; Global Options… -&gt; Code  -&gt; Editing\nuncheck Insert matching parens/quotes\nset Surround selection on text insertion to Never\n\n\n\n\n\n\n\nFigure 20: Stop RStudio from automatically ending your parenthesis and quotes.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "title": "1-01: RStudio Projects Setup",
    "section": "11 Extension: RStudio Project in an existing directory",
    "text": "11 Extension: RStudio Project in an existing directory\nIf you have a GitHub repository with files in it already and want to set it as a Project Folder on your computer…\n \nTo create a new RStudio Project inside a directory that already exists (has scripts and data)\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click Existing Directory\nBrowse to the folder you want to be the Project working directory and click Create Project\n\n \nRStudio will add a *.RProj file to the folder – this is what makes the folder an RStudio Project.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "title": "1-01: RStudio Projects Setup",
    "section": "12 Extension: Working directories in R and RStudio (why RStudio Projects)",
    "text": "12 Extension: Working directories in R and RStudio (why RStudio Projects)\nThis topic is, in this author’s opinion, the most frustrating topic in R.  This is a topic that can generally be hidden from new programming students but the unique way R handles working directories makes it complex to share projects.\n \nA working directory is the folder location used when one file is looking for another file.  It is best shown by its use-case: a script file that is reading in information from another file – this file can be a data file or another script file.\n \nFor example, let’s say we have a script file called weather.r and it is pulling in data from the file weather2020.csv.  weather.r needs to first find the folder location for weather2020.csv before it can access the file.  To do this, weather.r needs a path to weather2020.csv.  This path can be thought of as map directions between two points – and the working directory is the starting point.\n \nFor the vast majority of programming languages, there is no concept of a working directory.  The process of files calling other files works like google maps – a route is specified between the two files starting with the folder the caller (e.g., weather.r) is in and ending where the callee (e.g., weather.csv) is. The path between the two files is called a relative file path. \n\n12.1 R’s default handling of working directories (it is not good…)\nIn R, the starting point, or working directory, is fixed for all R files opened in a session (called a session variable).  Using the google maps analogy, this is like saying the map starting point is fixed for everyone – it does not matter where you actually are located.  You can change the working directory in your script using setwd() but this changes the working directories for all R files in the session.  In other words, you are simply changing the starting point to a new location and all files will now use that location.\n\n\n12.2 Absolute file paths (a bad fix to the problem)\nOne way to get around working directories is to use an absolute file path.  So, instead of mapping between weather.R and weather.csv, you just give the file path for weather.csv on your computer (called the absolute file path).\n \nThis will look something like: c:\\Users\\RStudent\\Documents\\WeatherProj\\Data\\weather.csv\n \nDoing this means you do not have to worry about working directories.  But this solution breaks as soon as you move files on your computer or move them to another computer.  The reason is that the file path changes.  Absolute file paths make it almost impossible to share file and should not be used.\n\n\n12.3 How RStudio Projects handle working directory (the least-worst option)\nAn RStudio Project sets the working directory to the Project Folder.  So, for weather.r to find weather.csv inside an RStudio Project, it just needs to know where weather.csv is located relative to the project folder.  Most likely this will be something like: Data\\weather.csv. This makes it far easier to share your project because the path to weather.csv will be the same on any computer.\nWhile I believe this is by far the best method for handling working directory issues, it comes with a major caveat:You need to open script files from within the RStudio Project.  Opening the project sets the working directory for all script files used in the session.  If you a file outside of the Project session, then the working directory is not set by the project.\n\n\n12.4 The default working directory\nA working directory is not defined for a file, it is defined for a session.  So, all files within that session will have the same working directory.  IF you change the working directory in one file, you change it for every file within the session.  This leads to awkward behavior where one R file can change the behavior of another R file within the same session by using setwd().",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "title": "1-01: RStudio Projects Setup",
    "section": "13 Extension: Different ways to install packages",
    "text": "13 Extension: Different ways to install packages\nHere are three different ways in RStudio to install packages used in your script\n\n13.1 Use the RStudio menu\nTo install packages using the RStudio menu:\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type the package name in the Packages textbox (RStudio will give suggestions based on what you have typed)\n\nnote: you can type in multiple packages using spaces to separate them\n\nClick Install\n\n\n\n13.2 Use the Console tab\nIn R, we can install packages using install.packages().  So, if you wanted to install GGPlot2, you would type:\ninstall.packages(\"GGPlot2\")\nNote: you can install multiple packages at once if you put the names in a vector:\ninstall.packages(c(\"GGPlot2\", \"gridExtra\", \"tidyverse\")\nThe Console tab in RStudio is an R interface, and you could type in the above line to install the GGPlot2 package.\n\n\n\n\n\n\nFigure 21: Using the RStudio Console to install a package\n\n\n\n\n\n13.3 Have RStudio install the packages\nRStudio looks through your script and will prompt you to install packages used in your script that you do not have installed. With a click, RStudio installs all needed packages and dependencies.\n\n\n\n\n\n\nFigure 22: RStudio looking for packages needed by the script– click Install and RStudio installs the required package(s)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-the-help-tab",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-the-help-tab",
    "title": "1-01: RStudio Projects Setup",
    "section": "14 Extension: The Help tab",
    "text": "14 Extension: The Help tab\nThe Help tab is essentially an intelligent online search through the R documentation.  So, if you type plot in the search bar and hit enter, the R plot help page from the online documentation will appear.  Note: you could have done the same thing by typing ?plot in the Console tab.\n\n\n\n\n\n\nFigure 23: The R plot help page in the online documentation.\n\n\n\n \nThe page that appears in the Help tab (Figure 23) is this page: https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/plot.html\n \nhttps://stat.ethz.ch is where the official documentation for R is located.  So, you will see this website appear quite often when you do an internet search for something R related.\n \nIn a future lesson we will use the Help tab to find information about GGPlot functions.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-run-vs.-source",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-run-vs.-source",
    "title": "1-01: RStudio Projects Setup",
    "section": "15 Extension: Run vs. Source",
    "text": "15 Extension: Run vs. Source\nTechnically speaking, the difference between Run and Source is:\n\nSource will execute all the code in a script file.\nRun will execute either:\n\nThe code that is highlighted (if code is highlighted) OR\nThe command that the cursor is on (if the command is on more than one line) OR\nThe whole line the cursor is on\n\n\n \nThe real difference lies in a historical discussion of scripting vs. programming, which is a discussion beyond this class.  Suffice to say, R was originally intended to be more like an advanced calculator than a programming language. The script files would contain multiple lines of code that could be execute independently and in any order (think of these as buttons on a calculator).  The user could click a “button” to pull in data, click another “button” to run statistical analysis on the data, and click a third “button” to output the analysis.  This is what the Run button does.\n \nHowever, as R has grown, the focus has shifted towards developing well-structured code just like any modern programming language (e.g., Python, C, Java). This means executing the script as a whole instead of in parts.  This is what Source does.  Executing your script as a whole instead of in parts has many advantages as the code is easier to debug, easier to share, and much better organized – because you are forced to organize it. In the not-so-humble opinion of this author, learning to treat your script as a whole is a vital part of learning how to program.  For this reason, we will always be using the Source button in this class.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "title": "1-01: RStudio Projects Setup",
    "section": "16 Extension: Create a standalone R script",
    "text": "16 Extension: Create a standalone R script\nThere are two ways to create script file in RStudio:\n\nA standalone script\nAs part of an RStudio Project\n\n \nMany people use the first method.  In this class we exclusively use the second method.  The first method of creating a script file is fine for testing something out.  The second method is far better for organizing larger projects and sharing your code with others.\n \nThe reason the second method is better is because a project consist of many file that need to talk each-other.  Script files will call other scripts file or read in data from data files.  In order to makes this work, the script files need to know how to find the other files. In an RStudio Project, this is easy because the working directory is always the Project Folder of your project – and all files in the project are contained within the Project Folder.  So, you just need to look for the file relative to the Project Folder.\n \nR Programmers often get around the lack of a Project Folder/defined working directory by setting the working directory in code using setwd().  This can work locally but becomes problematic when files are shared or moved.  Whereas, RStudio Project always maintain their folder structure.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-.rproj-and-.rhistory-hidden-files-in-your-project-folder",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-.rproj-and-.rhistory-hidden-files-in-your-project-folder",
    "title": "1-01: RStudio Projects Setup",
    "section": "17 Extension: *.RProj and .Rhistory",
    "text": "17 Extension: *.RProj and .Rhistory\nThe *.RProj file (where * is the name of your project) stores basic information about your project – you do not need to edit this file. In your file manager, double-clicking *.RProj opens the RStudio Project.  Inside RStudio, clicking on *.RProj brings up the Project Options window (Figure 24), which you can also get to by clicking on Tools -&gt; Project Options.\n\n\n\n\n\n\n\nFigure 24: Project Options window\n\n\n\n\nThe .Rhistory file stores commands and information from the Console tab (bottom-left corner).  For this class, you will not need to use the .Rhistory file.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html",
    "href": "lessons/0-01-IntroductionAndSyllabus.html",
    "title": "Introduction and Syllabus",
    "section": "",
    "text": "Switch section regarding CutePDF to a section about PDF Readers (there are other options than Adobe)\nupdate images\nupdate the student responsibilities section to the new MSU verbiage … or just link to it.\nadd announcements to 0.2 and remove from print view",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#welcome-to-programming-fundamentals-using-r-and-rstudio",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#welcome-to-programming-fundamentals-using-r-and-rstudio",
    "title": "Introduction and Syllabus",
    "section": "1 Welcome to Programming Fundamentals Using R and RStudio",
    "text": "1 Welcome to Programming Fundamentals Using R and RStudio\nThe purpose of this class is to introduce students to the principles of programming using R and RStudio.  R and RStudio are powerful and versatile data analysis packages that are freely available. The R community is extensive and is constantly developing new tools that rival and, in many cases, surpass commercial statistical software and graphing packages.  This class is designed for students new to programming.  While the class focus is on R programming in RStudio, the programming skills taught (e.g., for loops, if-else statements, functions) are designed so that students can transfer their skills to other programming languages like C, JavaScript, or Python.\n \nThe class is a self-paced and asynchronous online class. The amount of material in the class is about the same as a 4 credit, one semester class and students are expected to complete the class within six months.  There are no regularly scheduled office hours but you can email the instructor anytime to ask questions or set up a Zoom meeting.  All contacts will receive a response within one business day.\n\n1.1 Instructor\nCharlie Belinsky\n\nbelinsky@msu.edu\n517-355-0126\n\n\nAbout me…\nI started my career as a Software Engineer for Motorola in Arizona where I developed software for military radios. From there I became a high school teacher in Port Huron, MI where I taught Computer Science, Web Design, and Physical Science. After that, I worked as an Instructional Designer for the College of Education at MSU where my main project was developing the hybrid graduate program. I currently work at the QFC where my primary job is developing and teaching online classes, including this one.  In my free time you will often find me with a backpack deep in a forest or, as my picture testifies to, hanging out on a mountain in the Northern Cascades.\n\n\n1.2 Technical Support\nYou can contact me, Charlie, regarding technical issues.\n \nMSU also offers 24 hour technical support for MSU and MSU Guest students.\n\n517-432-6200 or 844-678-6200 (toll free)\nemail: ithelp@msu.edu\nYou can get an MSU Guest ID here.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#class-requirements",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#class-requirements",
    "title": "Introduction and Syllabus",
    "section": "2 Class Requirements",
    "text": "2 Class Requirements\nStudents should be familiar with basic statistical concepts (e.g., mean, standard deviation, standard error).  All material for this course is online – no textbooks or any other purchases are required.\n\n2.1 Tech requirements\nHardware:  Any Windows (10 or 11), Mac, or Linux machine from the past ten years that has updates installed can handle all hardware and software requirements of this class.\n \nBrowser: You can use any browser (Firefox, Microsoft’s Edge, Chrome, Safari) updated within the last couple of years.\n \nVideoconferencing: We use Zoom for our videoconference meetings.  The meeting link will be emailed to you prior to the meeting.  It is recommended that you download and test your camera and microphone on Zoom before attending an instructor meeting.  The easiest way to do this is to go to the Zoom test page.  Note: Zoom’s test page will download Zoom for you.\n \nTo test your hardware in Zoom, open Zoom and make sure you are on the Home tab and click the Settings Icon (Figure 1) and the Settings Window will open Figure 1.  Go to the Audio and Video tabs to test your microphone, speakers, and webcam.  If you are using a Mac, the view is different but the buttons are the same.\n\n\n\n\n\n\nFigure 1: Testing the audio and video in Zoom (click on picture to resize).\n\n\n\n\n\n2.2 Accessing the class\nYou need a GitHub ID to access the class and hand in assignments. Go to http://github.com and click Sign up, you can use a free GitHub account or a professional account.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#class-structure",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#class-structure",
    "title": "Introduction and Syllabus",
    "section": "3 Class Structure",
    "text": "3 Class Structure\nnote: this section still reflect the last version of the course form 2021. It will be updated as the material for this version gets completed.\n \nThe course has 28 lessons divided into two units: Basic Programming and Data Programming\n \n\nBasic Programming: basic programming structures and operations like variables, inputs, outputs, mathematical operations, if-else structures, for loops, and conditional operations.\n\n1-1 Setup and RStudio Projects: Set up a Project in RStudio and learn the basics of the RStudio programming environment.\n1-2 Variables: Discussion of the different types of variables, variable naming conventions, assigning values to variables, changing values.\n1-3 Mathematical Operations: Mathematical operations on numeric variables, power operations, algebraic formulas in R\n1-4 Vectors and Data Frames: Learn about CSV files and two common data types in R\n1-5 Functions Introduction:Reading function descriptions and using arguments\n1-6 Run and Source: The two ways in R to execute a script and some convenient coding feature in RStudio\n1-7 Outputs: Output information to the console, mixed string, and numeric outputs.\n1-8 Conditional Operators: Creating decision points in your script using if() statements and the six conditional operators.\n1-9 If-Else Statements: Checking multiple conditions on a variable, creating error conditions.\n1-10 For loops: Cycle through data using for loops and performing conditional operations on each value\n1-11 For loops and State Variables: Remembering values as you cycle through for loops\n1-12 Multiple Conditions: Checking complex conditions on a variable using logical operators & and\n1-13 Functions: Creating your own function, adding and using arguments and return values \n1-14 Function 2: Default arguments, putting functions in separate files, calling external files\n1-15 Functions 3: More complex functions and Boolean arguments\n\nData Programming: data programming structures and operations like file inputs, vectors, subset operations, plotting, and data types.\n\n2-1 GGPlot Introduction: Structures within GGPlot, creating basic plots from data in a data frame\n2-2 Data frame Modifications: Add, remove, and reorder column in a data frame, and manipulating string values\n2-3 Data types and Data Frames: Conversion between data types, NA values, common issues with data frames\n2-4 Which Statements: Conditionally subset numeric data, plot subsetted data\n2-5 Which and Regular Expressions: Conditionally subset string data, finding patterns in string values \n2-6 Datetime Objects: Formatted date and datetime values, converting from strings to datetime value \n2-7 Matrices: Create two-dimensional data, performing statistics on 2D data\n2-8 Binding and Sampling: Combining data and creating randomly sampled values\n2-9 Stacking and Mapping: Plotting multiple columns in a data frame at once, mapping data to color and size\n2-10 Statistical Tests: t-tests, ANOVAs, linear regressions and storing and reading information from the tests \n2-11 Objects and Attributes: deeper dive into the data types in R and their attributes\n2-12 Lists: Reading, navigating, subsetting, and creating List objects in R \n2-13 Breakpoints: a method for debugging your code \n\n\n\n3.1 Lesson Application\nAll lessons have an Application section at the end that will ask you to apply what you learned in the lesson in your own script. The Application is the only product that gets evaluated. There are no tests and there is no final exam.\n \nThe class is self-paced, however you should not go more than 2 weeks without handing in an application unless you inform the instructor that there will be a delay.  You will have a chance to redo all applications.\n\n\n3.2 Lesson feedback\nEach application has these three questions regarding the lesson:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n \nThese questions are vital for feedback in this class and far more useful to me than end-of-class surveys as they give me real-time information.  Please take a few minutes to answer these questions.  Feedback from these questions has become my main way of improving the class.  In return, I promise to address concerns and questions from your responses.\n\n\n3.3 Extensions and Traps\nMany of the lessons contain optional content called Extension and Traps.  Extensions contain material that goes beyond the lesson’s objectives and Traps capture some of the common issues students have with the lesson’s objectives.  There are links to Extensions and Traps within the Content area of the lesson.  Clicking on the appropriate link takes you directly to the Extension or Trap. Extension: Testing the extension link",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#student-instructor-meetings",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#student-instructor-meetings",
    "title": "Introduction and Syllabus",
    "section": "4 Student-Instructor Meetings",
    "text": "4 Student-Instructor Meetings\nWith the exception of an initial meeting (after lesson 2), student-instructor meetings will be done on an as-needed basis and meetings can always be requested by the student.  Meetings are preferably over Zoom so that screens can be shared.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#lesson-features-technical",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#lesson-features-technical",
    "title": "Introduction and Syllabus",
    "section": "5 Lesson features (technical)",
    "text": "5 Lesson features (technical)\nThis sections goes over some of the technological features built into the lessons.\n\n5.1 Long-click menu\nIf you long-click (hold left-button for about half a second) anywhere on any lesson page Figure 2, try it!), you are given options to:\n\nReturn to the Previous Position (only appears after you have jumped to a position on the page)\nGo to Top of Page\nPrint/ Save as PDF (same as the lesson’s Print link)\nMaximize All Images\nMinimize All Images\n\n \n\n\n\n\n\n\nFigure 2: The long-click menu – this view is from Firefox .\n\n\n\n\n\n5.2 Resizing Pictures\nMost images in the course can be resized so that the picture is out of your way when you don’t need to view it.\n \nClicking on the image toggles it between the minimized and maximized states.\nClicking and dragging on the image allows you to resize the image to any size. (Figure 3).\n\n\n\n\n\n\nFigure 3: Test picture to resize (Ninh Bình, Việt Nam)\n\n\n\n\n\n5.3 Figures and references\nWhen you click on a figure reference (e.g., Figure 3), the caption on the figure will highlight for 2 seconds.\n \nIf the figure is not on the screen, then the page will scroll to the figure and highlight it.  For instance, clicking on Figure 1 will take you to the Zoom figure near the top of this page.  You can return to this position by long-clicking and selecting Return to the Previous Position\n\n\n5.4 Printing lessons and saving lessons to PDF\nYou can print any lesson or save it as a PDF by clicking on the Printer icon at the top of every lesson (and this syllabus).  This will bring up a print dialog (Figure 4) and you can print the lesson to a printer.  On most machines, you can also choose a PDF device as a printer – this will save the lesson as a PDF document.\n \nNote: Using your browser’s print feature instead on the Print link will print out the whole webpage instead of just the lesson.\n\n\n\n\n\n\nFigure 4: This author has two print-to-PDF devices – the Microsoft Print to PDF, which comes with Windows 10 and 11, works fine\n\n\n\n\n5.4.1 Print-to-PDF Software\nIf you are using Windows 7 or 8 you might not have a PDF device and you will need to download Print-to-PDF software. You can see if you have a PDF device by going to the print options in any program and see if any of the devices have “PDF” in their name (Figure 4).  If you don’t have a PDF device, then I recommend you install CutePDF (direct link to the file download).  CutePDF is simple and powerful print-to-PDF software that does not try to install any extra software on your computer. Trap: Bloatware\n\n\n\n5.5 Codeblocks\nClicking on the clipboard in the upper-right corner of the codeblock (Figure 5) will copy the code to the clipboard. You can then paste the code into RStudio (or any other text editor)\n\n\n\n# the next two lines should be at the top of all your scripts\nrm(list=ls());\noptions(show.error.locations = TRUE);\n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;\nt = 20;\nv = d/t;\n\n\nFigure 5: Clicking on clipboard in upper-right corner selects all the text and copies it to the clipboard\n\n\n\n\n\n5.6 Special note about images in the lessons for this class\nRStudio is a rapidly evolving program, and it would be too much work to maintain all the lesson images in order to reflect the visual likeness of the newest version of RStudio.  Some of the images in this class still reflect the 2019 version of RStudio (when R was still at version 3.5). There are also minor changes that I have made to the code that I did not believe warrants putting in new images.  For instance, my RStudio Project name might change between images and some of the RStudio buttons and tabs will look slightly different (think of it as a check on how observant you are!).  I have tried to make sure these differences change nothing functionally.  Inevitably, something will fall through the cracks – so please, contact the instructor if there is something causing a problem!",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#personal-statement-from-charlie",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#personal-statement-from-charlie",
    "title": "Introduction and Syllabus",
    "section": "6 Personal statement from Charlie",
    "text": "6 Personal statement from Charlie\nThe biggest thing that is lost when you move a class from a face-to-face environment to an online environment is the daily interaction between the instructor and the students.  These interactions provide invaluable informal feedback for the instructor and, I would argue, are the main tool that an instructor uses to make improvements to their class.  It is impossible to replicate this in an online class but I ask that you help me out and make an effort to communicate to me the little things.  This could mean technical nags like content not appearing properly or pages loading too slowly, lesson content that is unclear, grammar and spelling issues, or scripts that does not work or work in a way that you do not understand.\n \nThank you for reading and taking this into consideration.  In the end, it is the interactions between an instructor and the students that make a class great.\n \nNow on to the stuff I have to put in a syllabus…",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#disclaimers-and-loose-ends",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#disclaimers-and-loose-ends",
    "title": "Introduction and Syllabus",
    "section": "7 Disclaimers and Loose Ends",
    "text": "7 Disclaimers and Loose Ends\n\n7.1 Student Responsibilities\n\nStudents are expected to regularly check the Announcements section on the home page for the class and the email address associated with their MSU ID/ MSU Community ID for new information regarding the class.\nStudents are expected to ask questions if they are having problems with an application or their class project.\nStudents are expected to monitor their progress in order to complete the course work on time.\nStudents are expected to contact either the instructor or MSU regarding technical issues that are interfering with the class.\nStudents are expected to follow the MSU’s academic integrity policy.\nPlease notify the instructor regarding issues with the class website and lessons.\n\n\n\n7.2 Academic Integrity (summarized)\nWritten or other work which a student submits in a course, shall be the product of his/her own efforts. Plagiarism, cheating, and all other forms of academic dishonesty are prohibited. Students are expected to adhere to the ethical and professional standards associated with their programs and academic courses. All applicable portions of Michigan State’s Policy on Academic Integrity apply to non-credit courses. Copies of the Policy on Academic Integrity may be accessed at https://www.msu.edu/unit/ombud/honestylinks.html.\n\n\n7.3 Instructor Responsibilities\n\nInstructor will be available for assistance for requested virtual office hours (through Zoom).\nInstructor will respond to emails from students within 1 business day.  Potential for delayed responses (e.g., instructor is on vacation) will be posted on the front page of the course.\nChanges to the course will be posted in the Announcements section of the home page for the class.\n\n\n\n7.4 Attendance\nYou are expected to log in to the class at least once a week. Logging in allows you to stay updated and see new announcements.\n\n\n7.5 Participation\nPlease note that not all course lessons are the same length and the later ones tend to involve more work. Our goals with regard to participation/progress are to (a) keep you engaged in the course, (b) enhance the overall learning environment by promoting student-teacher communication, and (c) avoid a last minute time crunch for everyone involved. We will not be sympathetic or make allowances for your failure on course tasks or deadlines that result from not seeing announcements because you had not accessed the course for an extended period, and had not told us you would be away from the internet.\n\n\n7.6 ADA Statement\n\nMSU provides students with disabilities reasonable accommodations to participate in educational programs, activities, or services. Students with disabilities requiring accommodations to participate in class activities or meet course requirements should contact the instructor as early as possible.\nFor students needing accommodations for disabilities, please contact your instructor and The Resource Center for Persons with Disabilities at Michigan State University at 517-353-9642.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#trap-bloatware",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#trap-bloatware",
    "title": "Introduction and Syllabus",
    "section": "8 Trap: Bloatware",
    "text": "8 Trap: Bloatware\nAdobe Acrobat, like most free software you download, attempts to bundle itself with software you most likely do not need nor want (i.e., bloatware).  Make sure you take some time to read the optional offers whenever you download software. This author would argue that the main reason computers “slow” down over time is because of extra software that users unwittingly install.\n \n\n\n\n\n\n\nFigure 6: Three offers from Adobe that you neither need nor want – this author recommends you uncheck them all.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#extension-testing-the-extension-link",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#extension-testing-the-extension-link",
    "title": "Introduction and Syllabus",
    "section": "9 Extension: Testing the extension link",
    "text": "9 Extension: Testing the extension link\nHi, and welcome to the test Extension.  If you clicked on the Extension link to get here then you can return to your previous location by long-clicking on this page and choosing Go to Previous Location.\n \nIf you just scrolled down to this point then, congratulations, you have reached the end of the document.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#purpose",
    "href": "lessons/1-02-Variables.html#purpose",
    "title": "1-02: Variables",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nDiscuss what a programming variable is and how it compares to an algebraic variable.\nDiscuss naming conventions for variables.\nAssign and reassign values to variables\nIntroduce in-line and whole-line comments.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#questions-about-the-material",
    "href": "lessons/1-02-Variables.html#questions-about-the-material",
    "title": "1-02: Variables",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#programming-structures",
    "href": "lessons/1-02-Variables.html#programming-structures",
    "title": "1-02: Variables",
    "section": "3 Programming structures",
    "text": "3 Programming structures\nIn all programming languages there are basically 4 main structures that cover almost every aspect of programming:\n\nVariables: named storage area for values used in the script\nIf-Else Statements: conditional execution of code\nFor Loops: execution of code a fixed number of times\nFunctions: place to store commonly used code\n\n \nWe will go through all 4 of these in the class and in the lesson we will cover the first, Variables.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#different-types-of-variables",
    "href": "lessons/1-02-Variables.html#different-types-of-variables",
    "title": "1-02: Variables",
    "section": "4 Different types of variables",
    "text": "4 Different types of variables\nVariables is a widely used term found in many different fields, and its definition is not consistent across the fields.  In this class, when I say variable I am referring to a programming variable. When I am referring to a variable in another field, I will add the field to the term variable (e.g., algebraic variable, experimental variable, statistical variable).\n\n4.1 Algebraic variables\nIn Physics, we use algebraic variables to describe the relationship between physical properties.  For example, velocity can be expressed algebraically as  v=d/t where v, d, and t are symbols representing the physical properties of velocity, distance, and time.  The formula states that the relationship v=d/t is always maintained even as the individual values change.\n \nIn this case, v, d, and t are all algebraic variables that have the following properties:\n\nName: v, d, t (name is synonymous with symbol)\nType: numeric (v, d, and t are all numbers)\nValue: given by situation – the value can be known or unknown\n\n\n\n4.2 Variables in programming\nIn programming, variables work in a similar way. Variables in programming are named storage locations in memory that hold information.\n \nThis information could be\n\na runner’s distance, time, and velocity\nthe number of fish caught in a day\nthe name of the lake the fish were caught in\nweather information such as temperature, humidity, or wind speed\n\n \nLike algebraic variables, variables in programming have a name, type, and value.\n\n4.2.1 Name\nThe name corresponds to the symbol in our physics example above – it is how the variable is represented in the script.  The name is used to reference the storage location in memory that holds the value.  For our initial example, we will use v, d, and t as the variable names.  Later in this lesson, I will talk about variable naming conventions.\n\n\n4.2.2 Value \nThe value is the information that is stored in the location pointed to by the name, so when v = 10 , that means there is a storage location in memory named v, and in that location, there is the number 10. Note: we will worry about units later.\n \nTrap: Constant variables in R\n\n\n4.2.3 Type\nThe type describes what kind of value is being stored in memory which, in turn, tells R what kind of operations can be performed on the variable. Distance, velocity, and time all have numeric values, and mathematical operations can be performed on them.\n \nNumeric is one type of value a variable can have, some of the other types of values are:\n\nstrings (also called characters): a text value (e.g., a lake name)\ncategorical: a limited set of text values (e.g., the four seasons or the five Great Lakes)\nBoolean: a TRUE/FALSE statement\nDate: a date in day-month-year format\n\n \nWe will talk more about the non-numeric variable types in future lessons, for now, we will stick with numeric variables.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#using-variables-in-a-script",
    "href": "lessons/1-02-Variables.html#using-variables-in-a-script",
    "title": "1-02: Variables",
    "section": "5 Using variables in a script",
    "text": "5 Using variables in a script\nWe are going to create a simple script that calculates velocity given distance and time.\n \nThere are three variables in this script: d, v, and t\n \nThe steps for making this script are:\n\nOpen Your RStudio Project (or create one if you do not have one)\nOpen a new script file\nAdd code to the script\nExecute (Source) the code\n\n\n5.1 Open your RStudio Project\nIt would be best to use the same RStudio Project for the whole class and you can use the one you created in the last lesson.\n \nThere are multiple ways to open an RStudio Project:\n\nOpen your Project Folder in a file manager and double-click the *.proj file, where * is the name of your project\nIn RStudio, click File -&gt; Open Project… -&gt; navigate to your Project Folder and click the *.proj file\nIn RStudio, click File -&gt; Recent Projects -&gt; choose the RStudio Project\nUse the Projects dropdown menu in the top-right corner of RStudio (Figure 1)\n\n\n\n\n\n\n\nFigure 1: The Project dropdown menu in RStudio – something I use all the time!\n\n\n\n\n\n5.2 Open a new script file\nInside your RStudio Project, click on File -&gt; New File -&gt; R Script (Figure 2) .  An empty file named Untitled1 will appear as a tab in the File Editor window.  Save the file as lesson1-02.r in your script folder.\n \nNote: you should always name and save a script file before editing it. Do not leave it as Untitled1\n\n\n\n\n\n\nFigure 2: Opening a new R file in RStudio\n\n\n\n\n\n5.3 Add code to the script\nCopy and paste the following lines into the code window and click the Source button in the bar above the code (or click Code -&gt; Source):\nrm(list=ls());    # Clear out the Environment     \n  \n# create two variables: d and t and give them values\nd = 100;\nt = 20;\n# create a variable v that is calculated using d and t\nv = d/t;\nLines 1 cleans out the Environment tab (top-right corner) each time the script is executed.  This provides you with a clean slate each time you run a script and I put this line at the top of most of my scripts.\nExtension: Why clear the Environment tab?\n \nLine 1 also has an inline comment that starts with #. Everything after the # is informational and does not get executed.\n \nLines 3 and 6 are full comment lines – again, they are informational and there to make the script easier to understand.  You can take them out and the script will produce the same result.\n \nLines 4, 5, and 7 are where the real action occurs and each line contains a variable assignment:\n\nLine 4 assigns the value 100 to the variable named d\nLine 5 assigns the value 20 to the variable named t\nLine 7 assigns the value of the calculation d/t to the variable named v.\n\n \nLines 1, 4, 5, and 7 all have semicolons ( ; ) at the end.  The semicolon designates the end of a programming command just like the period designates the end of a sentence.  The semicolon is optional in R and is often not used, but I highly recommend the use of semicolons in all of your scripts. Semicolons allow for more flexibility (e.g., you can put multiple “sentences” on one line), help you think about the flow of your code, and are required in many programming languages.\n \nTrap: Assignment vs. Equality Operations\nExtension: alternate assignment operator\n\n\n5.4 Execute your code – the Environment tab\nClick Source to execute your R code ( Figure 3 ).  Your RStudio window should look similar to this:\n\n\n\n\n\n\nFigure 3: Executing (sourcing) the velocity-distance-time script\n\n\n\nNotice that the Environment tab displays the values for the variables v, d, and t. The Environment tab displays every variable in your script and is a very useful tool for viewing the results of your script and for debugging when things go wrong..\n \nTry changing the values for d and t (lines 7 and 8) and click Source again to see how the values in the Environment tab change.\n\n5.4.1 The Unexpected end of document error\nIn Figure 3 there is a red x on the last line indicating an error. The error says unexpected end of document. This is not a real problem, it will not cause any issues with your script. It is a bug in how RStudio deals with semicolons. You can remove the last semicolon if you want to get rid of the error.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#re-assigning-values-to-variables",
    "href": "lessons/1-02-Variables.html#re-assigning-values-to-variables",
    "title": "1-02: Variables",
    "section": "6 Re-assigning values to variables",
    "text": "6 Re-assigning values to variables\nVariables get their namesake from the fact that their values can change.\n \nIn the code below:\n\nd is assigned the value 100 in line 5\nd to used to calculate v in line 7\nd is assigned a new value of 400 in line 8\n\n \nSource the code below to see what happens\nrm(list=ls());    # Clear out the Environment    \n  \n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;   # assign d the value 100\nt = 20;\nv = d/t;   # use d to calculate v\n\nd = 400;   # re-assigns d to 400\nIn the Environment tab the value of v remains 5 even though d changes. \n\n\n\n\n\n\nFigure 4: Changing d in the script does not retroactively change v\n\n\n\nThe value of v remains 5 because line 7 assigns the current valueof d/t to v. But, as of line 9, d is still equal to 100. v does not get updated because one of the variables used to calculate it (in this case, d) changes afterwards. The script runs in order, and variables are not updated retroactively.\n \nIn other words, v will remain 5 until it is explicitly assigned another value.\n \nTrap: Assigning nonexistent variables\n\n6.1 Reassigning values to a variable\nWhat happens if you add the line v=d/t at the end of the script? Try the following code and click Source\nrm(list=ls());    # Clear out the Environment    \n  \n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100; # assign d the value 100\nt = 20;\nv = d/t; # use d to calculate v\n\nd = 400; # re-assigns d to 400\nv = d/t; # re-assign v using the new value of d\nNotice that now the value of v has changed.  This is because line 10 assigns a new value to v calculated using the value of d from line 9.\n\n\n\n\n\n\nFigure 5: Assign a new value to v after assigning the new value to d",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#in-line-and-whole-line-comments",
    "href": "lessons/1-02-Variables.html#in-line-and-whole-line-comments",
    "title": "1-02: Variables",
    "section": "7 In-line and whole-line comments",
    "text": "7 In-line and whole-line comments\nThe code in the previous script (Figure 5) has examples of whole-line comments (lines 3 and 4) and in-line comments (lines 5, 7, 9, and 10 ).  R ignores everything after the ( # ) but still executes everything on the line before the ( # ).  In-line comments are a nice way to give a quick description of the code on a line, whereas whole-line comments are better for more robust descriptions – especially when code get complicated.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#naming-variables",
    "href": "lessons/1-02-Variables.html#naming-variables",
    "title": "1-02: Variables",
    "section": "8 Naming variables",
    "text": "8 Naming variables\nThe problem with variable names like v, d, and t is that they are not very descriptive.  It is good programming practice to give names that are descriptive so that people reading your code can more easily understand what is going on. \n \nThe first step would be to spell the variable names out, for example: velocity, distance, and time.\n \nHowever, a script solving for velocity will probably be calculating multiple velocities.  Perhaps the script is calculating the velocity of both a runner and a car – the variable names should reflect this. \n\n8.1 Naming Rules\nThere are a few rules for naming a variable:\n\nIt must start with a letter\nIt can only contain letters, numbers, or the underscore ( _ )\n\ndots ( . ) are also accepted in R but dots are not accepted in most programming languages\nthis means no spaces!\n\nThere are system reserved words you cannot use as variable names (e.g., if, else, for, while, TRUE, FALSE, function, next…).  We will learn what these reserved words mean in future lessons.\n\n\n\n8.2 Naming Conventions\nThere are two common programming conventions for variables names:\n\nCapitalize the first letter of every word except the first: runnerVelocity, runnerDistance, runnerTime\nPut an underscore ( _ ) between each word:  runner_velocity, runner_distance, runner_time\n\n \nTrap: Case counts in variable names\n \nFor all your class work, you need to use these two conventions.  I will use the first convention in most of my examples.\n \nNote: R programmers often use dots in variable names: runner.velocity, runner.distance.  I do not recommend this as this method will not work in most other programming languages.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#application",
    "href": "lessons/1-02-Variables.html#application",
    "title": "1-02: Variables",
    "section": "9 Application",
    "text": "9 Application\nTwo runners run a 400 meter race. \nThe first runner takes 127 seconds, the second runner takes 140 seconds.\n \nWrite a script that:\n\nCalculates each runner’s speed in meters/second\nCalculates each runner’s speed in miles/hour\n\n3600 seconds = 1 hour\n1609 meters = 1 mile\n\n\nSo, the script will calculate 4 velocities in all.\n \nMake sure you use variables for all values and follow proper variable naming convention.\n \nAfter your Source the script, make sure you can see all of the variables, with the correct answer, in the Environment tab.\n \nSave the script as app1-02.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n9.2 Challenge\nUse random values for the times instead of 127 and 140.  The easiest way to get a random number in R is to use the sample() function:\n \nExamples:\nrandomNum1 = sample(x=10:20, size=1);  # number between 10 and 20 (inclusive)\nrandomNum2 = sample(x=-5:5, size=1);   # number between -5 and 5 (inclusive)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-assignment-vs.-equality-operations",
    "href": "lessons/1-02-Variables.html#trap-assignment-vs.-equality-operations",
    "title": "1-02: Variables",
    "section": "10 Trap: Assignment vs. Equality Operations",
    "text": "10 Trap: Assignment vs. Equality Operations\nThe equal sign ( = ) plays a different role in programming than in Algebra.\n \nIn algebra, the equal sign is an equality operator saying that the two sides are equivalent to each other.\n\nSo, in algebra, v = d/t says that v is equivalent to d divided by t\nThe algebraic variable v will change if d or t changes\n\n \nIn programming, the equals sign is an assignment operator and it says that the variable on the left side will be assigned the value calculated on the right side.\n\nSo, in programming, v = d/t says that v will be assigned the calculation of  d divided by t\nIn this case, v will not change if d or t changes (unless v is explicitly reassigned after d or t changes).  Once assigned, the value of v is independent of the variables used in the calculations.\n\n\n10.1 Treating the equal sign as an equality operation\nA very common error in programming is to treat the assignment operator ( =) as an equality operator.\n \nThe following statements make sense in algebra as equality statements but will cause errors in R.\n# d/2 is not a valid variable, you cannot \"assign\" a value to \"d/2\"\n# d = 100*2 is valid\nd/2 = 100; \n\n# 20 cannot be assigned the value of 't' \n# t = 20 is valid\n20 = t;  \n\n# d/t is not a valid variable \n# v = d/t is valid\nd/t = v;\nPut the above lines of code in your script individually.  You will notice an error message gets displayed in the Console tab.  The error messages are often unintuitive.\n \nIn the following example (Figure 6), line 9 contains an error and the lines below it never gets executed:\nrm(list=ls());\n# this code sometimes gives the line number of an error\noptions(show.error.locations = TRUE);  \n\n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;\n20 = t;   # error!\nv = d/t;  # this line will not be executed\n\n\n\n\n\n\nFigure 6: Assignment error in the R Script\n\n\n\nNotice that the execution of the script stops as soon as an error occurs – so, in this case, line 10, which calculates v, never gets executed.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-constant-variables-in-r",
    "href": "lessons/1-02-Variables.html#trap-constant-variables-in-r",
    "title": "1-02: Variables",
    "section": "11 Trap: Constant variables in R",
    "text": "11 Trap: Constant variables in R\nThere are mathematical constants like π that should never change, and R has a predefined variable named pi that is equal to 3.1415.  In other words, there is a storage location in R referred to as pi that contains the numeric value 3.1415. The problem is that pi is technically a variable in R and can be changed.\n \nSource the following code in a new script file:\nrm(list=ls());\n\na = pi;  # pi is a predefined constant in R\npi = 3;  # But, R let's you reassign a value to pi\nb = pi;  # And now there is going to be a problem\nAnd you will see that you can reassign the value of pi in R. Most programming langauges will give an error if you tried to do this.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-assigning-nonexistent-variables",
    "href": "lessons/1-02-Variables.html#trap-assigning-nonexistent-variables",
    "title": "1-02: Variables",
    "section": "12 Trap: Assigning nonexistent variables",
    "text": "12 Trap: Assigning nonexistent variables\nThe first time you assign a value to a variable, a storage container is created in memory and a value is put in it.  We call this a declaration (more about declarations later). After a variable has been declared, it can be used in calculations and re-assigned values.  Before a variable is declared, R knows nothing about the variable.\n \nHere is an example of using a variable before it is declared. Note: the only change in this script was moving the line v=d/t before the declaration of d and t:\nrm(list=ls());             \n# gives the line number of the error\noptions(show.error.locations = TRUE);\n  \n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nv = d/t;   # error, d and t have not been declared\nd = 100; \nt = 20;\nIf you Source this code in a new script file, you will get an error in the Console tab that says object ‘d’ not found. The reason for this error is that, on line 7, the script is asked to assign the calculation d/t to the variable v but d and t do not exist yet.\n \nTry the following code and see how the error changes. Notice in this code v=d/t is after the declaration of d but before the declaration of t.\nrm(list=ls());             \n# gives the line number of the error\noptions(show.error.locations = TRUE);\n\n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;\nv = d/t;  # error\nt = 20;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-case-counts-in-variable-names",
    "href": "lessons/1-02-Variables.html#trap-case-counts-in-variable-names",
    "title": "1-02: Variables",
    "section": "13 Trap: Case counts in variable names",
    "text": "13 Trap: Case counts in variable names\nIn R, as in most scripting languages, uppercase and lowercase letters are seen as different.  So, runnersTime and runnerstime are seen by R as two different variable names.  If the case is not correct, then you will receive an Object not found error just like you would if you spelled the variable name wrong.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#extension-alternate-assignment-operator",
    "href": "lessons/1-02-Variables.html#extension-alternate-assignment-operator",
    "title": "1-02: Variables",
    "section": "14 Extension: alternate assignment operator",
    "text": "14 Extension: alternate assignment operator\nIn R, there are two assignment operators, the equal sign ( = ) and the arrow ( &lt;- ). \nrm(list=ls());    # Clear out the Environment  \n  \nd &lt;- 100;   # same as d = 100\nt &lt;- 20;    # same as t = 20\nv &lt;- d/t;   # same = d/t\nYou will see a lot of R programs written using the arrow.  In this class, I will use the equal sign because that is the standard for most other programming languages (including JavaScript and C) and it is easier to type.  You can use either operator in your scripts in this class.\n \nFor assigning values to a variable, ( &lt;- ) and ( = ) are functionally equivalent. There is a difference between the two operators when working with functions, which we will cover when we get to function.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#extension-why-clear-the-environment-tab",
    "href": "lessons/1-02-Variables.html#extension-why-clear-the-environment-tab",
    "title": "1-02: Variables",
    "section": "15 Extension: Why clear the Environment tab?",
    "text": "15 Extension: Why clear the Environment tab?\nThis is kind of an advanced topic but there are many people who come to this class having already done some R programming and it is most likely they never clear the Environment when running scripts. This means that variables are persistent and will still be around when another script is executed.\n \nThis, in general, is a bad programming practice, which I will talk more about in future lessons. If a script needs a variable from another script then you want the first script to call the second script. This kind of explicit programming makes sharing and debugging your scripts a lot easier.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html",
    "title": "1-04: Vectors and Data Frames",
    "section": "",
    "text": "extension about why I added arguments when reading the CSV file\nadd some more images for early examples?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#purpose",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#purpose",
    "title": "1-04: Vectors and Data Frames",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nIntroducing vectors\nOpening a CSV file and saving data to a data frame\nPulling columns from a data frame\nPulling individual values from a column\nPulling multiple values for a column\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.\n\n1.1 Files for this lesson\nFrom this point on most lessons will have script and/or data files to download.\n \nThe script for this lesson is here\n\nSave the linked script file to the scripts folder in your Class Project\nThe script file contains the code in this lesson in the order it appears in this lesson. Source the script to see the results from this lesson.\n\n \nThe data used in this lesson, twoWeekWeatherData.csv\n\nSave the linked data file to the data folder in your Class Project\n\nIf you save the data file to the wrong folder, the script file will not be able to read it.\n\nTrap: Opening CSV files in Excel",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#standalone-scripts-vs.-scripts-within-a-project",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#standalone-scripts-vs.-scripts-within-a-project",
    "title": "1-04: Vectors and Data Frames",
    "section": "2 Standalone scripts vs. scripts within a Project",
    "text": "2 Standalone scripts vs. scripts within a Project\nIn the last two lessons, everything we did was contained to one script file – no outside file was needed.  The scripts in those lessons were standalone scripts and could be executed inside or outside your RStudio Project with the same results.\n \nStandalone scripts are rare and are generally only created for testing purposes.\n \nThe script for this lesson will not execute correctly if it is treated as a standalone script (e.g., it is executed outside of the RStudio Project). This is because the file looks for a data file and it needs to know where to look for the data file.\n\n2.1 Set Working Directory (a cautionary statement)\nMany people still treat all R scripts as standalone scripts (i.e., they do not use RStudio Project). This causes all sorts of problems when script file look for other files.  The old way to get around this is to set the Working Directories using setwd().  This is a mess because Working Directories change when file are moved between computers or even within a computer.  Scripts that set working directories are much harder to share and maintain.  This author strongly suggests that you use RStudio Projects and avoid the working directory mess.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#vector-variables",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#vector-variables",
    "title": "1-04: Vectors and Data Frames",
    "section": "3 Vector Variables",
    "text": "3 Vector Variables\nVector variables, or vector for short, are variables that hold multiple related values.  For instance if we have temperature values for 5 days, we could create 5 variables and assign each one a temperature value:\ntempHigh1 = 65;\ntempHigh2 = 57;\ntempHigh3 = 61;\ntempHigh4 = 64;\ntempHigh5 = 59;\nAnd, in the last lesson’s application, we averaged the 5 values like this:\ntempAvg = (tempHigh1 + tempHigh2 + tempHigh3 +\n           tempHigh4 + tempHigh5) / 5;\n\n3.1 Grouping values\nBut, in programming we want to group related values together.  So, instead of creating 5 different variables, we create one vector that has 5 values:\ntempHigh = c(65, 57, 61, 64, 59);\nOne of the main reasons to create a vector is that the values in the vector are all associated and we can perform mathematical operations on the whole vector.  For instance, the vector might consist of multiple temperatures in Fahrenheit and want to convert all the temperatures to Celsius:\ntempHighCel = (5/9) * (tempHigh - 32)\nOr, we can use one of R’s many, many statistical functions, mean(), on the vector:\ntempMean = mean(tempHigh); \nAfter executing the code in this section, we can see in the Environment tab that tempHighCel has 5 converted temperatures and that tempMean is the same as tempAvg:\ntempAvg:     61.2\ntempHigh:    num [1:5] 65 57 61 64 59\ntempHighCel: num [1:5] 18.3 139 16.1 17.5 15\ntempMean:    61.2\n\n\n\n\n\n\nFigure 1: View of temperature values in Environment\n\n\n\nExtension: Statistical functions on vectors\n\n\n3.2 Indexing values in a vector\nPutting values into vectors also allows us to associate values between vectors.  If we have a vector of high temperature values, then we could also have a vector of low temperature values.\ntempLow = c(45, 40, 55, 37, 42);\nWe can directly subtract tempLow values from tempHigh to get the difference in temperature for all values:\ntempDiff = tempHigh - tempLow;\nWe can index individual values.  You could think of the vector as 5 days.  And if you want, you can find the change in temperature for any day using the index 1 through 5:\ntempDiff_3 = tempHigh[3] - tempLow[3];\ntempDiff_5 = tempHigh[5] - tempLow[5];\nThe Environment shows:\ntempHigh:    num [1:5] 65 57 61 64 59\ntempLow:     num [1:5] 45 40 55 37 42\ntempDiff:    num [1:5] 20 17 6 27 17\ntempDiff_3:  6\ntempDiff_5:  17\n\n\n3.3 Vectors and columns in a data frame\nData frames are made up of vectors that all have the same length.  The vectors are the columns in the data frame and the number of values in the vector is determined by the number of rows in the data frame.\n \nIn Figure 2 there is a weather data frame (note: we are using this data frame in future lessons, not this one) where each column has a measured daily weather value (e.g., minTemp, maxTemp, relHum).  Each row gives the measured weather values for a specific day (e.g., row 1 is Jan 1, row 2 is Jan 2).\n\n\n\n\n\n\nFigure 2: A data frame viewed in RStudio with 23 variables (i.e., the 23 columns, which are vector variables)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#csv-files",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#csv-files",
    "title": "1-04: Vectors and Data Frames",
    "section": "4 CSV files",
    "text": "4 CSV files\nIn the first couple of lessons we were using data from inside the script but most of the data you will use will come from outside the script – often from a data frame. The data frames themselves often come from a CSV file. CSV stands for Comma Separated Values, meaning that the values in the file are separated by commas.\n \nNote: CSV is really just a text file that can be read in any text editor and CSV file do not have to use commas as separators.\n \nLet’s look at a small data set we downloaded in the Section 1.1 section called twoWeekWeatherData.csv, which contains two weeks of weather data from Lansing, Michigan. \n\n4.1 Opening a CSV file\nNote: CSV files are often opened by default in Excel and this can problematic: Trap: Opening CSV files in Excel\n \nCSV files are just text files and CSV files can be opened in any text editor (e.g., notepad, notepad++, textEdit).\n \nRStudio is also a text editor so we can open and edit twoWeekWeatherData.csv in RStudio by either:\n\nClicking File -&gt; Open File… and navigate to twoWeekWeatherData.csv and press OK.\nUsing the Files tab: navigate to the data folder, click on twoWeekWeatherData.csv, choose View File (Figure 3)\n\n\n\n\n\n\n\nFigure 3: The twoWeekWeatherData.csv file opened in RStudio\n\n\n\n \nThe CSV file has 15 lines (rows).  The first row contains the 5 column headers and the other 14 rows contain the 5 values for each date – all separated by a comma.\n\n\n4.2 Reading in a CSV file\nWe can see that the CSV file has a header row and each row has five values representing: date, highTemp, lowTemp, precipitation, noonCondition.\n \nTo use the data in a script we need to read the data into a script file – and for that we will use the read.csv() function.\n# Get the data from the twoWeekWeatherData CSV file\nweatherData = «read.csv»(file=\"data/twoWeekWeatherData.csv\", \n                       sep=\",\",\n                       header=TRUE);\nread.csv() reads in the data from the CSV file – and saves the data to a variable called weatherData.\n \nweatherData is a data frame variable and it appears in the Environment tab under Data as 14 obs. of 5 variables. (i.e., 14 rows and 5 columns), which matches what we saw in the CSV file (Figure 3). \n\nDouble-clicking on weatherData opens the data frame in the File Viewer window.  This is a convenient way to visualize the data frame.\nClicking on the blue arrow to the left of weatherData provides information about each of the columns\n\n\n\n\n\n\n\nFigure 4: Viewing the data frame in the File Viewer\n\n\n\n\n\n4.3 Column value type\nIn the Environment, when you click on the arrow next to the left of weatherData (Figure 2) you see some information about the columns in the data frame. The first piece of information is the name of the column (i.e., the header – date, highTemp, etc.).  The second is the type of value the column contains.\n \nIn weatherData there are three types of values:\n\nint (e.g., highTemp and lowTemp): integer – or non-decimal numbers\nnum (e.g., precipitation): numeric, or numbers with decimals\nchr: (e.g, noonCoondition) this stands for character, and character is really short for string of characters, and this in turn is typically shortened to string.  Whatever you call it, it is the catch-all category for values R cannot recognize as anything else. \n\n \nNote: the date column has date values but it is not formatted properly so R does not recognize it as a Date – something we will cover much later.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#functions-and-arguments",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#functions-and-arguments",
    "title": "1-04: Vectors and Data Frames",
    "section": "5 Functions and arguments",
    "text": "5 Functions and arguments\nread.csv() is a function that tells R to open a file and treat it like a CSV file. A function is a set of code separate from your main script that performs a common task (e.g., plotting values, finding a standard deviation, reading in a file).\n \nThere is a lot going on in our first line of code and that is because there are a lot of options, called arguments, when opening up a CSV file!  We will talk a little bit about these arguments here and save the rest of the discussion for the next lesson.\n \nInside the function read.csv(), I included three arguments (file, sep, and header).  Arguments are like the knobs and dials for a function.  The function reads a CSV file and the arguments tweak how the CSV file is read.\n\n5.1 file\nfile = “data/twoWeekWeatherData.csv” means that the script opens the file called twoWeekWeatherData.csv located in the data folder of your RStudio Project\n \nThis only works if you are in the RStudio Project because the RStudio Project sets the Working Directory to your Project Folder.\n \nIf you execute the script file outside your RStudio Project (Figure 5), you will get a cannot open file error in the Console because the script does not know to find the CSV file.\n\n\n\n\n\n\nFigure 5: You get a cannot open file error if you try to execute the script outside of your RStudio Project\n\n\n\n\n\n5.2 sep\nsep = “,” means that the values in the file are separated by commas.  This is not always true – even for CSV files.\n \nThe most common alternate separator values are spaces ( sep = ” “ ) and dots ( sep = “.” )\n\n\n5.3 header\nheader = TRUE means the first row contains header information. In this case the header information is the column names (date, highTemp, lowTemp, and precipitation)\n \nheader = FALSE would mean that the first row contains data (i.e., there are no column names).  If you set header=FALSE in this example then R will think that the column names are the first data point.  So, you will have 15 values in each vector and the first value will not make sense.\n\n\n5.4 Default values for arguments\nBy default, read.csv() assumes sep=“,” and header=TRUE. For the data in this example, sep and header are not needed and this code would work:\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\");\nBut I like to keep sep and header in my code because you often do need to change them (e.g., you have data without a header or spaces between values instead of commas) and it is easier to deal with if you already have sep and header when copying code from one script to another.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#getting-data",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#getting-data",
    "title": "1-04: Vectors and Data Frames",
    "section": "6 Getting data",
    "text": "6 Getting data\nWe now have a data frame with weather information stored in a variable called weatherData.  But, we usually do not want to deal with the whole data frame at once.  So, our next trick will be to extract parts of the data from the data frame.  We might want to work with one column in the data frame (e.g., highTemp or precipitation).  We can see all the columns in the data frame by expanding the data frame in the Environment or looking at the headers in the File Viewer (both views are in Figure 4). \n\n6.1 Pulling out a column\nColumns in a data frame are vectors (i.e., a variable with multiple values) and we can save the columns to a vector.  We can access the columns from a data frame using the $ operator.\n \nWe start with weatherData and, use the dollar sign operator ( $ ) to access the highTemp column, and save the results to the vector called highTemps:\nhighTemps = weatherData$highTemp;\nIn the Environment square brackets ([ ] ) indicates the variable is a vector.  highTemps appears in the Environment as a vector.  highTemps has 14 ( [1:14] ) integer (int) values, representing the temperature for each of the 14 days. \n\n\n\n\n\n\nFigure 6: The highTemps vector variable in the Environment tab\n\n\n\n\n\n6.2 Pulling out (subsetting) individual values\nPerhaps we want just one value – specifically, we want to know the high temperature on April 2 (the seventh day in weatherData).\n \nThere are multiple ways to access that individual value.  I will present three, but for the rest of this lesson, we are going to use the first method.\n \nWe could subset using the subset operator ( [ ] ) the 7th value from highTemps:\nhighTempDay7a = highTemps[7];\nWe could go back to the original data frame (weatherData) and subset the 7th value from the column highTemp:\nhighTempDay7b = weatherData$highTemp[7];\nOr, we can use a row/column (e.g., X/Y) operation on weatherData to get the value:\nhighTempDay7c = weatherData[7, \"highTemp\"];  # think of this as [X,Y] notation\nThe last method is functionally the same as the previous two – but the X,Y notation is the most robust as it can best handle more complex subsetting situations (e.g., subsetting multiple rows and columns), which will be discussed in a future lesson.\n\n\n6.3 The Environment and the L value\nI will be referring quite often to the Environment tab as it looks after the script has been sourced (as in Figure 6) .  Instead of taking a screenshot of the Environment tab (which is hard to maintain), I will display the variables I am focused on like this:\nhighTemp7a:  60L\nhighTemp7b:  60L\nhighTemp7c:  60L\nThe Environment tab shows that highTemp7a, highTemp7b, and highTemp7c are all equal to 60L\n \nThe L indicates that the number is explicitly an integer, not just a numeric values that happens to have all zeros in its decimal.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#pulling-out-multiple-values",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#pulling-out-multiple-values",
    "title": "1-04: Vectors and Data Frames",
    "section": "7 Pulling out multiple values",
    "text": "7 Pulling out multiple values\nWe have pulled out a column from a data frame and we have pulled out individual values.  In this section, we will show different ways to pull out multiple values with:\n\nAn index vector created using c()\nA regular (or, simple) sequence using the colon ( : ) operator\nA more complex sequence using the seq() function\n\n\n7.1 Using a numeric vector to pull multiple values\nhighTemps is a vector with 14 values and each of these values can be accessed by their numeric placement:\nval_01 = highTemps[1];\nval_05 = highTemps[5];\nval_12 = highTemps[12];\nOr, we might want to combine the temperatures from these three days into one variable.  c() creates a vector of the three values (1, 5, and 12) and that vector is used to subset highTemps:\nvalComb = highTemps[c(1,5,12)];  # a vector with 3 values\nvalComb is a vector with 3 values, the high temperature for days 1, 5, and 12:\n\n\n\nval_01:    57L\nval_05:    39L\nval_12:    54L\nvalComb:   int [1:3] 57 39 54\n\n\nFigure 7: The three values we pulled from highTemps individually saved and combined (valComb)\n\n\n\n\n\n7.2 Pulling out consecutive values\nIf we want to get the high temperature for consecutive days, we can use the simple sequencing ( : ) operator – simple refers to the fact that we are sequencing by 1:\nconsecVals = highTemps[3:11];  # same as highTemps[c(3,4,5,6,7,8,9,10,11)]\nconsecVals is a vector with 9 values – the high temperatures from days 3 through 11.  Note: 9 values, not 8 – we include both the 3 and the 11.\n \nThe ( : ) operator also works in reverse\nconsecValsRev = highTemps[11:3];\nconsecValsRev is a vector with 9 values – the high temperatures from days 11 down to 3.\n\n\n\nconsecVals:     int [1:9] 54 40 39 ...\nconsecValsRev:  int [1:9] 39 44 55 ...\n\n\nFigure 8: int [1:9] means 9 values are in each vector – the first few values are shown\n\n\n\n\n\n7.3 Using the Console to view values in a vector\nThe Environment tab is good for quickly looking at values, but it only shows a few values from each vector.  If you want to see all the values then you can use the Console tab (bottom-left corner).  In the Console tab, type in the variable you want to see and press Enter:\n\n\n\n\n\n\nFigure 9: Using the Console tab to view variables\n\n\n\n \nThese two values, consecVals and consecValRev, are shown in the Console window in Figure 9. In the future I will present the Console like this:\n&gt; consecVals \n[1] 54 40 39 58 60 53 55 44 39 \n&gt; consecValsRev \n[1] 39 44 55 53 60 58 39 40 54\n\n\n7.4 Using a sequence to get values\nWe can use the seq() to create a more complex sequence to subset a vector.\n \nThis is a two step process:\n\nCreate a sequence. \nUse the sequence to subset the vector. \n\n\n7.4.1 Creating a sequence\nseq() is a function with three arguments:\n\nfrom: the starting point\nto: the ending point\nby: the iteration\n\n \nWe can create a sequence that lists every other number from 1-14\nseq1 = seq(from=1, to=14, by=2);\nWe can reverse the sequence by switching the to and from and inverting the by\nseq2 = seq(from=14, to=1, by=-2);\nWe can get every 3rd number for the first 10 numbers:\nseq3 = seq(from=1, to=10, by=3);\nThe 3 sequences we created are just vectors of numbers:\nseq1:   1 3 5 7 9 11 13\nseq2:   14 12 10 8 6 4 2\nseq3:   1 4 7 10\n\n\n7.4.2 Using the sequences as indexes\nWe can use the 3 sequences above as index vectors to index the highTemps vector:\n \nGet every other high temperature:\nhighTempSeq1 = highTemps[seq1];\nGet every other high temperature in reverse:\nhighTempSeq2 = highTemps[seq2];\nGet every 3rd high temperature value in the first 10 values:\nhighTempSeq3 = highTemps[seq3];\n\n\n\nhighTempSeq1:  int [1:7] 57 54 39 60 ...\nhighTempSeq2:  int [1:7] 75 54 44 53 ...\nhighTempSeq3:  int [1:4] 57 40 60 44\n\n\nFigure 10: There are 7 values in the first two sequences and 4 in the third\n\n\n\n\n\n7.4.3 Combining the above 2 steps\nYou can combine the above two steps in 1 command.\n \nThe following command will give you the same high temperature values:\nhighTempSeq1b = highTemps[seq(from=1, to=14, by=2)];  \nhighTempSeq2b = highTemps[seq(from=14, to=1, by=-2)];  \nhighTempSeq3b = highTemps[seq(from=1, to=10, by=3)];\nExtension: Square brackets [ ] vs. Round Brackets ( )\n\n\n7.4.4 Note about combining steps in R\nWhile it might seem like combining steps is a good idea because it reduces the amount of code, this needs to be balanced with the fact that combining code usually makes it harder to read.  One of the big problems I see when looking at people’s code is that they cram too much code into one command and it becomes really difficult to debug if anything goes wrong.  If you are going to err on one side then this author recommends you err on the side of breaking up code rather than combining it.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#application",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#application",
    "title": "1-04: Vectors and Data Frames",
    "section": "8 Application",
    "text": "8 Application\nA) Create a file named app1-04.r in your scripts folder inside your RStudio Project and save the information from twoWeekWeatherData.csv to a variable named weatherData (just like in this lesson).\n \nB) Sequencing\nUse the seq() function to create this sequence: (13, 9, 5, 1, -3, -7). \nNote: this sequence could not be used to index a vector because it mixes positive and negative numbers. \n\nC) Subsetting:\n\nPull out two columns precipitation and lowTemp from weatherData and save each to a variable\nSave the 4th value of precipitation to a variable\n\nRepeat the previous step for the other two methods given in Section 6.2\n\nSave the 9th, 12th, 5th, and 1st values of lowTemp to one variable (in that order)\nCreate a variable that holds the precipitation for the last 5 days (of the 14 days).\nCreate a variable that holds the lowTemp for the days 12 down to 6.\nCreate a variable that holds the first 3 days and last 3 days of precipitation\n\n \nD) Negative subsetting:\nSubset precipitation using the sequence c(-1,-3,-5). Explain in comments what happened.\n \nE) Vector Math:\n\nConvert the precipitation column from inches to centimeters (2.54cm = 1in).\n\n \nF) Opening Data Frames:\n\nSave the file DowJones1980_2012.csv to the data folder in your RStudio Project\n\nTo save: right-click on link and choose Save link as…\n\nUsing read.csv(), save the data in DowJones1980_2012.csv to a data frame named dowJonesData\n\n there is no header in this file and the separator is a space\n\nPlot the data using the line: plot(dowJonesData$V2)\n\nIf you opened the file correctly the plot will be in the Plots tab and look like this:\n\n\n\n\n\n\nFigure 11: Plot of the Dow Jones data\n\n\n\n\n\n \n \nSave the script as app1-04.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#trap-opening-csv-files-in-excel",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#trap-opening-csv-files-in-excel",
    "title": "1-04: Vectors and Data Frames",
    "section": "9 Trap: Opening CSV files in Excel",
    "text": "9 Trap: Opening CSV files in Excel\nIf you have Excel on your computer, then it is probable that Excel is the default program for opening CSV files.  This means double-clicking on a CSV file will open it in Excel.  The danger with opening CSV files in Excel is that Excel will sometimes reformat the data (especially date and money columns) and then give a message saying how the data needs to be saved to be preserved.  Do not save the file – it will change the format of your data.  If you are editing a CSV file in Excel then I would save the results to a test file first to make sure Excel did not do anything untoward.\n\n\n\n\n\n\nFigure 12: Opening a CSV file in Excel – the possible data loss warning is not something you want to heed",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#extension-long-and-short-integers",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#extension-long-and-short-integers",
    "title": "1-04: Vectors and Data Frames",
    "section": "10 Extension: Long and Short Integers",
    "text": "10 Extension: Long and Short Integers\nL stands for Long integer – long meaning that this variable can hold a number larger than 256.  In the old days, when space on computers was VERY expensive, programmers would save space by having a short integer and long integer designation.  So, if a programmer knew a number was small, they would assign it to a short integer to take up less space on the computer.  Since temperatures in Lansing are generally going to be less than 256 (unless you are using the Kelvin system), it is safe to assign temperatures to short integers.\n \nNowadays, space is so cheap that we rarely care that we are using a tiny bit more memory than we need – so L has become mostly a relic of the past.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#extension-statistical-functions-on-vectors",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#extension-statistical-functions-on-vectors",
    "title": "1-04: Vectors and Data Frames",
    "section": "11 Extension: Statistical functions on vectors",
    "text": "11 Extension: Statistical functions on vectors\nOne huge advantage to using vectors is that most statistical function take vectors.  So, you can easily perform statistical functions on a vector:\ntempHigh = c(65, 57, 61, 64, 59);\n\ntempMean = mean(tempHigh);\ntempSD = sd(tempHigh);\ntempVar = var(tempHigh);\ntempMean:   61.2\ntempSD:     3.346...\ntempVar:    11.2\nWe will be doing more with this in later lessons…",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#extension-square-brackets-vs.-round-brackets",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#extension-square-brackets-vs.-round-brackets",
    "title": "1-04: Vectors and Data Frames",
    "section": "12 Extension: Square brackets [ ] vs. Round Brackets ( )",
    "text": "12 Extension: Square brackets [ ] vs. Round Brackets ( )\nSquare brackets are used when you are subsetting or indexing a variable.\nRound brackets are used when you are calling a function and contain the arguments for that function.\n… and the two types of brackets are often used in the same command\nlowTemps [seq(from=12, to=2, by=-2)]\nsays you are going to subset lowTemps using the function seq(). \n&gt; lowTemps [seq(from=12, to=2, by=-2)]\n[1] 43 40 50 45 38 43\nseq() is a function and produces a vector of numbers:\n&gt; seq(from=12, to=2, by=-2)\n[1] 12 10 8 6 4 2\nc() is also a function – c stands, unintuitively, for concatenate and will also produce a vector of numbers:\n&gt; c(12,10,8,6,4,2)\n[1] 12 10 8 6 4 2\nlowTemps [c(12,10,8,6,4,2)] and lowTemps [seq(from=12, to=2, by=-2)] produce the same results.\n \nYou can also subset lowTemps without calling a function:\n&gt; lowTemps[5]\n[1] 36\n&gt; lowTemps[4:8]\n[1] 38 36 45 32 50\nTechnically, 4:8 still calls the sequence seq(from=4, to=8, by=1) in the background – but that is really getting into the weeds!\n \nread.csv(), ggplot(), plot(), rm() are all functions.  There will be a lot more about functions in this class starting with next lesson.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html",
    "href": "lessons/1-06_Run_and_Source.html",
    "title": "1-06: Run and Source",
    "section": "",
    "text": "add/remove other things to set in RStudio like matching parentheses (or keep to 1st lesson)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#purpose",
    "href": "lessons/1-06_Run_and_Source.html#purpose",
    "title": "1-06: Run and Source",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nlook at some of the features of R and RStudio\nexplore the differences between Run and Source\n\n\n1.1 Files for the lesson\nThe script for the lesson is here\nThe data for this lesson is here\n \nIn this lesson we will focus more on features in R and RStudio.  In the next lesson we will talk more about the content of the script.\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#output-to-console",
    "href": "lessons/1-06_Run_and_Source.html#output-to-console",
    "title": "1-06: Run and Source",
    "section": "2 Output to console",
    "text": "2 Output to console\nIn the next couple of lesson we are going to make extensive use of the Console tab, which can be used to execute code and as output for your script file.  Like the Environment tab, it is difficult to maintain images so I will use text instead.\n \nFor example:\n\nopen the script for this lesson in your RStudio Project\nclick on line 4 (i.e., put the cursor on line 4)\nclick Run\n\n \nThe RStudio window looks like this:\n\n\n\n\n\n\nFigure 1: Output to the Console tab after executing line 6\n\n\n\n \nInstead of displying the RStudio image, I will display the output to the Console tab like this:\n\n\n\n«&gt;»   ### Output a text message\n«&gt;»   cat(\"Hello\"); \nHello\n\n\nFigure 2: Output to the Console tab after executing line 4",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#run-vs.-source",
    "href": "lessons/1-06_Run_and_Source.html#run-vs.-source",
    "title": "1-06: Run and Source",
    "section": "3 Run vs. Source",
    "text": "3 Run vs. Source\nThe Source button is used to execute the whole script (i.e., every command in the script) while the Run button is used to selectively execute commands.  Run is a great tool for debugging and testing your code and we are going to almost exclusively use Run for the next two lessons.\n \nThe next two lessons are more about showing off features in R and RStudio and not about creating a full script.  However, your goal with most scripts is to be able to execute the file using Source.  It takes longer to develop you script using Source but it forces you to automate your script which makes your script both easier to debug and share.\n\n3.1 Executing one line\nWe already have an example of using Run to execute one line in Figure 2.  When we put the cursor on line 4 and clicked Run, R executed the cat() command on line 4.  We will talk much more about cat() next lesson but cat() outputs to the Console whatever is in the parentheses.\n \nActually, clicking Run does not just execute the line, but everything associate with the command on the line.  When you look at the Console output, you see that lines 3 and 4 were both executed – but line 3 was just a comment line so it does not do anything.\n\n\n\n&gt;   ### Output a text message  \n&gt;   cat(\"Hello\");             \nHello                          \n\n\nFigure 3: Lines in Console that start with a ( &gt; ) are command lines\n\n\n\n\n\n3.2 Executing multiple commands on one line\nYou can put as many command as you want on one line as long as use semicolons between them.\n \nThe following line has three commands that\n\ncreate two variables (a and b)\noutput the addition of them to the Console. \n\na=3; b=7; cat(\"a+b=\", a+b);\nClicking Run on the line will add a and b to the Environment:\na:   3\nb:   7\nAnd the addition of a and b is displayed in the Console:\n&gt;   ### Multiple commands on one line\n&gt;   a=3; b=7; cat(\"a+b=\", a+b);\na+b= 10\nIf you remove the semicolons then you will get the error: unexpected symbol in ”  a=3 b”\nBasically, R is saying the it does not understand what the symbol b means because R thinks that b is a continuation of the a=3 command.\n\n\n3.3 Executing highlighted script\nYou can also highlight parts of your script and Run will executed exactly what is highlighted.\n \nIf you completely highlight lines 10, 11, and 12:\n  cat(\"Hello, World.\\n\");\n  cat(\"How are you?\\n\");\n  cat(\"I am fine?\\n\");\nand click Run, the output to the Console is:\n\n\n\n&gt;   cat(\"Hello, World.\\n\");\nHello, World.\n&gt;   cat(\"How are you?\\n\");\nHow are you?\n&gt;   cat(\"I am fine?\\n\");\nI am fine?\n\n\nFigure 4: Three commands sent to Console by clicking Run\n\n\n\nWhen you highlight code and click Run, Run will execute exactly what you highlight.  So, if you accidentally highlight a bit of line 9 along with lines 10-12:\n  ### Outputting multiple text messages «(\\n means go to next line)»\n  «cat(\"Hello, World.\\n\");»\n  «cat(\"How are you?\\n\");»\n  «cat(\"I am fine?\\n\");»\nThen in the Console you will get the error:\n&gt; (\\n means go to next line)\nError: unexpected symbol in \"(\\n\"\nR is trying to execute the last part of line 9 and R does not know that this is supposed to be part of a comment because you did not highlight the ### part of the line.\n \nTo recap, when you click Run and…:\n\n…the cursor is in a line: R will execute all commands on that line.\n…part of your code is highlighted: R will execute exactly what is highlighted\n\n\n\n3.4 Executing one command on multiple lines\nLines 15-17 contain the command to open the twoWeekWeatherData.csv file and save the data to a data frame named weatherData.\n  ### read in data from  twoWeekWeatherData.csv\n  weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                         sep=\",\",\n                         header=TRUE);\nIf we put the cursor on any line from 15-17 and click Run, R will execute all 3 lines.  When you click Run, R will execute whatever command the cursor is in the middle of.  In this case, the command starts on line 15 with weatherData = and ends on line 17 with header=TRUE);.\n \nWhen we Run line 15, the Console output shows lines 14-17 (14 is a comment) were executed – the ( + ) at the beginning of the lines in the Console says that this line is a continuation of the command from the previous line.\n\n\n\n&gt;   ### read in data from  twoWeekWeatherData.csv\n&gt;   weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n«+»                         sep=\",\",\n«+»                          header=TRUE);\n\n\nFigure 5: Console output when executing the multi-line command to open the csv file\n\n\n\nExecuting lines 14-17 means that you have a new variable named weatherData and this variable is put in the Environment tab:\n\n\n\nweatherData   14 obs. of 5 variables\n\n\nFigure 6: The Environment tab after the read.csv() command was executed",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#entering-commands-directly-into-console",
    "href": "lessons/1-06_Run_and_Source.html#entering-commands-directly-into-console",
    "title": "1-06: Run and Source",
    "section": "4 Entering commands directly into Console",
    "text": "4 Entering commands directly into Console\nWhen you click Run you are sending commands to the Console, but you can directly type commands in the Console – and it will produce the same results.\n \nSo, if you type cat(“Hello”) into the Console you will get:\n&gt; cat(\"Hello\")\nHello\nA common issue for people using the Console is that they will not complete commands.  For example, type cat(“He in the Console and press enter:\n&gt; cat(\"He\n+\nA ( + ) appears on the next line.  The ( + ) means that R sees the beginning of an unfinished command and is waiting for you to finish it. This will also happen if you highlight only part of a command in the script and press Run.  You can finish it by typing llo”) in the Console but the results will still be a bit off:\n&gt; cat(\"He\n+llo\")\nHe\nllo\nIf you see a ( + ) in the Console and have no idea what to do, you can press the esc key to get out of it.\n\n4.1 Quick view of variables\nAnother use for the Console is to quickly view some value.  If you want to see the highTemp column in weatherData you can type in the Console:\n&gt; weatherData$highTemp\n [1] 57 50 54 40 39 58 60 53 55 44 39 54 61 75\nNote: after you type $ in weatherData$, RStudio will start offering you column suggestions – a very conveinent feature when you have large dataframes.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#duplicating-lines-of-code",
    "href": "lessons/1-06_Run_and_Source.html#duplicating-lines-of-code",
    "title": "1-06: Run and Source",
    "section": "5 Duplicating lines of code",
    "text": "5 Duplicating lines of code\nQuite often in programming, you are producing multiple lines that are very similar.  For instance, you might have multiple lines that start with a cat() command.  In RStudio you can duplicate a line by putting your cursor on the line and clicking Control-Shift-D (Windows) or Command-Shift-D (Mac).\n \nIf you click Control/Command-Shift-D on line 12, you will get:\n\n\n\n  ### Outputting multiple text messages\n  cat(\"Hello, World.\");\n  cat(\"How are you?\");\n  cat(\"I am fine?\"); \n  «cat(\"I am fine?\");»\n\n\nFigure 7: Duplicating a line in RStudio using Control/Command-Shift-D\n\n\n\nIf you highlight text within your script and click Control/Command-Shift-D, then the highlighted text will be duplicated.  In this case, I highlighted the first Hello, World. and then clicked Control/Command-Shift-D:\n\n\n\n  ### Outputting multiple text messages\n  cat(\"Hello, World.«Hello, World.»\");\n  cat(\"How are you?\");\n  cat(\"I am fine?\"); \n\n\nFigure 8: Duplicating highlighted text in RStudio.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#block-comments",
    "href": "lessons/1-06_Run_and_Source.html#block-comments",
    "title": "1-06: Run and Source",
    "section": "6 Block Comments",
    "text": "6 Block Comments\nOften when you are testing code you want to comment lines so they do not execute.  In RStudio you can comment a bunch of lines at once by highlighting the lines you want commented and clicking Control-Shift-C on Windows and Command-Shift-C on a Mac.\n \nIf you highlight lines 11-14 and press Control/Command-Shift-C, a ( #) will appear at the beginning of each line:\n\n\n\n«#» ### Outputting multiple text messages\n«#» cat(\"Hello, World\");\n«#» cat(\"How are you?\");\n«#» cat(\"I am fine?\");\n\n\nFigure 9: Commenting multiple line by using Control/Command-Shift-C\n\n\n\nNote: A ( # ) is added to all highlighted lines – even those that were already commented like line 11\n\n6.1 Uncommenting a block\nIf all the lines highlighted already have a ( # ) then pressing Control/Command-Shift-C will uncomment all the lines (i.e., remove a #).  Uncommenting only removed the first # – so if you uncomment the lines from Figure 9, then the lines will revert back to:\n\n\n\n### Outputting multiple text messages\ncat(\"Hello, World\");\ncat(\"How are you?\");\ncat(\"I am fine?\");\n\n\nFigure 10: Uncommenting lines – only 1 # is removed so the first line is still commented",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#keyboard-shortcuts-in-rstudio",
    "href": "lessons/1-06_Run_and_Source.html#keyboard-shortcuts-in-rstudio",
    "title": "1-06: Run and Source",
    "section": "7 Keyboard shortcuts in RStudio",
    "text": "7 Keyboard shortcuts in RStudio\nControl/Command-Shift-C and Control/Command-Shift-D are the RStudio shortcuts I find the most useful. You can view all the keyboard shortcuts (and there are a lot) in RStudio by clicking Tools -&gt; Keyboard Shortcuts Help.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#breaking-up-long-lines-of-code",
    "href": "lessons/1-06_Run_and_Source.html#breaking-up-long-lines-of-code",
    "title": "1-06: Run and Source",
    "section": "8 Breaking up long lines of code",
    "text": "8 Breaking up long lines of code\nLine 15-17 is one command stretched over multiple lines:\nJust like a period ends a sentence,a semicolon designates the end of a statement.  In this case, the read.csv() statement is three lines long so the semicolon goes at the end of the third line.  As a reminder, R does not enforce semicolon usage, but it is a good idea to put them in.\n \nWe could put the whole command on one line and it would execute exactly the same:\n  ### same command as above -- this is a little harder to read\n  weatherData2 = read.csv(file=\"data/twoWeekWeatherData.csv\", sep=\",\", header=TRUE); \nweatherData2 appears in the Environment alongside weatherData, and it is exactly the same as weatherData:\nweatherData     14 obs. of 5 variables\nweatherData2    14 obs. of 5 variables\nBut, it is easier to read the multiple-line code.  As a general rule,you should try to avoid horizontal scrolling of your script (anything beyond 85 characters) as this makes the script much harder to read.\n \nIn R, you can break most lines of code into multiple lines with a few exceptions (one exception being long file-paths). You just need to be judicious about how you break up the line – the best places to break up a line of code are after a comma or where a space occurs.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#putting-margin-lines-in-your-script",
    "href": "lessons/1-06_Run_and_Source.html#putting-margin-lines-in-your-script",
    "title": "1-06: Run and Source",
    "section": "9 Putting margin lines in your script",
    "text": "9 Putting margin lines in your script\nThe generally accepted standard in R for the maximum number of characters in a line of code is 80.  This is not a hard-and-fast rule, but keeping your lines 85 characters or less makes it a lot easier to read your code especially on smaller monitors (e.g., laptops).  You can put a margin line at 85 characters in RStudio by clicking Tools -&gt; Global Options -&gt; Code. On the Display tab check Show margin and set Margin column to 85. One of the requirements of this class is that, when possible, you keep your script lines to 85 characters or less.\n\n\n\n\n\n\nFigure 11: setting a reminder line margin in RStudio\n\n\n\nNow you will see a grey vertical line at 85 characters (Figure 12) . The line is there as a guide – you can still type beyond this line. There are times when it is not possible to keep a line to 85 characters – the most common reason is a long file-path name because file-path names cannot be broken up.\n\n\n\n\n\n\nFigure 12: The grey line acts as a margin guide.\n\n\n\nNote: You can also see the cursor’s character position is on in the lower-left corner of Figure 12 – in this case, line 9, character 85.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#application",
    "href": "lessons/1-06_Run_and_Source.html#application",
    "title": "1-06: Run and Source",
    "section": "10 Application",
    "text": "10 Application\n\nHighlight lines 15 and 16 in the lesson script and click Run.  In comments explain what happens and why.\nHighlight lines 16 and 17 in the lesson script and click Run.  In comments explain what happens and why.\nCombine the lines 10, 11, and 12 into one line – don’t change the cat() commands.\nIn comments answer the following questions:\n\nHow many commands are there in the script file for this lesson?\nAssuming there is no limit for line length (i.e., you can go as far beyond 85 characters as you want): If you rewrote the script, what is the minimum number of lines you would need to execute every command?\n\n\n \nSave the script as app1-06.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html",
    "href": "lessons/1-08_Conditional_Operations.html",
    "title": "1-08: Conditional Operations",
    "section": "",
    "text": "figure out how to merge cells in tables",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#purpose",
    "href": "lessons/1-08_Conditional_Operations.html#purpose",
    "title": "1-08: Conditional Operations",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreating “decision points” in a script using if-statements\nIntroduce the six different conditional operators\nCode conditional statements on strings and numbers",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#material",
    "href": "lessons/1-08_Conditional_Operations.html#material",
    "title": "1-08: Conditional Operations",
    "section": "2 Material",
    "text": "2 Material\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#four-structures-in-programming",
    "href": "lessons/1-08_Conditional_Operations.html#four-structures-in-programming",
    "title": "1-08: Conditional Operations",
    "section": "3 Four structures in programming",
    "text": "3 Four structures in programming\nAs mentioned in the second lesson on variables, there are basically 4 main structures that cover almost every aspect of programming:\n\nVariables\nIf-Else Statements\nFor Loops\nFunctions\n\n \nIn the next two lessons we cover If-Else statements",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#non-linear-scripts",
    "href": "lessons/1-08_Conditional_Operations.html#non-linear-scripts",
    "title": "1-08: Conditional Operations",
    "section": "4 Non-linear scripts",
    "text": "4 Non-linear scripts\nSo far all of our scripts have been linear – in other words, the execution of the script goes line-by-line, or command-by-command, until the end of the script.  However, most scripts do not work like this – most scripts have multiple points where the execution of code is:\n\nmoved to another location (i.e., functions – future lesson)\ndone multiple times (i.e., for loops – future lesson)\ndependent on some condition (i.e., if-else statements – this lesson)\n\n \nAnd you will often find combinations of the above.  When dealing with data frames, if-else statements are often found within for loops.  For example, a for loop goes through every value in a temperature column and an embedded if-else statement executes code if the temperature is above a certain amount.\n \nFor the next couple of lessons we are just going to focus on if-else statements.  After that, we will introduce for loops with embedded if-else statements.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#questions-and-statements",
    "href": "lessons/1-08_Conditional_Operations.html#questions-and-statements",
    "title": "1-08: Conditional Operations",
    "section": "5 Questions and Statements",
    "text": "5 Questions and Statements\nThe if() statement can almost be thought of as a question with a yes/no answer:\n\nIs the fish’s weight below 100 grams?  (yes/no)\nIs the first runner’s speed greater than the second runner’s speed? (yes/no)\nIs the location Silver Lake? (yes/no)\nIs the temperature less than or equal to 30? (yes/no)\n\n \nExcept, instead of questions with yes/no answer, if() contains statements with TRUE/FALSE conditions:\n\nThe fish’s weight is below 100 grams. (TRUE/FALSE)\nThe first runner’s speed is greater than the second runner’s speed. (TRUE/FALSE)\nThe location is Silver Lake. (TRUE/FALSE)\nThe temperature is less than or equal to 30. (TRUE/FALSE)\n\n\n5.1 Structure of an if() statement\nThe basic structure of an if() statement is:\n\n\n\nif (some conditional statement is TRUE)\n{ \n   # Execute the code in this codeblock\n   # if the conditional statement is TRUE.\n   # note: All command within the codeblock are indented\n}\n# next lesson we will cover what happens if the conditional statement is FALSE.\n\n\nFigure 1: Structure of an if() statement\n\n\n\nInside the curly brackets ( {  } ) attached to the if() is a codeblock, or a series of commands, that gets executed if the statement is TRUE.  If the statement is FALSE, the codeblock is skipped.\n \nLet’s do a simple example where a random number is picked and an if() statement checks the random number:\n\n\n\nrandomTemp = sample(30:80, size=1);  # pick a random number between 30 and 80\n\nif (randomTemp &gt; 50)  # if randomTemp is greater than 50...\n{ \n  # ...execute the commands in this codeblock\n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\n# next lesson we will cover what happens if the conditional statement is FALSE.\n\n\nFigure 2: An example of an if() statement\n\n\n\n\n\n5.2 Alternate codeblock format\nThe curly brackets ( {  } ) designate the beginning and the end of the codeblock.  There are many ways to space the curly brackets but only two methods that are generally accepted in the programming world:\n\nFigure 2 where the curly brackets are on their own line and lined up at the same level as the if() and all code inside is indented\nFigure 3 where the start bracket is on the same line as the if() statement – everything else is the same as the first example\n\n\n\n\nif (randomTemp &gt; 50)  { # if randomTemp is greater than 50...\n  # ...execute the commands in this codeblock\n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\n# next lesson we will cover what happens if the conditional statement is FALSE.\n\n\nFigure 3: Alternate structure of an if() statement\n\n\n\nI prefer the first method because it makes it easier for me to visualize the hierarchy of the codeblocks and easier to comment. You are required to use one of these two methods in this class.\n \nExtension: Curly bracket placement",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#if-statements",
    "href": "lessons/1-08_Conditional_Operations.html#if-statements",
    "title": "1-08: Conditional Operations",
    "section": "6 If() statements",
    "text": "6 If() statements\nThe conditional statement inside the parentheses of the if() contains at least two values being compared with a conditional operation:\nif( fishWeight «&lt;» 100 )                # is greater than\nif( runner1Speed «&gt;» runner2Speed)      # is less than\nif( location «==» \"Silver Lake\" )       # is equal to\nif( temperature «&lt;=» 30 )               # is less than or equal to\nA conditional operator does two things:\n1) It compares the two values on both sides of the operator. \n2) It outputs either TRUE or FALSE based on results of the comparison.\nNote: TRUE/ FALSE statements are often called Boolean statements\n\n6.1 Conditional Operators in R\nThere are six conditional operators in programming:\n\n\n\n\n\n\n\nOperator\nMeaning\n\n\n\n\n==\nequal to\n(easily confused with the assignment operator, =)\n\n\n!=\nnot equal to\n(reverses the logic of ==)\n\n\n&gt;=\ngreater than or equal to\n\n\n&lt;=\nless than or equal to\n\n\n&gt;\ngreater then (only)\n\n\n&lt;\nless than (only)\n\n\n\nNote: &gt;=, &lt;=, &gt;, and &lt; operators are usually used to compare two numeric values. However they can be used to compare string values.\nExtension: Greater than and less than on strings\n\n\n6.2 Set up conditional operators\nThe following if statements all compare two values using a conditional operator:\nif( fishWeight «&lt;» 100 )\n{\n  # code that gets executed if fishWeight &lt; 100\n}\nif( runner1Speed «&gt;» runner2Speed )\n{\n  # code that gets executed if runner1Speed &gt; runner2Speed\n}\nif( location «==» \"Silver Lake\" )\n{\n  # code that gets executed if location == \"Silver Lake\"\n}\nif( temperature «&lt;=» 30)\n{\n  # code that gets executed if temperature &lt;= 30\n}\nNote: A single Conditional Operators compares two values (e.g., location == “Silver Lake”).  In a future lesson, we will learn how to deal with more complex conditions (e.g., how to check if location is “Silver Lake” or “Round Lake”).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#using-if-statements",
    "href": "lessons/1-08_Conditional_Operations.html#using-if-statements",
    "title": "1-08: Conditional Operations",
    "section": "7 Using if() statements",
    "text": "7 Using if() statements\nTo set up the script to use if() statements we will:\n\nread in the data from twoWeekWeatherData.csv\nsave the highTemp and noonCondition columns to vectors\n\n### read in data from twoWeekWeatherData.csv\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                       sep=\",\",\n                       header=TRUE, \n                       stringsAsFactors = FALSE);  \n  \n### Extract the highTemps column from the data frame -- save it to a variable\nhighTemps = weatherData$highTemp;\nnoonCond = weatherData$noonCondition;\nOur first example will check three value in highTemps (3rd, 4th, and 5th) and see which of them are greater than 50. \ncat(\"---------\\nChecking highTemps 3, 4, and 5 to see which are &gt; 50:\\n\");\n\nif(highTemps[3] &gt; 50)\n{\n  cat(\"  high temp 3 is greater than 50\\n\");\n}\nif(highTemps[4] &gt; 50)\n{\n  cat(\"  high temp 4 is greater than 50\\n\");\n} \nif(highTemps[5] &gt; 50)\n{\n  cat(\"  high temp 5 is greater than 50\\n\");\n}\nOnly the cat() in the first codeblock (highTemps[3] &gt; 50) was executed because highTemps[3] was the only value greater than 50. The second and third codeblocks were ignored.\nChecking highTemps 3, 4, and 5 to see which are &gt; 50:\n  high temp 3 is greater than 50\nNote: This is an efficient way to check multiple values. The more efficient way is using for().Extension: Checking all values in a vector (for loops)\n \nExtension: Removing curly brackets in if() statements\n\n7.1 Using all 6 conditional operators\nThe above example used ( &gt; ) to compare the values in highTemps to the value 50.\n \nLet’s use all six conditional operator to compare highTemp[2], which is 50, to the value 50:\ncat(\"\\n---------\\nChecking high temp 2 using all 6 conditional operators:\\n\");\n\nif(highTemps[2] &gt;= 50)\n{\n  cat(\"  high temp is greater than or equal to 50\\n\")\n}\nif(highTemps[2] &lt;= 50)\n{\n  cat(\"  high temp is less than or equal to 50\\n\")\n}\nif(highTemps[2] &gt; 50)\n{\n  cat(\"  high temp is greater than 50\\n\")\n}\nif(highTemps[2] &lt; 50)\n{\n  cat(\"  high temp is less than 50\\n\")\n}\nif(highTemps[2] == 50)\n{\n  cat(\"  high temp is equal to 50\\n\")\n}\nif(highTemps[2] != 50)\n{\n  cat(\"  high temp is not equal to 50\\n\")\n}\nIn the Console, we see that three of the conditional statement passed because highTemps[2] is &gt;=, &lt;=, and == 50:\nChecking high temp 2 using all 6 conditional operators:\n  high temp is greater than or equal to 50\n  high temp is less than or equal to 50\n  high temp is equal to 50",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#conditional-operators-with-charactersstrings",
    "href": "lessons/1-08_Conditional_Operations.html#conditional-operators-with-charactersstrings",
    "title": "1-08: Conditional Operations",
    "section": "8 Conditional Operators with characters/strings",
    "text": "8 Conditional Operators with characters/strings\nWe are going to use conditional operators on the values in the noonCondition vector.  The noonCondition vector consists of character values, or, as they are more commonly called, string values (labelled chr in the Environment tab).  Since the value is a string/chr, we need to compare it to a value in quotes\n \nThe following code will check the second value in noonCond using the equal ( == ) condition and the not equal to ( != ) condition:\ncat(\"\\n---------\\nCheck to see the noon condition on the day 2:\\n\");\n\n# checking the second noonCond, which is \"Cloudy\"\nif(noonCond[2] == \"Cloudy\")  # noonCond[2] is \"Cloudy\"\n{\n  cat(\"  Day was cloudy\\n\");\n}\nif(noonCond[2] != \"Sunny\")   # noonCond[2] is not \"Sunny\"\n{\n  cat(\"  Day was not Sunny\\n\")\n}\nIn the Console, we see that noonCond[2] was equal to “Cloudy” and not equal to “Sunny”:\nCheck to see the noon condition on the day 2:\n  Day was Cloudy\n  Day was not Sunny\nWe can use all same six conditional operators to compare characters/strings – but only ( == ) and ( != ) are commonly used.  Extension: Greater than and less than on strings\n\n8.1 Quotes around numeric and string values\nWhen we compared a numeric value within a vector to a number we do not use quotes:\nif(highTemps[2] &gt;= 50)\nBut, when we compare a string/character value within a vector to a string we need quotes around the latter:\nif(noonCond[2] == \"Cloudy\")\nIf we do not use quotes then R thinks there is some variable named Cloudy and you will get an object ‘Cloudy’ not found error:\nif(noonCond[2] == Cloudy)  # error because there is no variable (Object) named Cloudy\nRemember that, in R, a variable name cannot start with a number. This means that a number is unambiguously not a variable.\n \nHowever, you can put quotes around a number:\n  if(highTemps[2] &gt;= \"50\")  # this will often give a wrong answer...\nThis change the number 50 to the two characters: “5” and “0”.  Coincidentally, the if() statement above is also TRUE, but for the wrong reason.  Extension: Numbers as Characters\n\n\n8.2 Case counts with strings\nWhen comparing two strings, any difference between the two strings means they are not equal (so, == is FALSE and != is TRUE).  This includes capital and lowercase letters.\n \nnoonCond[2] is “Cloudy” but “Cloudy” is not the same as “cloudy”:\ncat(\"\\n---------\\nChecking same condition but changed 'Cloudy' to 'cloudy':\\n\");\n\nif(noonCond[2] == \"cloudy\") # This is FALSE because of the lowercase c\n{\n  cat(\"  Day was cloudy\\n\");\n}\nif(noonCond[2] != \"cloudy\") # This is TRUE\n{\n  cat(\"  Day was NOT cloudy\\n\"); \n}\nAnd in the Console we see that “Cloudy” does not equal “cloudy”:\nChecking same condition but changed 'Cloudy' to 'cloudy':\n  Day was NOT cloudy",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#checking-other-columns",
    "href": "lessons/1-08_Conditional_Operations.html#checking-other-columns",
    "title": "1-08: Conditional Operations",
    "section": "9 Checking other columns",
    "text": "9 Checking other columns\nMany times, when we are checking values within a data frame, we want to know more about other values within that row.  In the case of the weatherData data frame, these are the weather readings that occurred on the same day:\ncat(\"\\n---------\\nOutputting information from another column:\\n\");\nif(noonCond[2] == \"Cloudy\")   # checking if the day was cloudy\n{\n  cat(\"  Day was Cloudy\");\n  cat(\" and the high temperature that day was\", highTemps[2], \"\\n\");\n}\nOutputting information from another column:\n  Day was Cloudy and the high temperature that day was 50",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#sec-embedded-if",
    "href": "lessons/1-08_Conditional_Operations.html#sec-embedded-if",
    "title": "1-08: Conditional Operations",
    "section": "10 if() within if()",
    "text": "10 if() within if()\nWe often want to check multiple conditions and one way to do this is to embed an if() statement within an if() statement.\n \nFor instance, if the condition is cloudy, we might want to make a second check on the temperature for that day:\nif(noonCond[2] == \"Cloudy\")   # checking if the day was cloudy\n{\n  # the following if statements are only checked if conditions are cloudy\n  if( highTemps[2] &gt; 60 )\n  {\n    cat(\"Still nice enough to go out!\");\n  }\n  if( highTemps[2] &lt; 60 )\n  {\n    cat(\"Best to stay indoors\");\n  }\n}\nThe two inner if() statements (checking highTemps) are inside a codeblock that is only checked if the outer if() statement (checking noonCond) is TRUE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#application",
    "href": "lessons/1-08_Conditional_Operations.html#application",
    "title": "1-08: Conditional Operations",
    "section": "11 Application",
    "text": "11 Application\nAll of the following code should be in one script file.\nA) Using if(), find which of the first five days had at least 1 inch of rain.  For those days, output to the Console the high and low temperature.\nNote: this is an inefficient way to do the problem – the more efficient way is for loops, which we will do in a couple lessons.\n \nB) Using if(), find which of the last five days had a low temperature that was 40 degrees or less.  For those days output date to the Console. \n\nC) Use sample() to pick a random temperature from 40-80 (make sure you save the value to a variable)\n \nD) Use sample() to pick a random weather condition from these four choices: “Cloudy”, “Sunny”, “Rainy”, “Foggy”\nsample(x=c('a', 'b', 'c'), size=1) # randomly picks a, b, or c\nE) Using if() with embedded if() (Section 10) output a single message to the Console for each of these four scenarios:\n\nrandom temperature (part C) is more than or equal to 60 and the weather condition (part D) is sunny\nrandom temperature (part C) is less than 60 and the weather condition (part D) is sunny\nrandom temperature (part C) is more than or equal to 60 and the weather condition (part D) is not sunny\nrandom temperature (part C) is less than 60 and the weather condition (part D) is not sunny\n\n \nThe four scenario are mutually exclusive (do not overlap each other) and complete (cover every possible scenario). \nIf you do this right, then exactly one of the four messages will appear every time you run your script.\n \n \nSave the script as app1-08.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n11.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-curly-bracket-placement",
    "href": "lessons/1-08_Conditional_Operations.html#extension-curly-bracket-placement",
    "title": "1-08: Conditional Operations",
    "section": "12 Extension: Curly bracket placement",
    "text": "12 Extension: Curly bracket placement\nThe curly brackets attached to a if() statement are used to encapsulate the codeblock that gets executed when the conditional statement is TRUE. All the curly brackets have to do is begin and end the codeblock, so there are many ways you could place the curly brackets.\n \nHere are three bad ways that work:\nif (randomTemp &gt; 50) «{» cat(\"The temperature is\", randomTemp);\ncat(\"warm enough to go outside\\n\");  «}»\nif (randomTemp &gt; 50)\n      «{» \ncat(\"The temperature is\", randomTemp);\ncat(\"warm enough to go outside\\n\");\n      «}»\nif (randomTemp &gt; 50)             «{»\n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");    \n  \n                     «}»\nThe three if() statement above would all execute correctly because the codeblock is in between the curly brackets.  But, in programming there are standards to how curly brackets get placed.  The two main standards are below, and you need to use one of these two in this class:\n# standard 1\nif (randomTemp &gt; 50)\n{ \n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\n\n# standard 2\nif (randomTemp &gt; 50)  { \n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\nIn both these standards, the commands inside the codeblock are also indented – this makes it easier to see that the code that is attached to the if() statement.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-removing-curly-brackets-in-if-statements",
    "href": "lessons/1-08_Conditional_Operations.html#extension-removing-curly-brackets-in-if-statements",
    "title": "1-08: Conditional Operations",
    "section": "13 Extension: Removing curly brackets in if() statements",
    "text": "13 Extension: Removing curly brackets in if() statements\nThe three if() statements below have only one command in the codeblock: \nif(highTemps[3] &gt; 50)\n{\n  cat(\"  high temp 3 is greater than 50\\n\");\n}\nif(highTemps[4] &gt; 50)\n{\n  cat(\"  high temp 4 is greater than 50\\n\");\n} \nif(highTemps[5] &gt; 50)\n{\n  cat(\"  high temp 5 is greater than 50\\n\");\n}\nThe curly brackets are not needed when there is only one command in a codeblock. The following code will execute correctly:\nif(highTemps[3] &gt; 50)\n  cat(\"  high temp 3 is greater than 50\\n\");\nif(highTemps[4] &gt; 50)\n  cat(\"  high temp 4 is greater than 50\\n\");\nif(highTemps[5] &gt; 50)\n  cat(\"  high temp 5 is greater than 50\\n\");\nBut, that is because there is only one command attached to each if() statement.  The curly brackets are always needed if there is more than one command. This author would not recommend removing brackets if you are a beginning, it can lead to problems down the road.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-greater-than-and-less-than-on-strings",
    "href": "lessons/1-08_Conditional_Operations.html#extension-greater-than-and-less-than-on-strings",
    "title": "1-08: Conditional Operations",
    "section": "14 Extension: Greater than and less than on strings",
    "text": "14 Extension: Greater than and less than on strings\nGreater than and less than conditional operator do work on strings.  If the strings only have letters from the English alphabet, then &gt; and &lt; will do an alphabetical comparison between the values.  In this case, &gt; means “later in the alphabet”.  So, “C” &gt; “B”, “D” &gt; “C”…\n&gt; \"Frank\" &gt; \"Charlie\"\n[1] TRUE\n&gt; \"Bob\" &gt; \"Charlie\"\n[1] FALSE\n&gt; \"Bob\" &gt; \"Barb\"\n[1] TRUE\nIf you use characters that are not in the English alphabet then R will look at the Unicode character code.  Unicode character codes are unique numbers assigned to every imaginable character.  The English letters start at 65 in the Unicode chart.  The main use for Unicode character codes is that they allow someone to use and output characters that are not on your keyboard like the ζ , which is character number 950. \nEven though &gt; and &lt; works on all characters, it has limited usefulness.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-numbers-as-characters",
    "href": "lessons/1-08_Conditional_Operations.html#extension-numbers-as-characters",
    "title": "1-08: Conditional Operations",
    "section": "15 Extension: Numbers as Characters",
    "text": "15 Extension: Numbers as Characters\nA common problem in R is that variables that look like numbers can really be a string/character.\n \nIf you add these variables to your script:\nnum1 = 50;\nnum2 = \"50\";\nThen num1 is an integer but num2 is a string/character.\nIn other words, num1 is 50 and num2 is the character “5” followed by the character “0”.\n \nThis means the mathematical and conditional operators will not work on num2 as you would expect:\n\n\n\n&gt; num2 &gt; 30\n[1] TRUE\n&gt; num2 &gt; 70\n[1] FALSE\n&gt; num2 &gt; 300\n[1] TRUE\n&gt; num2 &gt; 7\n[1] FALSE\n\n\nFigure 4: Conditional operators on numbers that are really string/characters: num2 = “50”\n\n\n\nSince num2 is “50”, the first two seem correct, “50” is greater than 30 and not greater than 70.\n \nBut adding or taking away “0” does not change the result of the conditional operator so “50” is still greater than 300 and not greater than 7.\n \nThis happens because R does not think of “50” as a number but as two characters, a “5” and a “0”.  And since R sees “50” as two character, R is making an alphabetical comparison of the “numbers”:\n\n\n\n&gt; num2 &gt; \"30\"\n[1] TRUE\n&gt; num2 &gt; \"70\"\n[1] FALSE\n&gt; num2 &gt; \"300\"\n[1] TRUE\n&gt; num2 &gt; \"7\"\n[1] FALSE\n\n\nFigure 5: Conditional operators on strings that have numbers in them\n\n\n\nAlphabetic comparisons start with the leftmost character so “Frank” is greater than “Charlie” and not greater than “Harry”. Using this logic, R sees “5” as greater than “3” and not greater than “7”.  It does not matter what, or how many, “numbers” come afterwards\n \nWhen doing an alphabetical comparison, if the first character is different then you do not need to look beyond the first character when doing a conditional operator.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-checking-all-values-in-a-vector-for-loops",
    "href": "lessons/1-08_Conditional_Operations.html#extension-checking-all-values-in-a-vector-for-loops",
    "title": "1-08: Conditional Operations",
    "section": "16 Extension: Checking all values in a vector (for loops)",
    "text": "16 Extension: Checking all values in a vector (for loops)\nThis is a preview of things to come.  It is a pain to code an if() statement for every value in a vector – especially if there are hundreds or thousands of values.  For this reason if() statements are often found embedded within for loops.  The for loop’s job is to cycle through a set of values with just one command:\n# This for loop will execute 14 times with i=1:14\nfor(i in 1:14) \n{\n  # only one if() is needed to check all 14 values in the vector\n  if(highTemps[i] &gt; 50)\n  {\n    cat(\"  high temp\", i, \"is greater than 50\\n\");\n  }\n}\nAnd the if() statement does the check on all 14 values, with 9 of the 14 values bring greater than 50:\nhigh temp 1 is greater than 50   \nhigh temp 3 is greater than 50   \nhigh temp 6 is greater than 50   \nhigh temp 7 is greater than 50  \nhigh temp 8 is greater than 50   \nhigh temp 9 is greater than 50   \nhigh temp 12 is greater than 50   \nhigh temp 13 is greater than 50   \nhigh temp 14 is greater than 50",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html",
    "href": "lessons/1-10_For_Loops.html",
    "title": "1-10: For Loops",
    "section": "",
    "text": "Console in R format or no code format??",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#purpose",
    "href": "lessons/1-10_For_Loops.html#purpose",
    "title": "1-10: For Loops",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nShow how to perform if-else statements on multiple values in a vector using for loops",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#questions-about-the-material",
    "href": "lessons/1-10_For_Loops.html#questions-about-the-material",
    "title": "1-10: For Loops",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#four-structures-in-programming",
    "href": "lessons/1-10_For_Loops.html#four-structures-in-programming",
    "title": "1-10: For Loops",
    "section": "3 Four structures in programming",
    "text": "3 Four structures in programming\nAs mentioned in the second lesson on variables, there are basically 4 main structures that cover almost every aspect of programming:\n\nVariables\nIf-Else Statements\nFor Loops\nFunctions\n\nIn the next three lessons we cover for loops.  One of the main benefits of for loops (and functions) in programming is they it generalize code.  for loops allow you to write code once and execute the code on multiple values.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#conditional-statements-on-multiple-values",
    "href": "lessons/1-10_For_Loops.html#conditional-statements-on-multiple-values",
    "title": "1-10: For Loops",
    "section": "4 Conditional statements on multiple values",
    "text": "4 Conditional statements on multiple values\nIn the last couple of lessons, we used conditional statements on values in a vector (e.g., asking about the weather conditions or the high temperatures on a specific day) and then output a message to the Console based on the results of the conditional statement.\n \nBut, when working with data, we rarely look at just one value – usually, we are looking at a vector of values (e.g., 365 high temperatures for a year) and we want to perform the same conditional statement on each of the values. In this lesson and the next lesson, we will learn to use conditional statements on multiple values – using for loops with embedded if-else statements.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#repeating-commands",
    "href": "lessons/1-10_For_Loops.html#repeating-commands",
    "title": "1-10: For Loops",
    "section": "5 Repeating commands",
    "text": "5 Repeating commands\nA for loop is used whenever you want to execute a codeblock multiple times.  The most basic example is repeating the exact same output a certain number of times:\n\n\n\nfor(i in 1:5)  # repeat 5 times\n{\n  cat(\"Hello, World\\n\");\n}\n\n\nFigure 1: The most basic for loop – repeating an output command multiple times\n\n\n\nAnd the Console tab will show 5 Hellos:\nRepeating the same code multiple times:\nHello, World\nHello, World\nHello, World\nHello, World\nHello, World\n\n5.1 The codeblock attached to the for loop\nJust like if-else statements, for loops have an attached codeblock, designated by curly brackets ( {  } ).  If-else statements execute the codeblock conditionally based on the conditional statement in the parentheses and for loops executes a codeblock multiple times.  The number of times for loops execute their attached codeblocks is dependent upon the sequence inside the parentheses.  In Figure 1, the sequence is 1:5, and since the sequence has 5 values, the codeblock attached will execute 5 times. \n \nNote: if the sequence was 15:19, which has 5 values, the attached codeblock will execute 5 times.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#repeated-code-on-values",
    "href": "lessons/1-10_For_Loops.html#repeated-code-on-values",
    "title": "1-10: For Loops",
    "section": "6 Repeated code on values",
    "text": "6 Repeated code on values\nFigure 1 repeats the exact same code 5 times. However, you rarely want to repeat the exact same code – usually, you want to repeat similar code.  For instance, you might want to say hello to 5 different people given by a vector:\nhelloVector = c(\"Ann\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\");\nTo do this we cycle through every value in the vector,  which is helloVector[1], helloVector[2], helloVector[3], helloVector[4], and helloVector[5].\n \nTo cycle through the values we set the variable (often called i) in the for loop to the values 1 through 5 and then use that variable inside the codeblock for the for loop. i, in this example, indexes helloVector each type the for loop cycles.\n\n\n\nfor(i in 1:5)\n{\n  # i takes on the values 1 through 5 through the 5 cycles of the for loop\n  cat(\"Hello,\" helloVector[i], \"\\n\");\n}\n\n\nFigure 2\n\n\n\nHello, Ann \nHello, Bob \nHello, Charlie \nHello, Dave \nHello, Eve",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#the-index-variable-in-a-for-loop",
    "href": "lessons/1-10_For_Loops.html#the-index-variable-in-a-for-loop",
    "title": "1-10: For Loops",
    "section": "7 The index variable in a for loop",
    "text": "7 The index variable in a for loop\nThe true power of the for loops lies in the indexing variable, which is often named i.  Note: the indexing variable can be given any name – it’s just common to call it i.  The indexing variable cycles through the sequence each time the for loop executes. This means the indexing variable can be used to modify the code every time the codeblock is executed.\n\n7.1 The index variable as a counter\nLet’s look at the simplest of examples – using the indexing variable, i, as a counter:\n# Using the indexing variable i as a counter\nfor(i in 1:5) # repeat 5 times\n{\n  cat(\"The count is:\", i, \"\\n\");\n}\nThis outputs:\nUsing the indexing variable as a counter:\nThe count is: 1\nThe count is: 2\nThe count is: 3\nThe count is: 4\nThe count is: 5\nThe number of times the for loop cycles is the same as the number of values in the sequence. So, we can use a different sequence of 5 values…\ncat(\"---------\\nAny sequence of 5 number cycles the for loop 5 times:\\n\");\nfor(i in 15:19) # repeat 5 times\n{\n  cat(\"The count is:\", i, \"\\n\");\n}\n…and the for loop will still cycle 5 time.\nUsing the indexing variable as a counter:\nThe count is: 15\nThe count is: 16\nThe count is: 17\nThe count is: 18\nThe count is: 19\n\n\n7.2 Taking a step back: How a for loop cycles\nA for loops always consists of 3 things:\n\nAn indexing variable:  for(i in 1:5) \nA sequence of values: for(i in 1:5)\nA codeblock to execute: encapsulated by the { }\n\n \nThe sequence of values determines how many times the codeblock will cycle.  If there are 12 values in the sequence, then the for loop will cycle 12 times.\n \nFor each cycle, the indexing variable is set to a different value in the sequence.  The value of the indexing variable take will go in the same order as the sequence.\n \nSo, if the sequence is 12:8 (a backwards sequence with 5 values), then:\n\ni will be set to 12 the first time the codeblock cycles\ni will be set to 11 the first time the codeblock cycles\ni will be set to 10 the first time the codeblock cycles\ni will be set to 9 the first time the codeblock cycles\ni will be set to 8 the first time the codeblock cycles\n\n\n\n7.3 Changing the sequence\nThe for loop executes for every value in the sequence, and the index variable takes on the values in order.\n\n\n\n# Using a sequence that does not start with 1\nfor(i in 12:8) # 12, 11, 10, 9 ,8 (there are five values in the sequence)\n{\n  cat(\"The count is:\", i, \"\\n\");\n}\n\n\nFigure 3: Using a sequence that does not start with 1 in a for loop\n\n\n\nIn this case, the for loop will still execute 5 times, but i will take on values 12 down to 8:\nChanging the sequence numbers -- length is still 5:\nThe count is: 12\nThe count is: 11\nThe count is: 10\nThe count is: 9\nThe count is: 8\n\n\n7.4 Indexing variables and more complicated sequence\nYou do not have to name the index i, you can name it whatever you want.  For instance, we will be working with weather so day might be a more appropriate name for the indexing variable.\n \nIn this example we we use a more complicated sequence and change the name of the index variable to day:\n\n\n\nfor(day in seq(from=20, to=2, by=-3))  # 20, 17, 14, 11, 8, 5, 2 (seven values)\n{\n  cat(\"The count is:\", day, \"\\n\");\n}\n\n\nFigure 4: Using a more complicated sequence in a for loop\n\n\n\nUsing a more complicated sequence with seven values:\nThe count is: 20\nThe count is: 17\nThe count is: 14\nThe count is: 11\nThe count is: 8\nThe count is: 5\nThe count is: 2\nSo, in Figure 4, the codeblock cycles 7 times because there are 7 values in the sequence (20, 17, 14, 11, 8, 5, and 2).  Each time the codeblock cycles,  day is set to a different value in the sequence (going from the first value in the sequence to the last).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#indexing-values-inside-a-for-loop",
    "href": "lessons/1-10_For_Loops.html#indexing-values-inside-a-for-loop",
    "title": "1-10: For Loops",
    "section": "8 Indexing values inside a for loop",
    "text": "8 Indexing values inside a for loop\nMost examples so far use the index variable as a counter. The real power comes when you use the indexing variable to index values in a vector as we did in Figure 2. This is how we perform an if-else statement on every value in a vector.\n \nLet’s use the same data we have been using in the previous lessons:\n### read in data from twoWeekWeatherData.csv\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\",\n                       sep=\",\",\n                       header=TRUE);\n\n### Extract the highTemps column from the data frame -- save it to a variable\nhighTemps = weatherData$highTemp;\nnoonCond = weatherData$noonCondition;\nSince we want to go through every value in the vector, we need to know the size of the vector.  The easiest way to find the size of a vector is to use the function length():\nnumDays = length(highTemps);  # numDays is 14 (the number of values in highTemps)\nNow let’s use a for loop to output all of the highTemp values.  To do this we use the indexing variable, day, as the index for highTemp:\n\n\n\nfor(day in 1:numDays)  # numDays, in this case, is 14 (sequence is 1:14)\n{\n  cat(highTemp[day], \"\\n\");  # day will take the values 1-14\n}\n\n\nFigure 5: Using the indexing variable as an index for highTemp\n\n\n\nThe 14 values in the vector highTemps in order:\n57\n50\n54\n40\n39\n58\n60\n53\n55\n44\n39\n54\n61\n75\nIn the following example, we use the indexing variable day as both a counter and an index for noonCond:\n\n\n\nfor(day in 1:numDays)\n{\n  cat(day, \") \", noonCond[day], \"\\n\", sep=\"\");\n}\n\n\nFigure 6: Using indexing variable as a counter and an index for noonCond\n\n\n\nUsing indexing variable as a counter and an index for noonCond:\n1) Cloudy\n2) Cloudy\n3) Sunny\n4) Rain\n5) Fog\n6) Sunny\n7) Sunny\n8) Cloudy\n9) Rain\n10) Rain\n11) Snow\n12) Sunny\n13) Sunny\n14) Sunny\n\n8.1 Making code more extensible\nIn the code in Figure 5 and Figure 6,  we already know that the number of values in the vector is 14 so we could just write:\nfor(day in 1:14)\n{\n  cat(highTemp[day], \"\\n\");\n}\nBut this code will only work if the data frame does not change size.  In general, you want to make your code as generic as possible, which means using variables instead of fixed numbers. When you make your code generic, you do not have to change the code when your data changes.  In Figure 5, numDays will automatically adjust to the size of the vector.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#if-else-within-a-for-loop",
    "href": "lessons/1-10_For_Loops.html#if-else-within-a-for-loop",
    "title": "1-10: For Loops",
    "section": "9 If-else within a for loop",
    "text": "9 If-else within a for loop\nWe usually have a lot of questions that we want to ask of the values we are looking at. In other words, we want to use if-else statements within the for loops.  Let’s first ask if each day was sunny or not and output the answer to the Console.\n\n\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    cat(\"day \", i, \" was sunny\\n\", sep=\"\");\n  }else\n  {\n    cat(\"day \", i, \" was not sunny\\n\", sep=\"\");\n  }\n}\n\n\nFigure 7: Using if-else statements in a for loop\n\n\n\nUsing if-else statements within a for loop:\nday 1 was not sunny\nday 2 was not sunny\nday 3 was sunny\nday 4 was not sunny\nday 5 was not sunny\nday 6 was sunny\nday 7 was sunny\nday 8 was not sunny\nday 9 was not sunny\nday 10 was not sunny\nday 11 was not sunny\nday 12 was sunny\nday 13 was sunny\nday 14 was sunny",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#checking-a-subset-of-values",
    "href": "lessons/1-10_For_Loops.html#checking-a-subset-of-values",
    "title": "1-10: For Loops",
    "section": "10 Checking a subset of values",
    "text": "10 Checking a subset of values\nWe can use any type of sequence in the for loop so that we are only checking some of the values in the vector:\n\n\n\nfor(i in c(8,2,13))\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    cat(\"day \", i, \" was sunny\\n\", sep=\"\");\n  }else\n  {\n    cat(\"day \", i, \" was not sunny\\n\", sep=\"\");\n  }\n}\n\n\nFigure 8: Using the sequence to subset the values\n\n\n\nUsing a sequence to subset the values:\nday 8 was not sunny\nday 2 was not sunny\nday 13 was sunny",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#state-variables-and-for-loops",
    "href": "lessons/1-10_For_Loops.html#state-variables-and-for-loops",
    "title": "1-10: For Loops",
    "section": "11 State variables and for loops",
    "text": "11 State variables and for loops\nThe code in Figure 7 is displaying specific information about each value in a vector.  This would get quickly out of hand if there are thousands of values!  We usually want more general information about a vector – for instance, we might want to know how many days were sunny?\n \nFinding more general information about the values in a vector requires the introduction of the last component of most for loops: the state variable.  The state variable is a variable that maintains a running tab of some value through each cycle of the for loop.\n \nLet’s count the number of sunny days using a for loop.  To do this we need to:\n\ncreate a state variable that holds the number of sunny days (this will start at 0)\nhave a for loop that cycles through every value in the noonCond vector\ninclude an if() statement asking if the day is sunny\nhave a command to increase the state variable by 1 if it is sunny\n\n \nNote: The state variable must be declared outside of the for loop.  Think about why this is true – it is the first question in the Application.\n \n\n\n\nsunnyDays = 0; # state variable -- will hold the count of cloudy days\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")  # was the day sunny\n  {\n    sunnyDays = sunnyDays +1;   # it was -- increase sunnyDays by 1\n  }\n  # there is no else here -- we don't care about non-sunny days\n}\n\n\nFigure 9: Using a state variable to calculate how many sunny days there was in noonCond\n\n\n\nAnd we can look in the Environment tab to see what the final value of sunnyDays was:\nsunnyDays:   6\nAnd if we look at the noonCond vector, we see there are 6 sunny days:\n&gt; noonCond\n [1] \"Cloudy\" \"Cloudy\" \"Sunny\"  \"Rain\"   \"Fog\"    \"Sunny\"  \"Sunny\"  \"Cloudy\"\n [9] \"Rain\"   \"Rain\"   \"Snow\"   \"Sunny\"  \"Sunny\"  \"Sunny\"\n\n11.1 The state variable\nsunnyDays does a lot of heavy lifting in Figure 9.  We initially set sunnyDays to 0 because 0 is the default value, or the value if the condition (noonCond[i] == \"Sunny\") fails every time.\n \nWhenever the value in noonCond is “Sunny” the following code is executed:\n   sunnyDays = sunnyDays +1;\nThis code works because the right side of the equation is always evaluated first.\n \nSo, R will first calculate: sunnyDays +1\n\nIf sunnyDays is 0, then sunnyDays +1 evaluates to 1\n\n \nThen R assigns the value on the right-side to the variable on the left, which is sunnyDays. \n\nsunnyDays is assigned the value of 1.\n\n \nIf sunnyDays is 4, then sunnyDays +1 evaluates to 5, and sunnyDays is assigned the value of 5.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#application",
    "href": "lessons/1-10_For_Loops.html#application",
    "title": "1-10: For Loops",
    "section": "12 Application:",
    "text": "12 Application:\n1) In Comments: Why must the state variable be declared outside the for loop as opposed to inside the for loop?  Think about what happens to the state variable every time the for loop cycles if it is declared inside the for loop.  Put the answer in comments at the top of your script.\n \n2) Create one for loop that outputs the (a) square (2nd power), cube (3rd power), and cube root (1/3rd power) for the numbers 1 through 10.\n \n3) Using a for loop, find out how many days had high temperatures less than 50.\n \n4) Using a for loop, find out how many even days were cloudy\n \n5) Using a for loop, find out how many of the last 8 days were cloudy.\n \n6) In comments: If you are using a for loop to add up all values in a vector then what value should your state variable start with? Why?\n \n7) Challenge: Using for loops, find the total precipitation (i.e., add up all the precipitation values).  Hint: you keep adding each new precipitation value to the total precipitation.\n \n \nSave the script as app1-10.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n12.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#purpose",
    "href": "lessons/1-12_MultipleConditions.html#purpose",
    "title": "1-12: Multiple Conditions",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCheck for multiple conditions on variables",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#questions-about-the-material",
    "href": "lessons/1-12_MultipleConditions.html#questions-about-the-material",
    "title": "1-12: Multiple Conditions",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nThis lesson data has two new columns in it compared to the previous lesson’s data – so 14 obs. of 7 variables (instead of 5).  The new columns (noonCondMessy and precipBad) are copies of the previous columns with some issues added that are addressed in this lesson.\n\n\n\n\n\n\nFigure 1: The new weatherData data frame with two new columns\n\n\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#logical-operators-and-or",
    "href": "lessons/1-12_MultipleConditions.html#logical-operators-and-or",
    "title": "1-12: Multiple Conditions",
    "section": "3 Logical Operators: AND (&), OR (|)",
    "text": "3 Logical Operators: AND (&), OR (|)\nIn this lesson we are going to learn how to combine conditional statements in if() statements using two new operators: AND, OR.  The symbol for the AND operator is the ampersand ( & ) and the symbol for the OR operator is the vertical pipe ( | ).  For situations where you are checking one value at a time, the single and double operators have the same functionality.  We will cover the other situation later in this lesson.\n \nExtension: & vs && and | vs ||\n \nThe AND operator combines two conditional statements into one conditional statement with the rule:\n\nif both of the conditional statements are TRUE then the whole conditional statement is TRUE\n\nif (condition1 & condition2)\n{\n   # Execute the code between these curly brackets\n   #   if both condition1 and condition2 are TRUE\n}\nThe OR operator combines two conditional statements into one conditional statement with the rule:\n\nif either of the conditional statements are TRUE then the whole conditional statement is TRUE\n\nif (condition1 | condition2)\n{\n   # Execute the code between these curly brackets\n   #   if either condition1 or condition2 is TRUE\n}\n\n3.1 Operators we have learned so far\n\n\n\nTable 1: All of the operators taught in the class so far\n\n\n\n\n\n\n\n\n\n\nOperator Type\nPurpose\nR Symbols\n\n\n\n\nAssignment\nassign a value to a variable\n=, &lt;-, -&gt;\n\n\nMathematical\nPerform a mathematical operation on a numeric value\n+, -, *, /, ^\n\n\nSubset\nSubset a vector\n[ ], $\n\n\nConditional\nCompare two values\n==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n\nLogical\nCombine conditions\n&, &&, |, ||",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#combining-conditional-statements-logical-operators",
    "href": "lessons/1-12_MultipleConditions.html#combining-conditional-statements-logical-operators",
    "title": "1-12: Multiple Conditions",
    "section": "4 Combining conditional statements (logical operators)",
    "text": "4 Combining conditional statements (logical operators)\nIn the last lesson we started by asking two questions about noonCond that both had one condition: \n\nIs the day sunny? \nIs the day rainy?\n\n#### From last lesson\nsunnyDays = 0; # state variable -- will hold the count of sunny days\nrainyDays = 0; # state variable -- will hold the count of rainy days\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    sunnyDays = sunnyDays +1; # increases sunnyDays by 1\n  # We use else if here because we know \"Sunny\" and \"Rain\" are mutually exclusive\n  }else if(noonCond[i] == \"Rain\")\n  {\n    rainyDays = rainyDays +1; # increases rainyDays by 1\n  }\n}\nAnd the answer was:\nsunnyDays:   6\nrainyDays:   3\n\n4.1 Using the OR operator\nWe can also combine the two conditional statements and ask: Is the day sunny OR  rainy?\n \nJust replace OR with the symbol that represents OR, which is |:\n  if(noonCond[i] == \"Sunny\" | noonCond[i] == \"Rain\")\nPut this in the script and it will count days both sunny and rainy days:\n\n\n\nsunnyOrRainyDays = 0\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\" | noonCond[i] == \"Rainy\")\n  {\n    sunnyOrRainyDays = sunnyOrRainyDays +1;\n  }\n}\n\n\nFigure 2: Using logical operator | to test two conditions\n\n\n\nsunnyOrRainyDays is the addition of sunny (6) and rainy (3) days\nsunnyOrRainyDays:   9\n\n\n4.2 Conditions must be explicit\nIn programming we need to be explicit when using multiple conditional statement:\n  if(noonCond[i] == \"Sunny\" | noonCond[i] == \"Rainy\")  # this is correct\nIn English, it makes sense to ask: Is the day sunny or rainy?\n \nAnd, naively, the code for this sentence would look like this:\n  if(noonCond[i] == \"Sunny\" | \"Rain\")  # this in incorrect\nIf you do this, you will get the error:\nError in noonCond[i] == “Sunny” | “Rain” : invalid ‘y’ type in ‘x | y’\nwhere x represent noonCond[i] == \"Sunny\" and y represents \"Rain\"\n \nThe error is telling you that “Rain” (the invalid ‘y’) is not a conditional statement.  Both conditions (‘x | y’) must be explicitly written out (i.e., both must have a conditional operator with a value on both sides).\n\n\n4.3 More than 2 conditions\nYou can also use the OR operator to string together multiple conditional statements.\n \nWe will use the new column in our data, called noonCondMessy in which the weather conditions are not consistently spelled – as often happens when people are manually inputting data:\nnoonCondMess = weatherData$noonCondMessy;\nLooking at the value in noonCondMess show that there are multiple versions of “sunny”:\n&gt; noonCondMess\n[1] \"clouds\" \"Cloudy\" \"sun\" \"rainy\" \" fog\" \"Sunny\" \"sunny\"\n[8] \"cloudy\" \"Rain\" \"RAIN\" \"Snow\" \"SUNNY\" \"Sun\" \"sun\"\nWe will use multiple OR operators to check for four different versions of “sunny”:\n\n\n\nsunnyDaysMess = 0; # state variable -- will hold the count of sunny days\n\nfor(i in 1:numDays)\n{\n  # check for different spellings\n  if(noonCondMess[i] == \"Sunny\" | noonCondMess[i] == \"sunny\" |\n     noonCondMess[i] == \"sun\" | noonCondMess[i] == \"SUN\")\n  {\n    sunnyDaysMess = sunnyDaysMess +1;\n  }\n}\n\n\nFigure 3: Using OR operator to check for multiple spellings\n\n\n\nAnd, once again we get six:\nsunnyDays1:  6\nNote: This is a brute force method for finding multiple spellings. There are more robust way to check for different spelling using substrings and pattern recognition (i.e., substr() and grep()), topics we will touch on later in this class.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#the-and-operator",
    "href": "lessons/1-12_MultipleConditions.html#the-and-operator",
    "title": "1-12: Multiple Conditions",
    "section": "5 The AND operator",
    "text": "5 The AND operator\nThe OR operator says: if one condition is TRUE then the whole condition is TRUE\nThe AND operator says that ALL conditions need to be TRUE for the whole condition to be TRUE.\n \nThe AND operator can be used to check conditions in two different weather columns.\n \nFor example, you might want to know which days were warmer than 60 AND Sunny.\n\n\n\ngoOutDay = 0;\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &gt; 60 & noonCond[i] == \"Sunny\") \n  {\n    goOutDay = goOutDay +1;\n  }\n}\n\n\nFigure 4: Using AND operator to check conditions in two different columns\n\n\n\nThere were 2 days that were both over 60 and sunny:\ngoOutDays:   2\nNote: day 7 is 60 degrees and sunny but not counted here because the condition ( &gt; ) is greater than (but not equal to) 60\n\n5.1 The NOT EQUAL operator\nWe can reverse the conditions and check for non-sunny days that were colder than (or equal to) 50.\n \nIn other words we want highTemps &lt;= 50 AND noonCond != “Sunny”:\n\n\n\nstayInDay = 0;\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &lt;= 50 & noonCond[i] != \"Sunny\") \n  {\n    stayInDay = stayInDay +1;\n  }\n}\n\n\nFigure 5: Reversing the conditional statements from the last loop\n\n\n\nThere were 5 days that were below (or equal to) 50 and not sunny:\nstayInDays:    5\n\n\n5.2 Mutually exclusive if() statement\nSince the two if() statements above (Figure 4 and Figure 5) have mutually exclusive conditions (i.e., there are no situations where both can be TRUE), we can (and should) combine them into one if-else-if statement.  The following code is functionally the same but more efficient (i.e., faster):\n\n\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &gt; 60 & noonCond[i] == \"Sunny\")\n  {\n    cat(\"day\", i, \" good day to go out\\n\");\n  }else if(highTemps[i] &lt;= 50 & noonCond[i] == \"Rain\")\n  {\n    cat(\"day\", i, \" good day to stay in\\n\");\n  }\n}\n\n\nFigure 6: Checking mutually exclusive multiple conditions with an if-else-if structure\n\n\n\nThe 2 days that are good to go out and 5 that are not:\nday 2 good day to stay in\nday 4 good day to stay in\nday 5 good day to stay in\nday 10 good day to stay in\nday 11 good day to stay in\nday 13 good day to go out\nday 14 good day to go out",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#finding-ranges-of-numbers",
    "href": "lessons/1-12_MultipleConditions.html#finding-ranges-of-numbers",
    "title": "1-12: Multiple Conditions",
    "section": "6 Finding Ranges of numbers",
    "text": "6 Finding Ranges of numbers\nSo far when we has used conditional operators on numbers that are bounded on one side but go off to infinity of the other.\n\nhighTemp &gt; 60 means anything from 60 up to positive infinity\nhighTemp &lt; 50 means anything from 50 down to negative infinity\n\n \nBut, we often want to limit the range we are checking to something less than infinity!\n \nFor instance we might want all values between 50 and 60 (in this case, we will include 50 but not 60).\n \nIn other words, we want:\n\nvalues greater than or equal to 50 (highTemps &gt;= 50)\nAND values less than 60 (highTemps &lt; 60)\n\n \nIn order for the value to be between 50 and 60 both of the above conditional statements must be TRUE, so we use AND to combine the conditional statements:\n\n\n\nfor(i in 1:numDays)\n{\n  # the number is both greater than (or equal to) 50 and less than 60\n  if(highTemps[i] &gt;= 50 & highTemps[i] &lt; 60)\n  {\n    cat(\"It was \", highTemps[i], \"degrees on day \", i, \"\\n\");\n  }\n}\n\n\nFigure 7: Using AND operator to limit the range to values between two numbers\n\n\n\nThe 7 days between 50 and 60 (includes 50 but not 60):\nIt was 57 degrees on day 1\nIt was 50 degrees on day 2\nIt was 54 degrees on day 3\nIt was 58 degrees on day 6\nIt was 53 degrees on day 8\nIt was 55 degrees on day 9\nIt was 54 degrees on day 12\n\n6.1 Values outside a range\nSometimes we want to check for values outside an expected range – often to check for errors.  For instance, precipBad has some values that seem to be in error:\n&gt; precipBad\n[1] 0.010 0.005 0.040 1.110 0.120 0.000 «-0.005» «49.000» 0.450 0.300\n[11] 1.130 0.004 0.000 0.000\nSince rain is in inches, we are going to assume that any negative value (less than 0) or value above 10 is in error.\n \nIn this case we are looking for  precipBad values that are less than 0 OR greater than 10:\n\n\n\nprecipBad = weatherData$precipBad;\nfor(i in 1:numDays)\n{\n  # precipBad values less than 0 or greater than 10\n  if(precipBad[i] &lt; 0 | precipBad[i] &gt; 10)\n  {\n    cat(\"Day\", i, \"has a value of\" , precipBad[i], \"\\n\");\n  }\n}\n\n\nFigure 8: Checking for values beyond the expected range\n\n\n\nAnd we see the two days in precipBad that are in error:\nDay 7 has a value of -0.005\nDay 8 has a value of 49",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#sec-booleanVec",
    "href": "lessons/1-12_MultipleConditions.html#sec-booleanVec",
    "title": "1-12: Multiple Conditions",
    "section": "7 Boolean vectors",
    "text": "7 Boolean vectors\nUp until this point. we have been using conditional operators to check values individually.  We can also use conditional operators to check every value in a vector at once and create a TRUE/FALSE (Boolean) vector from the result.\n \nFor instance, we only might care about sunny days:\nsunnyDayBool = (noonCondition == \"Sunny\");\nOr, whether the day was both sunny and warm:\nniceDayBool = (highTemps &gt; 60 & noonCondition == \"Sunny\");\nOr, whether the was rain or snow:\nprecipBool = (precipitation == \"Rain\" | precipitation == \"Snow\")\nThe result for all three of these commands is a 14-value Boolean (also called logical) vector:\nsunnyDayBool  logi [1:14] FALSE FALSE TRUE FALSE...\nniceDayBool   logi [1:14] FALSE FALSE FALSE FALSE...\nprecipBool    logi [1:14] FALSE FALSE FALSE TRUE...\nWe can look at sunnyDayBool and see that the index of the TRUE values match the index of “Sunny” days in noonCond (values 3, 6, 7, 12, 13, and 14):\n&gt; sunnyDayBool\n [1] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n[12] TRUE  TRUE  TRUE\n&gt; noonCond\n [1] \"Cloudy\" \"Cloudy\" \"Sunny\"  \"Rain\"   \"Fog\"    \"Sunny\"  \"Sunny\"  \"Cloudy\"\n [9] \"Rain\"   \"Rain\"   \"Snow\"  \"Sunny\"  \"Sunny\"  \"Sunny\" \nOr, that only the last two days were both Sunny and over 60 degrees:\n&gt; niceDayBool\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[12] FALSE  TRUE  TRUE\nOr, that 4 of the 14 days had some precipitation (rain or snow):\n&gt; precipBool\n [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n[12] FALSE FALSE FALSE\n\n7.1 Masking a dataframe\nA common use for a Boolean vector is to reduce (or mask) a dataframe to rows that meet a condition. We can create a dataframe that contains only the rows with sunny days using the Boolean vector sunnyDayBool.\n\n\n\n### Using a Boolean vector to \"mask\" a dataframe \nsunnyDayWD = weatherData[sunnyDayBool,];\n\n\nFigure 9: Masking a dataframe using [X,Y] subset notation\n\n\n\nIn Figure 9, we use [X,Y] notation to subset the dataframe with:\n\nsunnyDayBool subsets X (the rows) – so only rows where sunnyDayBool is TRUE will be in the subsetted dataframe\nnothing subsets Y (the columns) – so all columns will be in the subsetted dataframe\n\n \nThe subsetted dataframe, sunnyDayWD has 6 rows, representing the 6 of the 14 rows (rows 3, 6, 7, 12, 13, and 14) from the original dataframe where noonCondition was Sunny:\n&gt; sunnyDayWD\n    date highTemp lowTemp precipitation «noonCondition» noonCondMessy precipBad\n3  Mar29       54      46         0.040         Sunny           sun     0.040\n6   Apr1       58      45         0.000         Sunny         Sunny     0.000\n7   Apr2       60      32         0.005         Sunny         sunny    -0.005\n12  Apr7       54      43         0.004         Sunny         SUNNY     0.004\n13  Apr8       61      45         0.000         Sunny           Sun     0.000\n14  Apr9       75      63         0.000         Sunny           sun     0.000 \n\n\n7.2 Masking rows and columns\nWe can use the [X,Y] notation to subset columns. The following code will also remove the precipitation column, which is column 4.\n### Masking rows and columns\nsunnyDayWD2 = weatherData[sunnyDayBool, c(-4)];  # remove precipitation column (4)\nAnd in the Console, we see the same data with the precipitation column removed:\nsunnyDayWD2                                                          \")\n    date highTemp lowTemp noonCondition noonCondMessy precipBad\n3  Mar29       54      46         Sunny           sun     0.040\n6   Apr1       58      45         Sunny         Sunny     0.000\n7   Apr2       60      32         Sunny         sunny    -0.005\n12  Apr7       54      43         Sunny         SUNNY     0.004\n13  Apr8       61      45         Sunny           Sun     0.000\n14  Apr9       75      63         Sunny           sun     0.000",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#application",
    "href": "lessons/1-12_MultipleConditions.html#application",
    "title": "1-12: Multiple Conditions",
    "section": "8 Application",
    "text": "8 Application\nA) Create one if-else-if structure that checks for:\n\nSunny days greater than 54\nNon-Sunny less than or equal to 54\nSunny days less than or equal to 54\nNon-Sunny greater than 54\n\nIn comments answer: Why do this as one if-else-if structure instead of 4 separate if statements?\n \nB) Create a Boolean (logical) vector that finds all cloudy days in noonCondMessy (note different spellings)\n \nC) Create a cloudyDays dataframe that:\n\nOnly has the rows from weatherData where weather conditions were cloudy\nRemoves the last 2 columns from weatherData (noonCondMessy and precipBad)\n\n \nD) Create an if() that combines all rainy, cloudy, and snowy days from noonCondition.\n \nE) Find which days meet all three of these conditions:\n\nlowTemps &gt; 40\nhighTemps &lt; 60\nSunny\n\n \nF) Use the following random number generator:\nrandomTemp = sample(0:100, size=1);  # pick 1 random from 0 to 100\nand create one if-else-if structure that outputs:\n\n“error” if randomTemp is less than 20 or greater than 80\n“very cold” if randomTemp is 20-30\n“cold” if randomTemp is 30-45\n“nice” if randomTemp is 45-60\n“unusually warm” if randomTemp 60-80\n\n \nSave the script as app1-12.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#extension-vs-and-vs",
    "href": "lessons/1-12_MultipleConditions.html#extension-vs-and-vs",
    "title": "1-12: Multiple Conditions",
    "section": "9 Extension: & vs && and | vs ||",
    "text": "9 Extension: & vs && and | vs ||\nR has two AND operators (& and &&) and two OR operators (| and ||), which I will refer to as the singlesand doublesoperators.\n \nThe big difference is that singles work on one or multiple values, whereas doubles only work on one vaule. In other words, you can replace singles with doubles for the whole lesson except in Section 7, where we are working with a vector of values. In Section 7, switching the singles with doubles will cause an error.\n \nAt this point it seems there is no reason to use doubles if singles do everything and more. And for a beginner, this is enough information. However, as you get into more advanced programming, there are benefits to using doubles.\n\n9.1 doubles are more efficient\nIn the following code, & will always check both if highTemps &gt; 50 and noonCond is Sunny:\n  if(highTemps &gt; 50 «&» noonCond == \"Sunny\") \nBut if highTemps is less than 50 then there is no point to checking noonCond because the condition is already FALSE.\n \n&& will only check what is necessary to get the condition:\nif(highTemps &gt; 50 «&&» noonCond == \"Sunny\")\nif highTemps is less than 50, && will not bother to check noonCond.\n\n\n9.2 doubles can used to avoid errors\nAnother common usage of doubles is to check if a variable exists before checking the value of the variable. Here we are checking first to see if highTemps exists, then we will check if the value is greater than 50:\nif( exists(highTemps) «&&» highTemps &gt; 50 )  # will avoid errors\nBecause we are using &&, if exists(highTemps) is FALSE, the value of highTemps will not be checked.\n \nIf we use &, then the value of highTemps will be checked even if highTemps does not exist, causing an error in your script.\n if( exists(highTemps) «&» highTemps &gt; 50 ) # error if highTemps does not exist\n\n\n9.3 singles and double in other programming languages\nIn a lot of language, the doubles have a similar meaning to the singles in R. Just remember where you use singles in R, you are likely using doubles in other languages.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html",
    "href": "lessons/1-14_Functions2.html",
    "title": "1-14: Functions 2",
    "section": "",
    "text": "Extension: combining all four error checks into one (or do this as an application?)\nCreate a function with a count value",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#purpose",
    "href": "lessons/1-14_Functions2.html#purpose",
    "title": "1-14: Functions 2",
    "section": "1 Purpose",
    "text": "1 Purpose\n\ncreate a separate file to hold functions\narguments in functions\nUse return values in functions",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#questions-about-the-material",
    "href": "lessons/1-14_Functions2.html#questions-about-the-material",
    "title": "1-14: Functions 2",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nSecond Script: a second script containing functions can be downloaded here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#opening-a-script-file",
    "href": "lessons/1-14_Functions2.html#opening-a-script-file",
    "title": "1-14: Functions 2",
    "section": "3 Opening a script file",
    "text": "3 Opening a script file\nA reminder that anytime a script file is looking for some resource, (e.g., a data file, another script file), the script needs a starting point (i.e., a folder) to find the location of the resource. R calls this starting point the Working Directory. When you are in an RStudio Project, the starting folder/Working Directory is the Project Folder. This is what makes an RStudio Project Folder easy to share – the code to link resources does not need to change when the Project Folder is shared.\n \nThe main script file for this lesson needs the functions within 1-14_myFunctions.R, which is in the scripts folder inside the Project Folder: scripts/1_14-myFunctions.r\n \nAnd we get the functions by calling:\nsource(\"scripts/1-14_myFunctions.R\") \n \nIf the path is incorrect, either because the file name or folder path is incorrect, the line will give you the error:\ncannot open file 'wrong_path/1-14_myFunctions.R': No such file or directory\nor\ncannot open file 'script/wrong_name.R': No such file or directory\nNote: uppercase/lowercase does not matter in the file path on Windows and Mac. However, case does matter on Linux, so keep that in mind when sharing your files.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#modulus-arithmetic",
    "href": "lessons/1-14_Functions2.html#modulus-arithmetic",
    "title": "1-14: Functions 2",
    "section": "4 Modulus arithmetic",
    "text": "4 Modulus arithmetic\nAll of the functions in this lesson use the modulus operator: %%. The modulus operator divides the two numbers and returns only the remainder.\n \nSome examples:\n&gt; 11 %% 4 \n[1] 3 \n&gt; 12 %% 4 \n[1] 0 \n&gt; 13 %% 4 \n[1] 1 \n&gt; 14 %% 4 \n[1] 2\nThe modulus operator is often used in a for loop to perform a task at a regular interval. For instance, modulus can be used to check every 100th value in a large vector (val %% 100).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#modulus-operator-and-checking-for-divisibility",
    "href": "lessons/1-14_Functions2.html#modulus-operator-and-checking-for-divisibility",
    "title": "1-14: Functions 2",
    "section": "5 Modulus operator and checking for divisibility",
    "text": "5 Modulus operator and checking for divisibility\nWe are going to use the %% operator to check if one number (the divisor) evenly divides another number (the dividend). If the divisor divides the dividend evenly, then the modulus will be 0 (i.e., no remainder). The function is called isDivisible().\n \nisDivisible = function(dividend, divisor)\n{\n  ### get the remainder of the division using modulus\n  remainder = dividend %% divisor;\n  ### Check if the remainder is 0\n  divBy0 = (remainder == 0);  # TRUE if 0, FALSE otherwise\n  \n  ### return whether the modulus was 0 (TRUE) or more than zero (FALSE)\n  return(divBy0);\n}\nExtension: Variable and function names do not matter… to R\n\n5.1 A function that checks divisibility\nThe first function in 1-14_myFunctions.r has two arguments: dividend and divisor.\nisDivisible = function(dividend, divisor)\nThe codeblock calculates the modulus of the dividend and the divisor (i.e., it divides the dividend by the divisor and returns the remainder)\nremainder = dividend %% divisor;\nThen the codeblock checks whether remainder is 0 and saves the results to divBy0:\ndivBy0 = (remainder == 0); # TRUE if 0, FALSE otherwise\nFinally, the codeblock returns divBy0 to the caller:\nreturn(divBy0);\n\n\n5.2 A Boolean return value\ndivBy0 is a Boolean value. In other words, divBy0 can only have two possible values: TRUE and FALSE.\n \nThe Boolean value is created in this line:\ndivBy0 = (remainder == 0);\n(remainder == 0) compares remainder to 0, just like it would if this were an if() statement. The results of this comparison is a Boolean TRUE/FALSE that is saved to the variable divBy0.\n \nThis line of code uses both the comparison operator ( == ) to created a Boolean values and the assignment operator ( = ) to save the Boolean value to a variable.\n\n\n5.3 Testing isDivisible()\nWe can pass in two arguments, the first representing the divisor, and the second representing the dividend:\ndiv12_4 = isDivisible(12,4); \ndiv12_5 = isDivisible(12,5);\nAnd we get the results:\ndiv12_4:   TRUE\ndiv12_5:   FALSE\nWe can also put in the argument names to make the functions more readable:\ndiv12_4a = isDivisible(dividend=12, divisor=4); \ndiv12_5a = isDivisible(dividend=12, divisor=5);\nAnd we get the same results:\ndiv12_4a:   TRUE \ndiv12_5a:   FALSE\nAside from readability, another advantage to using argument names is that you can put the arguments in any order you want:\ndiv12_4b = isDivisible(divisor=4, dividend=12); \ndiv12_5b = isDivisible(divisor=5, dividend=12);\ndiv12_4b: TRUE \ndiv12_5b: FALSE\nWhen calling isDivisible(), it is fine to skip argument names but using argument names is a necessity for functions that have lots of arguments, such as geom_boxplot():",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#prime-function",
    "href": "lessons/1-14_Functions2.html#prime-function",
    "title": "1-14: Functions 2",
    "section": "6 Prime function",
    "text": "6 Prime function\nThe function, isDivisible(), performs the simple task of checking if one number is divisible by another number. We are going to expand that by checking whether the dividend can be evenly divided by any number. In other words, we are checking to see if the dividend is a prime number. This function is called isPrime1().\n \nnote: The method we are using to check for prime works but is very inefficient!\nisPrime1 = function(dividend)\n{\n  for(i in 2:(dividend-1))\n  {\n    if(dividend %% i == 0)\n    {\n      ## number can be divided evenly by another number -- return FALSE\n      return(FALSE);\n    }\n  }\n  ## number cannot be divided evenly by another number -- return TRUE\n  return(TRUE);\n}\n\n6.1 Parts of the isPrime() function\nThe header of the function only has one argument this time: the value you want to check for prime:\nisPrime1 = function(dividend)\nTo check if dividend is prime, you need to go through all numbers smaller than dividend, starting with 2. If none of those values evenly divide dividend then dividend is prime.\n \nWe check all possible divisors with a for loop that cycles from 2 to one less than dividend:\nfor(i in 2:(dividend-1))\nInside the for loop, we takes the modulus of the dividend against the current for loop cycle value (i):\nif(dividend %% i == 0)\nIf any modulus is 0, then we know a number evenly divides dividend and dividend cannot be prime. At this point we do not need to check any more values and can immediately return FALSE back to the caller.\n  return(FALSE);  #dividend is not prime\nIf the for loop cycles through all of the values, and the modulus is never 0, then we know dividend is prime and return TRUE to the caller:\nreturn(TRUE);    #dividend is prime\n\n\n6.2 Two return locations\nThis function has two places where it calls return().\n\nIn the for loop if the modulus is 0. At this point we know the dividend cannot be prime because another number evenly divides it. We can immediately end the function and return FALSE to the caller (i.e., the dividend is not prime)\nAt the end of the function after the for loop. If the for loop cycles through every number and none evenly divide the dividend then we know the dividend has to be prime and return TRUE to the caller.\n\n \nNote: There is no way both return() can be executed in one function call.\n\n\n6.3 Checking for prime\nWe will call the function multiple times with different dividends. You can convince yourself that the function is correctly declaring prime numbers:\np0 = isPrime1(13);\np1 = isPrime1(14);\np2 = isPrime1(81);\np3 = isPrime1(dividend=83);\np4 = isPrime1(dividend=87);\np5 = isPrime1(dividend=89);\nNote: the first (and only) argument is dividend. We can either explicitly name the argument or have R assume the one value is for the first argument.\np0: TRUE\np1: FALSE\np2: FALSE\np3: TRUE\np4: FALSE\np5: TRUE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#error-checking",
    "href": "lessons/1-14_Functions2.html#error-checking",
    "title": "1-14: Functions 2",
    "section": "7 Error checking",
    "text": "7 Error checking\nThe assumption when someone calls isPrime1() is that the caller will send a valid integer as an argument. It is not a good strategy to assume this will be true as there are many other types of value the caller can pass in:\n\nA vector of values (i.e., multiple values)\nA non-numeric value (e.g., a string or Boolean value)\nA negative value\nA decimal value\n\n \nisPrime2() is the same as isPrime1() except that isPrime2() first does a series of checks using an if-else-if structure. If any of the statements are TRUE (i.e., the argument is an invalid value) then the function will return an error message and end:\n  ### Error checking the argument value\n  if(length(dividend) &gt; 1)         # error check 1: too many values\n  {\n    return(\"Error: too many values\");\n  }\n  else if (!is.numeric(dividend))  # error check 2: value not numeric\n  {\n    return(\"Error: value is not numeric\");\n  }\n  else if (dividend &lt; 0)           # error check 3: value is negative\n  {\n    return(\"Error: value must be positive\");\n  }\n  else if (dividend %% 1 != 0)     # error check 4: value is a decimal\n  {\n    return(\"Error: value must be an integer\");\n  }\nA truly robust function will first check to make sure the arguments are valid using some sort of error checking.\n\n7.1 The error checks:\nThere are four error checks:\n1) Check to see if the argument has more than one value\nif(length(val) &gt; 1)         # error check 1: too many values\n2) Check to see if the argument is not a numeric value:\nelse if (!is.numeric(val))  # error check 2: value not numeric\n3) Check to see if the argument is a negative value:\nelse if (val &lt; 0)           # error check 3: value is negative\n4) Check to see if the number is a decimal (i.e., not an integer):\nelse if (val %% 1 != 0)     # error check 4: value is a decimal\nThe first three checks are self-explanatory. The last one is a bit trickier as R does not have a dedicated check for integers. Note: R has a function named is.integer(), but this function only checks if the number has been explicitly declared an integer, something the caller is unlikely to do.\n \nThe trick we use is to perform a modulus between the dividend and 1. If the dividend is a decimal then the decimal is the answer to a modulus by 1. You can convince yourself of this in the Console:\n&gt; 5.5 %% 1 \n[1] 0.5 \n&gt; 8.333 %% 1 \n[1] 0.333 \n&gt; 10 %% 1 \n[1] 0 \n&gt; 12.99 %% 1 \n[1] 0.99\n\n\n7.2 Testing the error checking\nWe will check for the four errors and test valid values to make sure we have not lost the functionality of the original isPrime1():\ne1 = isPrime2(c(10,34)); # too many values \ne2 = isPrime2(\"hello\");  # not numeric \ne3 = isPrime2(FALSE);    # not numeric \ne4 = isPrime2(-35);      # negative numeric \ne5 = isPrime2(74.24);    # decimal numeric \ne6 = isPrime1(13);       # valid -- and prime \ne7 = isPrime1(14);       # valid -- and not prime \ne8 = isPrime1(81);       # valid -- and not prime\ne1: \"Error: too many values\"\ne2: \"Error: value is not numeric\"\ne3: \"Error: value is not numeric\"\ne4: \"Error: value must be positive\"\ne5: \"Error: value must be an integer\"\ne6: TRUE\ne7: FALSE\ne8: FALSE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#multiple-return-values",
    "href": "lessons/1-14_Functions2.html#multiple-return-values",
    "title": "1-14: Functions 2",
    "section": "8 Multiple return values",
    "text": "8 Multiple return values\nAll the functions we have created so far in the past two lessons have returned one value, either a single Boolean value, or a single numeric value.\n \nWe are going to create a function that returns an undetermined number of values. Specifically, we are going to modify the isPrime1() to return all factors of the dividend supplied by the caller. For example, 12 can be divided by 2, 3, 4, and 6 so the return has 4 values: c(2,3,4,6).\n \nThe function is called findFactors():\nfindFactors = function(val)\n{\n  ### Store the factors here\n  factors = c();\n  \n  for(i in 2:(val-1))\n  {\n    if(val %% i == 0)\n    {\n      ## number can be divided evenly by another number \n      ## insert this number as a factor\n      factors = c(factors, i);\n    }\n  }\n  ## number cannot be divided evenly by another number -- return TRUE\n  return(factors);\n}\n\n8.1 Storing multiple values\nWe start the function by creating the vector that will store the values returned to the caller:\n### Store the factors here (starts as a NULL vector)\nfactors = c();\nfactors starts as an empty, or NULL, vector. And a NULL vector will be returned to the caller if dividend is prime (i.e., dividend has no factors).\n \nThe for loop still cycles from 2 to one less than dividend and checks if the modulus is 0. Every time the modulus is 0, the value that evenly divides dividend is inserted in the factors vector:\n  for(i in 2:(dividend-1))\n  {\n    if(val %% i == 0)\n    {\n      ## number can be divided evenly by another number \n      ## insert this number as a factor\n      factors = c(factors, i);\n    }\n  }\n\n\n8.2 Adding values to a vector\nThis line says that factors is equal to a vector of itself plus the i value that we just calculated to be a factor:\nfactors = c(factors, i);\nIn other words, the code above creates a new vector that is the old vector with the i value inserted at the end.\n\n\n8.3 Returning the factors\nAfter cycling through all the values in the for loop, we return the factors vector to the caller:\nreturn(factors);\nfactors will either be NULL (dividend is prime), or have a list of all factors of dividend.\n\n\n8.4 Testing findFactors()\nWe will test findFactors() with values that we know are prime (13, 83), values we know are not prime (14, 81, 87), and one value that has many factors (72):\nf0 = findFactors(dividend=13);\nf1 = findFactors(14);\nf2 = findFactors(dividend=81);\nf3 = findFactors(83);\nf4 = findFactors(dividend=87);\nf5 = findFactors(72);\nAnd we get NULL for the dividends that are prime or a list of factors for the non-prime dividends:\nf0: NULL\nf1: int [1:2] 2 7\nf2: int [1:3] 3 9 27\nf3: NULL\nf4: int [1:2] 3 29\nf5: int [1:10] 2 3 4 6 8 9 12 18 24 36",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#application",
    "href": "lessons/1-14_Functions2.html#application",
    "title": "1-14: Functions 2",
    "section": "9 Application",
    "text": "9 Application\n1) For this application you need two scripts:\n\na functions script named app1-14_functions.r that contains the functions created in this application\na main script named app1-14.r where you will answer questions in comments and use and test the functions created in this application\nMake sure you test all the functions thoroughly in your main script. I want to see the test code.\nsource() your functions script from the main script\n\n \n2) In comments answer: Why is factors created as an empty vector in findFactors() before it is used in the for loop? What happens if factors is not created first? Why?\n \n3) For the function: isPrime1()\n\ncopy isPrime1() to your function script for this application\nFix the function so it can correctly handle the numbers 0, 1, and 2 (0 and 1 are not prime, 2 is prime)\nMake the function more efficient by having the for loop cycle from 2 to the square root of dividend (yes, this works)\n\nnote: the for loop will ignore the decimal in the square loop value\n\n\n \n3) Create a function to checks a vector of numbers to see which of those numbers are divisible by 7, 11, or 13\n\nThe function has one argument: a vector a values\nThe function return all the values in the vector that can be evenly divided by 7, 11, or 13\n\n \n4) Create a function that check if modulus of two numbers is a value given by caller:\n\nThe function has three arguments: dividend, divisor, remainder\nThe function will check to see if the modulus of dividend and divisor is equal to the remainder and return TRUE or FALSE based on this\nHave the function return an error if (1) any of the numbers are zero or negative or (2) remainder is bigger than divisor\nHave the function set a default value for remainder\n\n \n5) Create one function that converts a temperature value from/to Celsius (C), Fahrenheit (F), or Kelvin (K). There are six possible conversions (\\(K = C + 273\\) and \\(F=\\frac{9}{5} C+32\\)):\na) F -&gt; C\nb) C -&gt; F\nc) F -&gt; K\nd) C -&gt; K\ne) K -&gt; C\nf) K -&gt; F\n\nYou need an argument for the temperature values.\nThere are multiple ways to allow the user to choose the conversion, probably the most robust is to have a from and a to argument.\n\n \nSave the script as app1-14.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#extension-variable-and-function-names-do-not-matter-to-r",
    "href": "lessons/1-14_Functions2.html#extension-variable-and-function-names-do-not-matter-to-r",
    "title": "1-14: Functions 2",
    "section": "10 Extension: Variable and function names do not matter… to R",
    "text": "10 Extension: Variable and function names do not matter… to R\nVariable and function names are generally chosen to make it easier for the reader to understand the script.  But R could care less what names you use.  The following script executes the exact same calculation and returns the exact same TRUE/FALSE values as isDivisible() – it just uses variable and function names that are not intuitive to the user.  Do not do this in your script!\ndo_stuff = function(a_number, another_number)\n{\n  ### get the remainder of the division using modulus\n  the_answer = a_number %% another_number;\n  ### Check if the remainder is 0\n  thing_to_return = (the_answer == 0);  # TRUE if 0, FALSE otherwise\n  \n  ### return whether the modulus was 0 (TRUE) or more than zero (FALSE)\n  return(thing_to_return);\n}",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "1-14: Functions 2"
    ]
  }
]