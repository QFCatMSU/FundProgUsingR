[
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html",
    "href": "lessons/2-14_BrowserAndTrace.html",
    "title": "2-14: Browser and Trace",
    "section": "",
    "text": "View(ggplot2::geom_boxplot)\nggplot2::geom_boxplot\n\ntrace(at = c(2,3))\ntrace will not work if you Source() the function afterwards",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#purpose",
    "href": "lessons/2-14_BrowserAndTrace.html#purpose",
    "title": "2-14: Browser and Trace",
    "section": "1 Purpose",
    "text": "1 Purpose",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#material",
    "href": "lessons/2-14_BrowserAndTrace.html#material",
    "title": "2-14: Browser and Trace",
    "section": "2 Material",
    "text": "2 Material\nThe script for the lesson is here\nA second script that contains a function to debug\nThe data used for the lesson is here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#breakpoint-limitations",
    "href": "lessons/2-14_BrowserAndTrace.html#breakpoint-limitations",
    "title": "2-14: Browser and Trace",
    "section": "3 Breakpoint limitations",
    "text": "3 Breakpoint limitations\nIn the last lesson, we used breakpoints in RStudio to pause the execution of a script. Breakpoints are convenient because they can be easily turned on and off and are not a part of your script. However, breakpoints in RStudio are limited in use. They make a good introduction to debugging, and are widely used in other programming languages, but are not as practical in R as the debugging techniques taught in this lesson.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#browser",
    "href": "lessons/2-14_BrowserAndTrace.html#browser",
    "title": "2-14: Browser and Trace",
    "section": "4 browser()",
    "text": "4 browser()\nbrowser() is an R command that instructs the script to pause. Effectively, browser() acts just like a breakpoint by pausing your script and putting your script in debug mode. We can take examples from the last lesson and replace the breakpoint with browser(). Note: browser() is added to your script and needs to be removed after debugging.\n\n4.1 add browser to code\nWe can add browser() to line 7 of the script from last lesson and click Source. You will see the familiar debug features\n \n&lt;image of browser() with green arrow&gt;\n \n\n\n4.2 add browser to for loop\nInstead of putting a NULL command in a for loop so that a breakpoint can be put on the line, we can put browser(). Don’t forget to remove or comment out browser() when you are done debugging\n&lt;link back to last lesson’s NULL in for loops&gt;\n&lt;image for loop with two browser() instead of NULL&gt;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#browser-in-function-scripts",
    "href": "lessons/2-14_BrowserAndTrace.html#browser-in-function-scripts",
    "title": "2-14: Browser and Trace",
    "section": "5 browser() in function scripts",
    "text": "5 browser() in function scripts\nThe main reason to use browser() is that it work in script files outside of script being Sourced. In the script files, we call a second script named &lt; &gt;. This script has functions in used by the main script. Adding breakpoints to the functions script will not work if you Source the main script. However, adding browser() will work.\n\n5.1 Example 1: if\n\n\n5.2 Example 2: for loop",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#debug-debugonce",
    "href": "lessons/2-14_BrowserAndTrace.html#debug-debugonce",
    "title": "2-14: Browser and Trace",
    "section": "6 debug() debugonce()",
    "text": "6 debug() debugonce()\nscript must be in Environment to debug???\nbrowser() does not work for functions that you cannot edit. In other words, you cannot use browser() to pause a function within a packages. If you need to debug a function in a package, then you can use debug() or debugonce(). Both of these function will inject a browser() command to the beginning of a function.\n \nIt is easiest to see how debug() works using a function within your script and then apply it to a function from\n\n6.1 debug function script\n\n\n6.2 undebug\n\n\n6.3 debugonce\n\n\n6.4 debug within package\nfind package function that’s relatively easy to debug\npause is at beginning of script (not convenient)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#trace",
    "href": "lessons/2-14_BrowserAndTrace.html#trace",
    "title": "2-14: Browser and Trace",
    "section": "7 trace()",
    "text": "7 trace()\nThe disadvantage of debug() is that it always pauses the script at the beginning of a function. That is often not . If you want to control where the pause is put then you need to use trace(). trace() can be used to inject browser() anywhere in the function. This is done by telling trace() which command, by number, you want to pause before.\nThis command would acts just like the debug() above:\n&lt;trace, first command&gt;\nThis command would put the pause on the third command:\n&lt;trace, third command&gt;\nThe number is not the line number, but the command number",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#trace-with-loops-and-if-statements",
    "href": "lessons/2-14_BrowserAndTrace.html#trace-with-loops-and-if-statements",
    "title": "2-14: Browser and Trace",
    "section": "8 trace() with loops and if statements",
    "text": "8 trace() with loops and if statements\nComplete if-else statements and for loops are counted as one command. So, if you want to put a pause after, you need to\n&lt;trace, command after for loop&gt;\nIf you want to put a pause within an if-else ststement or for loop, that you need to subset the command number with a second command number\n&lt;trace, command in for loop&gt;\n&lt;trace, command in if-else statement&gt;\nEvery time there is an embedded if-else statement or for loop, you need to subset trace()\n&lt;trace, command in for loop, in if-else, in for loop&gt;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#inject-code-beyond-browser",
    "href": "lessons/2-14_BrowserAndTrace.html#inject-code-beyond-browser",
    "title": "2-14: Browser and Trace",
    "section": "9 Inject code beyond browser()",
    "text": "9 Inject code beyond browser()\ntrace() can inject any code into your function\n&lt;inject cat() in for loop&gt;\n&lt;inject if(i==1) { } in for loop&gt;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#viewing-package-functions",
    "href": "lessons/2-14_BrowserAndTrace.html#viewing-package-functions",
    "title": "2-14: Browser and Trace",
    "section": "10 Viewing package functions",
    "text": "10 Viewing package functions\nSo far, we have only paused within scripts we created. If you want to pause within a function inside a package, you need to first view the function and figure out the command/subcommand where you want the pause.\n&lt;1-13 exention section 9 – choose a better function??&gt;\n&lt;do pracma: isprime…&gt;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-14_BrowserAndTrace.html#application",
    "href": "lessons/2-14_BrowserAndTrace.html#application",
    "title": "2-14: Browser and Trace",
    "section": "11 Application",
    "text": "11 Application\ncode to put a pause in the function ?? in package ??\ncode to put a pause in the for loop at 10 iteration in function ?? in package ??\ncode to put a pause in the for loop when x=?? in function ?? in package ??\ncode to put a pause inside if-if\ncode to print x every 10th iteration of a for loop\ncat each factor",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-14: Browser and Trace"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#purpose",
    "href": "lessons/2-12_Lists.html#purpose",
    "title": "2-12: Lists",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreating you own List\nSubsetting a List\nReading a List return from plots and models",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#script-for-this-lesson",
    "href": "lessons/2-12_Lists.html#script-for-this-lesson",
    "title": "2-12: Lists",
    "section": "2 Script for this lesson",
    "text": "2 Script for this lesson\nThe script for the lesson is here\nThe data used for this lesson and the application is here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#objects-in-r",
    "href": "lessons/2-12_Lists.html#objects-in-r",
    "title": "2-12: Lists",
    "section": "3 Objects in R",
    "text": "3 Objects in R\nAs mentioned in last lesson, there are 2 types of objects (i.e., variables) in R:\n\nAtomic vector (often just called vectors): objects that hold values of the same type (e.g., numeric, string, logical)\nLists: objects that hold other objects (including more Lists)\n \n\nThe relationship between Atomic Vectors and Lists is analogous to the relationship between folders and files on your computer.  Files, like atomic vector, hold information, or data.  Folders, like Lists, are containers for other folders and files.\n \nLast lesson we talked mostly about atomic vectors. This lesson we will talk mostly about Lists. As you will see in this lesson, Lists create a tree-like structure for your data.  At the end of the tree is the Atomic Vectors",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#lists",
    "href": "lessons/2-12_Lists.html#lists",
    "title": "2-12: Lists",
    "section": "4 Lists",
    "text": "4 Lists\nA List is an object that holds other (usually related) objects. When you create a plot or perform a statistical test, the results are often stored as Lists, as we will see later in the lesson.\n \nWe will create our own List with three objects in it.\n \nThe three objects will be:\n\na character vector called someAnimals\na 2x3 matrix consisting of a sequence of six numbers called someNumbers\nthe weatherData dataframe from previous lessons\n\nsomeAnimals = c(\"llama\", \"guanaco\", \"alpaca\", \"goat\");\nsomeNumbers = matrix(nrow=2, ncol=3, seq(from=30, to=4, length.out=6))\nweatherData = read.csv(file=\"data/Lansing2016NOAA.csv\");\n\n4.1 Lists in the Environment tab\nNotice that, in the Environment, weatherData has an arrow to expand it whereas someAnimals and someNumbers contains all of their information in one line.  It is this expand arrow that indicates weatherData is a List, whereas someAnimals and SomeNumbers are atomic vectors.  weatherData is a specialized List where all the objects inside are vectors of the same length (i.e., weatherData is a data frame):\n\n\n\n\n\n\nFigure 1: The expand arrow in the Environment indicates that the object is a List (i.e., holds other objects)\n\n\n\n\n\n4.2 Creating the new List\nWe can create a List with the three objects above using the list() function:\nlistAtOnce = list(someAnimals, someNumbers, weatherData);\nThis will add listAtOnce to the Environment.  From there we double-click on it to see it in a Viewer tab.  The Viewer tab offers a more helpful and informative view of the List.\n \nA couple things to notice about listAtOnce in the Viewer tab:\n\nThe objects inside the List do not have names – instead they only have numbers.  Objects do not retain their names when put in to a List.\nThe third object [[3]], the dataframe, has an expand arrow.  The arrow indicates that this object is also a List – [[1]] and [[2]] are atomic vectors.\n\n \n\n\n\n\n\n\nFigure 2: The List inside a Viewer tab\n\n\n\nNote: When looking at the List in the Viewer, the objects with expand arrows are functionally similar to folders, those without arrows are functionally similar to files\n\n\n4.3 Including names for the objects\nIf we want the objects inside the List to have names, then we have to specify the names while creating the List.  You do that by setting a name equal to the object when calling list():\n  listAtOnce2 = list(animals = someAnimals,\n                     numbers = someNumbers, \n                     weather = weatherData);\nThis makes animals, numbers, and weather the names of the objects someAnimal, someNumbers, and weatherData inside the List.  You can choose any name, including the same as the original objects:\n\n\n\n\n\n\nFigure 3: Adding names to the objects inside the List\n\n\n\nNote: names inside Lists, like variables, should follow programming naming conventions – but this is not enforced in R.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#creating-a-dynamic-list",
    "href": "lessons/2-12_Lists.html#creating-a-dynamic-list",
    "title": "2-12: Lists",
    "section": "5 Creating a dynamic List",
    "text": "5 Creating a dynamic List\nIn the previous example, all the objects put in the List were put in at once.  What often happens is that data is generated and gets dynamically added to a List, so the objects are put in the List separately.  We are going to create a List equivalent to listAtOnce except the three object will be put in one at a time.\n \nFirst we create a List with nothing in it (i.e., an empty list):\nlistDynamic = list();\nlistDynamic:  List of 0\n\n5.1 Appending to the List\nThen add the object someAnimals to the List. \nlistDynamic2  = append(listDynamic, someAnimals); \nSomewhat unintuitively, append() does not append the object someAnimals to the List.  Instead, append() appends each value within someAnimals to the List – making each value a separate object.  Now you have a List with 4 string vectors (each with 1 value) …. this is not what we want.\n\n\n\n\n\n\nFigure 4: Appending an object one value at a time…\n\n\n\n\n\n5.2 Appending whole objects\nThe solution is also a bit unintutive.  We want is to append someAnimals to the List as vector and, to do this, we need to wrap someAnimals inside its own List:\nlistDynamic3 = append(listDynamic, list(someAnimals));\nAnd, if we want the object to have a name inside the List, then we need to provide the name – just like Figure 3 :\nlistDynamic4 = append(listDynamic, list(animal = someAnimals));\nlistDynamic3 and listDynamic4 both now have a vector with four character values, the latter has that vector named:\n\n\n\n\n\n\nFigure 5: Lists with appended objects\n\n\n\n\n\n5.3 Appending multiple objects\nWe will now append someNumber and weatherData using append():\nlistDynamic5 = append(listDynamic4, list(numbers=someNumbers));\nlistDynamic5 = append(listDynamic5, list(weather=weatherData));\nAnd see that listDynamic5 is a List with three objects in it: animals, numbers, and weather – just like listAtOnce2 (Figure 3).\n\n\n\n\n\n\nFigure 6: Lists after the three objects were appended and named",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#subsetting-within-a-list",
    "href": "lessons/2-12_Lists.html#subsetting-within-a-list",
    "title": "2-12: Lists",
    "section": "6 Subsetting within a List",
    "text": "6 Subsetting within a List\nThe RStudio Viewer tab for Lists has a nice feature where it will shows you how to subset an object inside a List when you click on it.  In listDynamic5 List, when you click on avgTemp in the weather dataframe – and at the bottom of the tab, RStudio shows the code to subset avgTemp:\nlistDynamic5[[\"weather\"]][[\"avgTemp\"]]\nIf you click the document icon with an arrow on the right-side, RStudio will put the above code in the Console where you click Enter to execute it:\n\n\n\n\n\n\nFigure 7: Opening an object within a List from the Viewer tab\n\n\n\n\n6.1 Subsetting with $ and [[  ]]\nEvery object in the List Viewer with a value under Name in Figure 7 can be accessed with both the $ and [[ ]] subset operators – RStudio always uses [[ ]].\n \nHere are two ways to subset the animal object inside listDynamic5 – the results are saved to anim1 and anim2:\nanim1 = listDynamic5[[\"animal\"]];\nanim2 = listDynamic5$animal;\nThe string (chr) vectors anim1 and anim2 have the same values as the original someAnimals vector:\nanim1:       chr [1:4] \"llama\" \"guanaco\" ...\nanim2:       chr [1:4] \"llama\" \"guanaco\" ...\nsomeAnimals: chr [1:4] \"llama\" \"guanaco\" ...\nHere are three ways to subset the dewPoint vector within weather, which is within listDynamic5: \ndewPoint1 = listDynamic5$weather$dewPoint;\ndewPoint2 = listDynamic5[[\"weather\"]][[\"dewPoint\"]];\ndewPoint3 = listDynamic5[[\"weather\"]]$dewPoint;\nAgain, all three saved values are identical to the original weatherData$dewPoint:\ndewPoint1:       20 22 20 13 10 16 ...\ndewPoint2:       20 22 20 13 10 16 ...\ndewPoint3:       20 22 20 13 10 16 ...\n🞃 weatherData:  366 obs. of 23 variables\n    $ dewPoint:    20 22 20 13 10 16...\n$ and [[ ]] are equivalent operators when you are working with named objects within a List.  $ is more convenient to use because it involves less typing and RStudio will give you suggestions.\n\n\n6.2 Numeric subsetting (only with [[ ]])\nObjects within a Lists can also be accessed by their numeric order using [[ ]]:\nanim3 = listDynamic5[[1]];\ndewPoint4 = listDynamic5[[3]][[7]];\nBut, you cannot use the $ operator to subset by number:\n# anim3 = listDynamic5$1;   # will cause an error\nSo, if the object inside a List does not have a name, as in listAtOnce (Figure 2), then you have to use [[ ]] to subset the unnamed object by numeric placement.\n\n\n6.3 The [ ] subset operator\nYou can use [ ] to subset the List, but instead of getting the object, you will get a List with the object in it:\nanim4 = listDynamic5[\"animal\"];\nIn the Environment, we can see that  anim1, anim2, and anim3 (subsetted with either [[ ]] or $) are all character vectors with 4 values.  But, anim4 (subsetted with [ ]) is a List with a character vector that has 4 values:\n\n\n\nanim1:   chr [1:4] \"llama\" \"guanaco\" ...\nanim2:   chr [1:4] \"llama\" \"guanaco\" ...\nanim3:   chr [1:4] \"llama\" \"guanaco\" ...\n\n🞃 anim4:   List of 1\n   $ animal: chr [1:4] \"llama\" \"guanaco\" ...\n\n\nFigure 8: The difference between using [[ ]] or $ vs [ ] for subsetting objects within a List\n\n\n\nThis is not very useful so [ ] is rarely used to subset a List.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#returned-list-from-functions",
    "href": "lessons/2-12_Lists.html#returned-list-from-functions",
    "title": "2-12: Lists",
    "section": "7 Returned List from functions",
    "text": "7 Returned List from functions\nWe are going to move from creating our own Lists to looking at Lists that are returned when you call certain functions, specifically ggplot() and lm().\n \nFirst, we will copy the scatterplot and linear regression of humidity vs. temperature from lesson 2-1 and save the results, which will be a List, to plot1:\n  «plot1» = ggplot( data=weatherData ) +\n    geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n    geom_smooth( mapping=aes(x=avgTemp, y=relHum), \n                 method=\"lm\" ) +\n    labs( title=\"Humidity vs Temperature\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Average Temperatures (Fahrenheit)\",\n          y = \"Relative Humidity\") +\n    scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n    theme_bw() +\n    theme( axis.text.x=element_text(angle=90, vjust=0.5) );\n  plot(plot1);\n\n\n\n\n\n\nFigure 9: Scatterplot of humidity vs. temperature with a linear regression\n\n\n\nWe can also create a linear regression model of humidity vs temperature using lm() and save the results to a list named model1:\n«model1» = lm(formula=weatherData$avgTemp~weatherData$relHum);\nAnd then look at a summary of the model using print(summary(model1)):\n\n\n\n&gt;   print(summary(model1));\nCall:\nlm(formula = weatherData$avgTemp ~ weatherData$relHum)\nResiduals:\n    Min      1Q  Median      3Q     Max \n-44.213 -14.424  -0.213  15.479  36.461 \nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)        77.27006    6.07644  12.716  &lt; 2e-16 ***\nweatherData$relHum -0.38696    0.08722  -4.437 1.21e-05 ***\n---\nSignif. codes:  \n0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\nResidual standard error: 18.59 on 364 degrees of freedom\nMultiple R-squared:  0.0513,    Adjusted R-squared:  0.04869 \nF-statistic: 19.68 on 1 and 364 DF,  p-value: 1.213e-05\n\n\nFigure 10: Summary of a model of a linear regression\n\n\n\nBoth plot1 and model1 are List objects and the information for the plot and summary of the linear model are either in the List, or calculated from values in the List.\n\n7.1 The returned List: linear model\nThe plot (Figure 9) and the summary (Figure 10) above are both ways of getting at the data that comes back from the corresponding functions calls ggplot() and lm().  But, both of these calls also return a List that contains a lot of information.\n \nLet’s first look at model1, which is the List returned from the lm() call:\n\n\n\n\n\n\nFigure 11: The List returned from a lm() call\n\n\n\n\n\n7.2 Subsetting the linear model List\nmodel1 has information that is inside the summary, for instance the estimate for the intercept is at:\n&gt; model1$coefficients[\"(Intercept)\"]\n(Intercept) \n   77.27006 \nNote: (Intercept) does not follow good programming naming practices!\n \nWe need to use [  ] to subset coefficients because coefficients is an atomic vector.  Note: Subsetting operators are a bit inconsistent in R and it is just something you need to get used to.\n \nWe can also subset the first ten residuals from model1:\n&gt; model1$residuals[1:10]\n          1           2           3           4           5 \n-21.8609230 -17.7957344 -22.7305458 -30.0869984 -32.5696589 \n          6           7           8           9          10 \n-24.8914326 -19.4392818 -12.3130738  -0.1216773 -20.0869984 \nOr, subset every twentieth value in fitted.values:\n&gt; model1$fitted.values[seq(from=1, to=366, by=20)]\n       1       21       41       61       81      101      121      141 \n47.86092 45.92611 52.11751 44.76522 57.53498 46.31307 49.02181 57.92194 \n     161      181      201      221      241      261      281      301 \n54.43928 57.53498 54.82624 55.21321 47.47396 45.15219 50.56966 43.60434 \n     321      341      361 \n48.24789 46.31307 46.70004 \nThere are also a lot of other, more obscure, values in the List object which we will not go through.  The point is that there is a lot of information inside the List and that information can be extracted using subset operators.\n\n\n7.3 New variables types\nIf you look through model1, you will find three new variable types: language, symbol, and formula.  These variables types are used by R programmers to store the code that created the List – this is not something you will need to deal with at this point.\n\n\n\n\n\n\nFigure 12: Some of the less common variable types appear in this List\n\n\n\n\n\n7.4 Return list: plot1\nThe List returned when ggplot() is called is far more complex than the one returned with lm().  Inside the ggplot() List are many embedded Lists that contain everything required to make the plot, including all the data used in the plot and the styling.\n \nThere is a also a new object type called environment, which is sort of a modern version of a List.  The name is confusing because it is structurally related to, but not the same thing as, the Environment tab in RStudio.  This is not something we will explore in this class – just know that an environment object, like Lists, holds other objects and is also analogous to folders on your computer.\n\n\n\n\n\n\nFigure 13: The List generated by ggplot() contains environment objects\n\n\n\n\n\n7.5 Changing values in the plot List\nWe can both extract values from a List and change the values.  In this case, we can make changes to the plot by changing values within the List.\n \nLet’s first make a copy of the plot and makes changes on the copy:\nplot2 = plot1;\nThe changes we will make are:\n\nchange the text color to red\nchange the x-axis label to use the degree symbol instead of “degree”\n\n\\u00B0 means get the Unicode character designated 00B0 (which is a degree symbol)\n\nchange the axis lines to dashed lines\nincrease the size of the axis lines\n\nplot2$theme$text$colour = \"red\";\nplot2$labels$x = \"Average Temperature (\\u00B0 F)\"; \nplot2$theme$line$linetype = 2;\nplot2$theme$line$size = 0.8;\nAnd plot the results\nplot(plot2);\n\n\n\n\n\n\nFigure 14: The plot after changes were made to the List\n\n\n\nOf course, all of these changes can be made within the ggplot() function call, which is most likely what you would want to do.  But, the List object contains everything that went into making the plot so it can be modified to tweak the plot.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-12_Lists.html#application",
    "href": "lessons/2-12_Lists.html#application",
    "title": "2-12: Lists",
    "section": "8 Application",
    "text": "8 Application\nA) Why is it better to subset objects by name instead of position numbers?\n\nSave the answer to a 1-character vector\nAdd the name “comment” to the value\n \n\nB) Using weatherData, create a linear model of dewpoint vs temperature\n\nSave the model to a List named linearModel1\n \n\nC) Using only values in linearModel1, find and save:\n\nthe slope and the intercept\nthe last 10 effects values\nthe first 10 values from the original temperature vector\nthe most extreme residual value (i.e., furthest from 0 – could be positive or negative)\n \n\nD) Using the data from Lansing2016Noaa.csv, create a scatterplot of dewpoint vs average temperature\n\ninclude a linear regression of dewpoint vs. average temperature\nsave the plot information to a List named scatterPlot1\n\n \nE) Make a copy of the List variable scatterPlot1 named scatterPlot2\n\nmake 1 text change and 2 style changes by changing values in the List variable scatterPlot2\ndo not make the same changes that were made in the lesson\n\n \nF) Subset an object in the GGPlot list that is exactly 6 levels deep. \n\navoid subsetting any Name that are italicized\nsave the object to a variable named ggplotObj\n\n \nG) Create one List named app2_12_List that contains the objects from parts A-F in this application\n \nSave the script as app2-12.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-12: Lists"
    ]
  },
  {
    "objectID": "lessons/2-10_Statistical_Tests.html#purpose",
    "href": "lessons/2-10_Statistical_Tests.html#purpose",
    "title": "2-10: Statistical Tests",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nOpening , and using data from, rdata files\nUse t-tests and ANOVAS\ndemonstrate subsetting methods\nplot and calculate a linear regresion",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-10: Statistical Tests"
    ]
  },
  {
    "objectID": "lessons/2-10_Statistical_Tests.html#script-and-data-for-this-lesson",
    "href": "lessons/2-10_Statistical_Tests.html#script-and-data-for-this-lesson",
    "title": "2-10: Statistical Tests",
    "section": "2 Script and data for this lesson",
    "text": "2 Script and data for this lesson\nThe script for the lesson is here\nThe List file created in the last lesson: tempDFs.rdata",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-10: Statistical Tests"
    ]
  },
  {
    "objectID": "lessons/2-10_Statistical_Tests.html#reading-in-the-rdata-file-list-from-last-lesson",
    "href": "lessons/2-10_Statistical_Tests.html#reading-in-the-rdata-file-list-from-last-lesson",
    "title": "2-10: Statistical Tests",
    "section": "3 Reading in the rdata file (List from last lesson)",
    "text": "3 Reading in the rdata file (List from last lesson)\nIn previous lesson, we opened up a CSV file and saved the data to a data frame using read.csv().  In this lesson, we are going to use some of the data frames created in the last lesson – data frames that were saved to a rdata file in the data folder of our project.\n \nFrom last lesson:\n# save(temperatureDFs, file = \"data/tempDFs.rdata\");\nNow, let’s open up the file using load():\nload(file = \"data/tempDFs.rdata\");\nInside the rdata file is a List object, temperatureDFs,  with four data frames.  In the next couple lessons we will be dealing a lot more with navigating and creating List objects.  For now, a List object is a container for other object (like data frames). load() takes the objects from the rdata file and puts in the Environment:\n\n\n\n\n\n\nFigure 1: The List object from the rdata file – it is a carbon copy of the List object from last lesson\n\n\n\n\n3.1 Extracting the data frames\nThe data frames inside the List can be extracted just like a column can be extracted from a data frame.  Let’s extract the four data frame using the ( $ ) subset operator:\nlansJanTempsDF = temperatureDFs$origDF;\nstackedDF = temperatureDFs$stackedDF;\nstackedDF2 = temperatureDFs$stackDF_3_6;\nstackedDF3 = temperatureDFs$stackedDF_1_2_5_6;\nThis put the data frames directly in the Environment:\n⮞ lansJanTempsDF:   31 obs. of 6 variables\n⮞ stackedDF:        186 obs. of 2 variables\n⮞ stackedDF2:       62 obs. of 2 variables\n⮞ stackedDF3:       124 obs. of 2 variables",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-10: Statistical Tests"
    ]
  },
  {
    "objectID": "lessons/2-10_Statistical_Tests.html#t-tests",
    "href": "lessons/2-10_Statistical_Tests.html#t-tests",
    "title": "2-10: Statistical Tests",
    "section": "4 t-tests",
    "text": "4 t-tests\nIn the last lesson, we created line plot and box plot to display the temperature data.  Let’s be more formal about analyzing the data and do a two-sample t-test.  In statistics, a two-sample t-test is used to determine if there is evidence that the means from two groups of values are different.  In this case, we are asking if the columns (years) in the matrix, are statistically different. \n\n\n\n\n\n\nFigure 2: Boxplot of temperature data from last lesson\n\n\n\n\n4.1 first t-test on columns that do not look similar\nWe are going to compare the means from January 2012 (column 2) and January 2014 (column 4). – two columns that visually (Figure 2) do not look similar at all.  To perform a t-test between these two years, we call the function t.test() and use the arguments x and y.  x and y are set to the two columns we are comparing using the subset operator ( $ ).\ntTest1 = t.test(x=lansJanTempsDF$Jan2012, y=lansJanTempsDF$Jan2014);\nIn the Environment tab, tTest1 is labelled as a “List of 10”.  There is a lot of information in that List and we will dig more into this later.  For now, we can get a helpful summary using the function print() and passing it the results of the t-test:\nprint(tTest1);\n\n\n\n&gt;   print(tTest1);\n\n    Welch Two Sample t-test\n\ndata:  lansJanTempsDF$Jan2012 and lansJanTempsDF$Jan2014\nt = 4.7784, df = 59.561, p-value = «1.195e-05»\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n  «7.212138 17.600765»\nsample estimates:\nmean of x mean of y \n «35.77419  23.36774»\n\n\nFigure 3: Printing the summary of the t-test in the Console tab\n\n\n\nIn the summary of the t-test it is stated that\n\nThe mean of x (Jan 2012) is 35.77419 and the mean of y (Jan 2014) is 23.36774\nIf the “experiment” could be repeated, we would expect to see a difference of this size between the means 0.001195% of the time (from the p-value of 1.195e-05 or 0.00001195)\nWe are 95% sure that the means of x and y have a difference between 7.212138 and 17.600765\n\nSo, 0, or no difference is not within our confidence interval\n\nIn this case, we would reject the null hypothesis that the means of x and y are equal – in other words, January 2012 and 2014 temperatures are statistically different.\n\n\n\n4.2 second t-test on columns that do look similar\nWe will do a second t-test between years that do look as visually similar (Figure 2) – 2013 (column 3) and 2016 (column 6):\ntTest2 = t.test(x=lansJanTempsDF[,3], y=lansJanTempsDF[,6]);\nAnd, let’s summarize the results of the t-test in the Console tab:\n\n\n\n&gt;   print(tTest2);\n\n    Welch Two Sample t-test\n\ndata:  lansJanTempsDF[, 3] and lansJanTempsDF[, 6]\nt = 0.88083, df = 53.993, p-value = «0.3823»\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n «-3.087414  7.926124»\nsample estimates:\nmean of x mean of y \n «34.16129  31.74194» \n\n\nFigure 4: Printing the summary of the second t-test in the Console tab\n\n\n\nIn the summary of the t-test it is stated that\n\nThe mean of x (Jan 2013) is 34.16129 and the mean of y (Jan 2016) is 31.74194\nIf the “experiment” could be repeated, we would expect to see a difference of this size between the means 38.23% of the time (from the p-value of 0.3823)\nWe are 95% sure that the means of x and y have a difference between -3.087414 and 7.926124\n\nSo, 0, or no difference is within our confidence interval\n\nIn this case, we would not reject the null hypothesis that the means of x and y are equal – in other words, January 2013 and 2016 temperatures are statistically similar.\n\n\n\n4.3 Seven ways to subset columns in a Data Frame\nFor tTest1 an tTest2, we used 2 different methods for subsetting a column in a dataframe.  There are actually seven ways to subset a column in a data frame and they all produce the same result.\n \nThis is because there are four different operators that you can use to subset a data frame and for three of the operators you can use numbers or names:\n\n$: dollar sign operator (note: this is the only operator where you cannot use a number)\n[ ,]: row/column operator (note: this is the only subset operator one that works for a matrix)\n[ ] : single bracket operator\n[[ ]]: double bracket operator\n\n \n1) The row-column operator [ , ] using column numbers (also works on a matrix):\ntTest2a = t.test(x=lansJanTempsDF[,2], y=lansJanTempsDF[,4]);\n2) The row-column operator [ , ] using column names (also works on a matrix):\ntTest2b = t.test(x=lansJanTempsDF[,\"Jan2012\"], y=lansJanTempsDF[,\"Jan2014\"]);\n3) The single bracket operator [  ] using column numbers:\ntTest2c = t.test(x=lansJanTempsDF[2], y=lansJanTempsDF[4]);\n4) The single bracket operator [  ] using column names:\ntTest2d = t.test(x=lansJanTempsDF[\"Jan2012\"], y=lansJanTempsDF[\"Jan2014\"]);\n5) The double bracket operator [[  ]] using column numbers:\ntTest2e = t.test(x=lansJanTempsDF[[2]], y=lansJanTempsDF[[4]]);\n6) The double bracket operator [[  ]] using column names:\ntTest2f = t.test(x=lansJanTempsDF[[\"Jan2012\"]], y=lansJanTempsDF[[\"Jan2014\"]]);\n7) The dollar sign operator $ using column names (you cannot use $ with column numbers):\ntTest2g = t.test(x=lansJanTempsDF$Jan2012, y=lansJanTempsDF$Jan2014;\n\n\n4.4 Summary of subset operators\nThe operators in general (and in order of this author preference):\n\nThe $ operator is the most convenient because it requires the least code and RStudio will give you suggestions\nThe [ , ] operator is the most robust because it is explicit about the two-dimensionality of the data frame, allowing you to subset the rows along with the columns. This is the best choice if you are subsetting rows and columns at the same time\nThe [[  ]] operator is best used for more complex object like Lists – I generally avoid these when using data frames\nThe [  ] operator does a different kind of subsetting than the other three operators that will be explored in the next lesson. This author would argue that it is the least useful operator",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-10: Statistical Tests"
    ]
  },
  {
    "objectID": "lessons/2-10_Statistical_Tests.html#anovas",
    "href": "lessons/2-10_Statistical_Tests.html#anovas",
    "title": "2-10: Statistical Tests",
    "section": "5 ANOVAs",
    "text": "5 ANOVAs\nANOVAs are similar to t-tests except they generally are used to test the means from three or more groups of data, whereas a t-test can only test the means from two groups.  For comparison, we are going to start by using an ANOVA on 2 groups (Jan2013 and Jan2016).\n \nANOVAs are functionally similar to a t-test but R requires that the data be structured differently before performing an ANOVA.  In R, the ANOVA function aov() cannot compare values from different columns like t.test().  Instead aov() compares values within a column grouped by a second column.\n \nIn other words, to perform an ANOVA using aov(), you need to use a stacked dataframe and we will use the stacked data frames created in the last lesson and loaded in from the rdata file.\n \nNote: the reason why aov() requires a stacked data frame is largely a legacy issue\n\n5.1 Performing an ANOVA\nWe will perform an ANOVA on stackedDF2, which contains data from only Jan2013 and Jan2016, to check whether the January temperatures from the two years are likely to be from the same distribution.\n \nTo perform an Anova using aov() you need two arguments:\n\ndata: the (stacked) data frame that contains the data\n\nin this case: the stacked data frame stackedDF2\n\nformula: the columns used for the ANOVA in the form: all_values~grouping\n\nall_values comes from the values column and the grouping comes from the ind column (note: this is similar to an x, y mapping GGPlot except that it is in the form y~x)\n\n\nJan13_16_Anova = aov(data=stackedDF2, formula=values~ind);\nTo get the results of the ANOVA you need to print the summary of the Anova:\nprint(summary(Jan13_16_Anova);\nDoing this in the Console tab, we get:\n\n\n\n&gt;   print(summary(Jan13_16_Anova));\n            Df Sum Sq Mean Sq F value Pr(&gt;F)\nind          1     91   90.73   0.776  «0.382»\nResiduals   60   7016  116.94 \n\n\nFigure 5: ANOVA of the temperatures from 2012 and 2014\n\n\n\nThe results of the ANOVA show the probability that the temperatures come from the same distribution is 0.382 (38.2%).  This, as expected, is the very close to the same probability (0.3823) that we got from doing the t-test between 2013 and 2016 and means we do not reject the NULL hypothesis that the groups come from the same distribution.\n\n\n5.2 A Second ANOVA &lt;make into application&gt;\nWe are going to perform a second ANOVA on the 4 years (2011, 2012, 2015,and 2016) in stackedDF3 created in last lesson.\n \nThe Anova call looks almost the same:\nJan4MonthAnova = aov(data=stackedDF3, formula=values~ind);\nSummarizing the ANOVA in the Console tab:\n&gt;   print(summary(Jan4MonthAnova));\n             Df Sum Sq Mean Sq F value   Pr(&gt;F)    \nind           3   1923   641.0   8.617 «3.17e-05» ***\nResiduals   120   8926    74.4                     \n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\nThe results of the ANOVA show that the probability of the four sets of January temperatures coming from the same distribution is 3.17e-05, or 0.00317%. In this case, we reject the NULL hypothesis that the groups come from the same distribution.\n\n\n5.3 Residuals: checking for normailty\nLastly, we can perform a histogram on the residuals of the ANOVA to show the we have not violated normality assumptions.\n \nThe residuals() function gets the 124 residuals from Jan4MonthAnova:\nresiduals = residuals(Jan4MonthAnova);\nresiduals: Named num [1:124] 28.387 -0.613 7.387 6.387 ...\nWe can then plot the residuals vector in a histogram by mapping the vector to x (the y-axis is count as does not get mapped):\nplot1 = ggplot() +\n  geom_histogram(mapping=aes(x=residuals)) +\n  theme_bw();\nplot(plot1);\n… and this histogram looks fairly normal so we probably did not violated the normality assumption.\n\n\n\n\n\n\nFigure 6: Histogram of the residuals from the second ANOVA",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-10: Statistical Tests"
    ]
  },
  {
    "objectID": "lessons/2-10_Statistical_Tests.html#linear-regression",
    "href": "lessons/2-10_Statistical_Tests.html#linear-regression",
    "title": "2-10: Statistical Tests",
    "section": "6 Linear Regression",
    "text": "6 Linear Regression\nFor linear regressions, we will be using the data from the bigger data set found in Lansing2016Noaa-3.csv:\nweatherData = read.csv(file=\"data/Lansing2016Noaa-3.csv\");\nIn the GGPlot introductory lesson (2-01), we did a scatterplot of humidity vs. temperature using a geom_point component and added a linear regression using geom_smooth.\nplot1 = ggplot(data=weatherData) + \n  «geom_point»( mapping=aes( x=avgTemp, y=relHum ) ) + \n  «geom_smooth»( mapping=aes( x=avgTemp, y=relHum ),\n               method=\"lm\" ) +\n  labs( title=\"Humidity vs Temperature\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Average Temperatures (Fahrenheit)\",\n        y = \"Relative Humidity\") + \n  theme_bw();\nplot(plot1);\nThe plot looks like this:\n\n\n\n\n\n\nFigure 7: Scatterplot of humidity vs. temperature with a linear regression\n\n\n\n\n6.1 Calculate a linear regression\nWe can formalize the calculation of the humidity vs. temperature linear regression using lm().\n \nThe argument we need to set for lm() is formula and formula is in this form: y ~ x\nSo, y is the humidity column and x is the temperature column:\ntempHumLM = lm( formula = weatherData$relHum ~ weatherData$avgTemp );\nWe can print() the results to the Console and see the intercept is about 75 and the slope is about -0.13:\n&gt;   print(tempHumLM);\n\nCall:\nlm(formula = weatherData$relHum ~ weatherData$avgTemp)\nCoefficients:\n        (Intercept)  weatherData$avgTemp  \n            «75.4863»              «-0.1326» \nThe results closely match the linear regression in the plot in Figure 7 .\n \nWe can get a lot more information using print(summary()):\n&gt;   print(summary(tempHumLM));\n\nCall:\nlm(formula = weatherData$relHum ~ weatherData$avgTemp)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-30.0624  -7.5984   0.3051   8.2171  25.8165 \n\nCoefficients:\n                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         «75.48632»    1.61703  46.682  &lt; 2e-16 ***\nweatherData$avgTemp «-0.13257»    0.02988  -4.437 1.21e-05 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 10.88 on 364 degrees of freedom\nMultiple R-squared:  «0.0513»,    Adjusted R-squared:  0.04869 \nF-statistic: 19.68 on 1 and 364 DF,  p-value: «1.213e-05»\nThe slope and intercept are in this summary.  The R-squared value tells us that temperature explains about 5.13% (0.0513) of the variance in humidity and the p-value of 1.21e-05 (0.0000121) says we reject the NULL hypothesis that temperature is not a predictor of humidity.  In other words, changes in temperature can predict some change in humidity.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-10: Statistical Tests"
    ]
  },
  {
    "objectID": "lessons/2-10_Statistical_Tests.html#application",
    "href": "lessons/2-10_Statistical_Tests.html#application",
    "title": "2-10: Statistical Tests",
    "section": "7 Application",
    "text": "7 Application\n1) Subset the first 10 values from column 6 of lansJanDF four times using four different methods (Section 4.3).\n \n2) Based on the boxplot of all 6 years ( Figure 2 ), which three years would most likely come form the same distribution (i.e., the ANOVA would not reject the NULL hypothesis).\n\ncreate a stacked frame with just these three years\nperform an ANOVA on the three years\nprint the result to the Console\n\n \n3) Using t-tests, find which year’s January temperatures is most statistically similar to the temperatures from January 2014 (other than itself!).\n \n4) Perform four linear models:\n\nstnPressure vs. windSpeed,\nstnPressure vs. precipNum\nstnPressure vs. avgTemp\nstnPressure vs. relHum\n \n\n5) Using only the linear model from #4 that shows the most correlation:\n\nprint the summary to the Console and explain the summary in comments\ncreate a scatterplot of the two variables\nplace a regression line on the scatterplot\ncreate a histogram of the residuals\n\n \nSave the script as app2-10.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n7.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-10: Statistical Tests"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#purpose",
    "href": "lessons/2-08_Binding_Sampling.html#purpose",
    "title": "2-08: Binding and Sampling",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreating a uniform random sample\nCreating a normal sample\nCreating repeatable pseudo-random values\nSaving and loading list objects",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#script-and-data-for-this-lesson",
    "href": "lessons/2-08_Binding_Sampling.html#script-and-data-for-this-lesson",
    "title": "2-08: Binding and Sampling",
    "section": "2 Script and data for this lesson",
    "text": "2 Script and data for this lesson\nThe script for the lesson is here\nLansingJanTempsFixed.csv\nLansingJan2017Temps.csv",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#binding-multiple-data-frames",
    "href": "lessons/2-08_Binding_Sampling.html#binding-multiple-data-frames",
    "title": "2-08: Binding and Sampling",
    "section": "3 Binding multiple data frames",
    "text": "3 Binding multiple data frames\nWe are going to start by opening the CSV file created in the last lesson, lansingJanTempsFixed.csv file, that contains temperatures in Fahrenheit for January 2011-2016:\nlansJanTempsDF = read.csv(file = \"data/lansingJanTempsFixed.csv\"); \nNext, we are going to add January 2017 data from lansingJan2017Temps.csv.  First, let’s read the 2017 weather data into a data frame:\nlansJanTemps2017DF = read.csv(file = \"data/lansingJan2017Temps.csv\"); \nlansJanTems2017DF is a data frame with one column (named x) – x has 31 temperature values (in Fahrenheit), one for each day in January 2017.  If we click on the arrow to the left of  lansJanTemps2017DF in the Environment, it looks like this:\n🞃 lansJanTemps2017DF     31 obs. of 1 variable\n     $ x: int 42 44 37 35 15 15 ...\nLet’s first change the column name from x to Jan2017:\ncolnames(lansJanTemps2017DF) = \"Jan2017\";   # there is only one column to name\nAnd then bind the 2017 data to the 2011-2016 data frame using cbind().  We will save the binded data to a new data frame, lansJanTempDF2:\nlansJanTempsDF2 = cbind(lansJanTempsDF, lansJanTemps2017DF);\ncbind() stands for column bind and it will bind two data frames together by their columns.  cbind() also will bind columns together between two matrices, or bind columns between a matrix and a data frame.  The only caveat is that the columns need to be the same size.  In this example, the columns all have 31 rows:\n\n\n\n\n\n\nFigure 1: The January temperature matrix in Fahrenheit – with 7 years of temperatures\n\n\n\n\n3.1 Binding vectors\nYou can also use cbind() to bind two vectors together – as long as they are the same size.  The result will be a matrix with two columns:\nvectorA = 20:1;   # 20 values 20, 19, 18, ..., 1\nvectorB = seq(from=100, to =195,  by=5);  # 20 values: 100, 105, 110, ..., 195\nmatrixAB = cbind(vectorA, vectorB);  # 2 columns with 20 values in each\nor bind a vector to a data frame/matrix.  Again, the only caveat is that the number of values in the vectors are the same as the number of rows in the data frame/matrix:\nvectorC = seq(from=-20, to=18,  by=2);  # 20 values: -20, -18, ..., 18\nmatrixABC  = cbind(matrixAB, vectorC);  # 3 columns with 20 values in each\nmatrixABC contains three columns named vectorA, vectorB, and vectorC:\n&gt; matrixABC\n      vectorA vectorB vectorC\n [1,]      20     100     -20\n [2,]      19     105     -18\n [3,]      18     110     -16\n [4,]      17     115     -14\n [5,]      16     120     -12\n [6,]      15     125     -10\n [7,]      14     130      -8\n [8,]      13     135      -6\n [9,]      12     140      -4\n[10,]      11     145      -2\n[11,]      10     150       0\n[12,]       9     155       2\n[13,]       8     160       4\n[14,]       7     165       6\n[15,]       6     170       8\n[16,]       5     175      10\n[17,]       4     180      12\n[18,]       3     185      14\n[19,]       2     190      16\n[20,]       1     195      18",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#random-values-in-programming",
    "href": "lessons/2-08_Binding_Sampling.html#random-values-in-programming",
    "title": "2-08: Binding and Sampling",
    "section": "4 Random values in programming",
    "text": "4 Random values in programming\nWe are going to pick random values from our temperature data frame but, in programming there is no such thing as a truly random value.  There has to be some calculation that determines the random number – the calculations are just so complex that they seem random. As we will see later, these calculations can be manipulated (or, seeded) so you get the same “random” numbers every time you Source your script.  This is very helpful when you are sharing and documenting your results.\n \nFor now, we are going to use unseeded calculations, which means that this part of the script will produce different results each time it is executed.  The following line enforces the unseeded random calculations:\nset.seed(seed=NULL);  # remove seed value\n\n4.1 sample of numbers\nWe can use the sample() function to get a random sample from a set of observations.   In our first example, the “observations” will just be a vector of values from 1 to 10: 1:10.\n \nsample() has three arguments:\n\nx: the observations we are taking a random sample from (in this case, a sequence vector)\nsize: the number of samples we will take.\nreplace: whether we allow for an observation to be sampled multiple times (replace=TRUE means we allow an observation to be sampled more than once)\n \n\nIn the following code, the arguments for sample() are set so that:\n\nThe data set we are using is the sequence 1-10:  1:10\nWe are taking eight random samples: size=8\nWe allow repeat observations (replace=TRUE) in randomSample1 but not in randomSample2 (replace=FALSE).\n\nrandomSample1 = sample( 1:10, size=8, replace=TRUE);\nrandomSample2 = sample( 1:10, size=8, replace=FALSE);\nIn Figure 2, randomSample1 has two observations that were repeated 5 and 9), whereas randomSample2 has no repeated observations.  Running the script again will produce different observations but randomSample2 will always have eight unique observations because replace=FALSE.\n \nNote: you can get repeat values if replace=FALSE because there can be multiple observations with the same value – you just cannot get repeat observations.\n\n\n\n\n\n\nFigure 2: Random sampling of a vector with replacement and without replacement\n\n\n\nYou will get an error if the argument size is greater than the population size and replace=FALSE:\n# randomSample3 = sample( c(1:10), size=12, replace=FALSE);  # will cause error\nrandomSample4 = sample( c(1:10), size=12, replace=TRUE);   # will work\nThis is because you cannot take 12 uniquesamples from a population whose size is 10 (replace=FALSE), but you can take 12 samples from a population whose size is 10 (replace=TRUE) – there will be at least two observations that are repeated.  In this case, observations 2 and 3 are repeated twice, observation 6 is repeated 3 times, and observations 4, 5, and 7 were never picked:\n&gt; randomSample4\n [1]  6  6  9  3  2  6  9 10  8  3  1  2\n\n\n4.2 Randomly sampling the temperature values\nIn the previous examples we were sampling values from a vector. A matrix is a two-dimensional vector so we can just as easily sample values from a matrix.  Let’s first convert the data frame lansJanTempsDF2 into a matrix:\nlansJanTempsMat = as.matrix(x=lansJanTempsDF2);\nAnd then randomly sample 80 values from the matrix:\nrandomTemps = sample(lansJanTempsMat, size=80, replace=TRUE);\nThe 80 samples will be different each time you Source your script…\n&gt; randomTemps\n [1] 13 55 13 14 24 16 35 21 24 37 34 30 16 44 29 35 29 37 16 35 18 35 32 27 16\n[26] 55 26 26 40 26 25 29 48 23 26 35 19 30 23 45 38 42 42 18 42 19 45 32 13 37\n[51] 30 11 30 33 30 22 29 32 44 14 23 38 41 43 27 22 22 37 37 31 44 21 25 34 21\n[76] 40 29 55 42 29\nA data frame is multiple vectors (each column is a vector) and sampling has a different effect. For more information go to Extension: Sampling from a data frame\n\n\n4.3 Setting the seed value\nEvery time your script is executed, a new “random” set of observations, called pseudo-random, is produced using a complex algorithm that seems random to humans.  However, you often want to replicate your results meaning you want the same random values to occur each time you source the code.\n \nTo replicate your results (i.e., get the same “random” values), you use set.seed() and pass in a number:\nset.seed(seed=12345);\nThe number is called the seed number – the seed number sets the initial conditions for the algorithms that creates the pseudo-random numbers.  This means that the pseudo-random number will be the same after the seed is set.  If you change the seed number, then you get a different set of the same pseudo-random numbers.\n \nIf you want to learn more, there is a really good video on PBS Infinite Series about random number generators, pseudo-random number generators, and seed numbers.  The discussion on seed numbers starts at 2:15.\n\n\n4.4 Sampling a data vector\nWe will take another 80 random samples from lansJanTempsMat allowing for repeats:\nrandomTempsSeeded = sample(x=lansJanTempsMat, size=80, replace=TRUE);\nThe 80 sampled values from the lansJanTempsMat matrix:\n&gt; randomTempsSeeded\n [1] 38.0 23.0 29.0 25.0 30.0 34.0 23.0 19.0 13.0 44.0 34.0 32.0\n[13] 29.0 31.0 19.0 44.0 16.0 55.0 32.0 19.0 29.0 27.0 23.0 25.0\n[25] 26.0 15.0 44.0 29.0 35.0 32.0 32.0 43.0 19.0 25.0 29.0 55.0\n[37] 29.0 48.0 17.0 32.0  2.1 34.0 27.0 21.0 26.0 44.0 53.0 39.0\n[49] 32.0 29.0 16.0 26.0 30.0 43.0 29.0 35.0 27.0 42.0 32.0 41.0\n[61] 32.0 47.0 15.0 56.0 26.0 25.0 38.0 17.0 25.0 27.0 32.0 27.0\n[73] 14.0 29.0 32.0 25.0 13.0 32.0 35.0 21.0\nAnd let’s find the mean and standard deviation of the sample, which we will use later in the lesson:\nmeanRandom = mean(randomSampleSeeded); \nsdRandom = sd(randomSampleSeeded);     \nmeanRandom:  29.98875\nsdRandom:    10.485...\nSince the random values were seeded, randomSampleSeeded will be the same values every time you Source the script.  If you change the seed number (from 12345 to anything else), then you will get another set of the same “random” values every time you Source your script.\n \nFor instance, if we change the seed number from 12345 to 54321 then you will get these values every time for randomTempsSeeded:\n&gt; randomTempsSeeded\n [1] 38.0 23.0 29.0 25.0 30.0 34.0 23.0 19.0 13.0 44.0 34.0 32.0 29.0 31.0 19.0\n[16] 44.0 16.0 55.0 32.0 19.0 29.0 27.0 23.0 25.0 26.0 15.0 44.0 29.0 35.0 32.0\n[31] 32.0 43.0 19.0 25.0 29.0 55.0 29.0 48.0 17.0 32.0  2.1 34.0 27.0 21.0 26.0\n[46] 44.0 53.0 39.0 32.0 29.0 16.0 26.0 30.0 43.0 29.0 35.0 27.0 42.0 32.0 41.0\n[61] 32.0 47.0 15.0 56.0 26.0 25.0 38.0 17.0 25.0 27.0 32.0 27.0 14.0 29.0 32.0\n[76] 25.0 13.0 32.0 35.0 21.0",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#a-last-note-about-seed-numbers",
    "href": "lessons/2-08_Binding_Sampling.html#a-last-note-about-seed-numbers",
    "title": "2-08: Binding and Sampling",
    "section": "5 A last note about seed numbers",
    "text": "5 A last note about seed numbers\nA seed number is the input to a very complex formula that generates seemingly random number.  Each time the formula executes (i.e., each time you ask R to pick a random number), a new number is generated that will be used as the input for the complex formula the next time a random number is requested.\n \nWhen you pick a seed number using set.seed(), you are generating a list of numbers that just looks random.  When you choose a different seed number, you are generating a different list of consistent numbers that just look random.\n \nWhen you set the seed to NULL, R still uses the same formula to generate “random” number, but it seeds the formula with another “random” number.  You need to set the seed to NULL if you want different random numbers every time you execute your script.\n \nThe rules get more complicated if you pick random numbers without using set.seed() in your script – you will get a situation in between setting seed to NULL and picking a seed number.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#a-histogram-in-ggplot",
    "href": "lessons/2-08_Binding_Sampling.html#a-histogram-in-ggplot",
    "title": "2-08: Binding and Sampling",
    "section": "6 A Histogram in GGplot",
    "text": "6 A Histogram in GGplot\nWe can visualize the 80 sampled values using a histogram and add a vertical line to represent the mean value.\n \nThe mean value, mean(randomTempsSeeded), is very close to 30.\n&gt; mean(randomTempsSeeded)\n[1] 29.98875\nThe ggplot component that creates a histogram is geom_histogram and you only need to map the x value for a histogram (the y-axis in a histogram is the count).  The vertical line is created using the component: geom_vline where x (xintercept) is set to the mean value:\n  #### Plot a histogram with the mean value\n  plot1 = ggplot() +\n    geom_histogram(mapping=aes(x=randomTempsSeeded),\n                   fill=\"gray50\",\n                   color=\"blue\") +\n    geom_vline(xintercept = mean(randomTempsSeeded),\n               color=\"red\") +\n    theme_bw();\n  plot(plot1);\nNote: in a geom_histogram (and many other plot objects in GGPlot), fill is the background color whereas color is the outline color.\n\n\n\n\n\n\nFigure 3: Histogram of the 80 sampled values from the January temperature matrix\n\n\n\nYou will get this warning when plotting a histogram: `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  This warning is kind of GGPlot bug – GGPlot does not like it’s own default of using 30 bins in a histogram.  You can change this if you want, but there is no need.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#sampling-from-a-normal-distribution",
    "href": "lessons/2-08_Binding_Sampling.html#sampling-from-a-normal-distribution",
    "title": "2-08: Binding and Sampling",
    "section": "7 Sampling from a normal distribution",
    "text": "7 Sampling from a normal distribution\nsample() creates a random sample where each observation has the same chance of being picked (i.e., uniform probability). If we want to create a random set of observations that comes from a normal distribution with a specified mean and standard deviation, we use the function rnorm().\n \nrnorm() has 3 arguments:\n\nn: the number of observations to sample\nmean: the mean of the distribution we are sampling from\nsd: the standard deviation of the distribution we are sampling from\n\n \nThe following code samples 200 observations from a normal distribution with a mean of 20 and a standard deviation of 4:\nnormalDist1 = rnorm(n=200, mean=20, sd=2);\nnote: the sampled valued are weighted but they are still random\n \nLooking at the first 20 random values, we can see their values are centered around 20:\n&gt; normalDist1[1:20]\n [1] 19.99109 18.17063 21.53481 21.20402 20.78958 21.00338 23.53383\n [8] 19.72381 18.93655 18.74356 22.54336 18.14803 17.84504 19.18242\n[15] 16.70889 20.53722 23.31189 16.91820 19.35975 17.85754\n\n7.1 Plot a normal distribution\nWe can also create a normal distribution using the mean and standard deviation from the sampled temperature values (Figure 4):\nnormalDist2 = rnorm(n=200, \n                    mean=mean(randomTempsSeeded), \n                    sd=sd(randomTempsSeeded));\nIn the code above, we generated 200 temperature observations from a normal distribution based on the mean and standard deviation of lansJanTempsMat. The data generated are saved in the vector normalDist2.\n\nThen we use a histogram to make a visual representation of normalTemp and, to the histogram, we add a vertical line at the mean value of the samples, mean(normalDist2):\nplot2 = ggplot() +\n  geom_histogram(mapping=aes(x=normalDist2),\n                 fill=\"gray50\",\n                 color=\"blue\") +\n  geom_vline(xintercept = mean(normalDist2),\n             color=\"red\") +\n  theme_bw();\nplot(plot2);\nThe result is a histogram that looks like a bell diagram – and would look more so if you increased the sample size.\n\n\n\n\n\n\nFigure 4: Histogram of the normal distribution created using rnorm()",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#application",
    "href": "lessons/2-08_Binding_Sampling.html#application",
    "title": "2-08: Binding and Sampling",
    "section": "8 Application",
    "text": "8 Application\nA) In comments, answer the following:\n\nWhat is the minimum number of unique observations you can get from this code?  Explain your answer.\n\nsample(1:10, size=8, replace=TRUE)\n\nIf you move the code set.seed(12345) from line 40 (right before randomTempSeeded was set) to line 35 (right before randomTemps is set):\n\nWill you get the same values for randomTempSeeded?  (test it!)\nWhy or why not?\n\n\n \nB) Get 50 non-repeating samples from the even numbers between 100 and 999\n\nYou probably want to use the seq() function\n\n \nC) Get 50 samples that can repeat from the odd numbers  between 100 and 199\n \nD) Using the row binding function rbind(), bind two more rows to lansJanTempsMat (this is sort of like adding a 32nd and 33rd day to January)\n\nthe vectors you bind need to have the same number of values as columns in lansJanTempMat\n\n \nE) Using set.seed(seed=10) and rnorm():\n\ncreate a vector that has these exact 20 observations.  \nthe mean and sd used to in rnorm() to create these observations were both whole numbers.\n\n&gt; normExample\n [1] 12.056239 11.447242  7.886008 10.202497 12.883635 13.169383  8.375771\n [8] 10.908972  7.119982 11.230565 15.305339 14.267345 11.285299 14.962334\n[15] 14.224170 12.268042  9.135168 11.414549 14.776564 13.448936\n \nSave the script as app2-08.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-08_Binding_Sampling.html#extension-sampling-from-a-data-frame",
    "href": "lessons/2-08_Binding_Sampling.html#extension-sampling-from-a-data-frame",
    "title": "2-08: Binding and Sampling",
    "section": "9 Extension: Sampling from a data frame",
    "text": "9 Extension: Sampling from a data frame\nWhen you sample from a matrix, sample() sees each value in the matrix as an observation.\n \nWhen you sample from a data frame, sample() sees each column as an observation.\nThis means that sample() will choose random columns from a data frame – not random values\n \nIf you try to sample 80 values from the data frame lansJanTempsDF2 without replacement:\n&gt; sample(lansJanTempsDF2, size=80, replace=«FALSE»)\nYou will get an error because there are only 7 columns in lansJanTempsDF2 and you are asking for 80 values without replacement.\n \nIf you try to sample 80 values from the data frame lansJanTempsDF2, with replacement:\n&gt; sample(lansJanTempsDF2, size=80, replace=«TRUE»)\nYou will get the original 7 columns randomly repeated 80 times.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-08: Binding and Sampling"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#purpose",
    "href": "lessons/2-06_Datetime_Objects.html#purpose",
    "title": "2-06: Datetime objects",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nConvert a string into a Date or Datetime object\nReformat Date and Datetime objects",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#material",
    "href": "lessons/2-06_Datetime_Objects.html#material",
    "title": "2-06: Datetime objects",
    "section": "2 Material",
    "text": "2 Material\nThe script for the lesson is here\nThe dateTimeData.csv",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#two-new-variable-types-date-and-posixct",
    "href": "lessons/2-06_Datetime_Objects.html#two-new-variable-types-date-and-posixct",
    "title": "2-06: Datetime objects",
    "section": "3 Two new variable types: Date and POSIXct",
    "text": "3 Two new variable types: Date and POSIXct\nWe have mostly worked with two variable types in R: numeric and string (also called characters or string of characters).  Numeric values always appear outside of quotes and string values always appear in quotes. Note: if a numeric value is in quotes, it is treated as a string.\n \nIn this lesson we introduce two more variable type: Date and POSIXct.  Date, as the name implies, holds information about the date whereas POSIXct holds information about both the date and the time.\n \nPOSIX is a system of standards developed for UNIX computers in the 1970s.  ct means Calendar Time.  So POSIXct is the UNIX standard for calendar time – and we continue to use this standard to this date (and maintain the unintuitive name).\n\n3.1 Reading datetime objects from a dataframe\nLet’s open the data file and save the contents to a data frame called dateTimeData.\n  dateTimeData = read.csv(\"data/dateTimeData.csv\");\nThe first six columns in dateTimeData (Figure 1) have values that look like dates and times but R still sees these columns as strings (chr).\n \nIn other words, R does not automatically assign values that look like dates and times to variable types Date or POSIXct.  R only sees quotes and assigns the values to a string variable.  We need to manually convert the string columns into Date or POSIXct variables.\n\n\n\n\n\n\nFigure 1: R sees the columns with date and time values as strings (chr)\n\n\n\n\n\n3.2 Using as.Date()\nWe are going to start with converting strings that hold only date values to a Date variables and later in the lesson we will convert strings that have time values to POSIXct variables.  The process is very similar for both Date and POSIXct.\n \nas.Date() is the function that reads in a string and converts it to a Date variable.  However, if you pass a string column (in this case, date3 from dateTimeData) into as.Date(), you will get the following error:\n&gt; as.Date(dateTimeData$date3)\nError in charToDate(x) : \n  character string is not in a standard unambiguous format\nThis error occurs because dates can come in many different formats (e.g., April 15, 2022; 2022-04-15; 4/15/22).  as.Date() tries to figure out the format used in the string values but as.Date() often fails to figure out a format and it gives you an error.\n \nEven when as.Date() figures out a format, it is often the wrong format. In the following example, as.Date() assumes the first digits in the string represent the year even though, visually, the year is obviously the last four digits.\n\n\n\n&gt; as.Date(\"12-10-2022\")\n[1] \"0012-10-20\"\n\n\nFigure 2: as.Date thinks 12-10-2022 is October, 20 in the year 12\n\n\n\n\n\n3.3 the format argument in as.Date()\nThe solution is to explicitly tell as.Date() the format of the date values using the format argument.\n\n\n\n\n\n\nFigure 3: The as.Date() function with the format argument\n\n\n\nFirst we need to break down the date values into their component parts. \nLet’s start with the first column (Figure 1) where the dates look like this: Apr 15, 2022\n \nWe need to explicitly tell as.Date() how the date is formatted and this means breaking down every component of the string.\n \nBroken down, each cell in the column date1 has:\n\nthe abbreviation for the month  (e.g., Apr)\na space\nthe day of the month (e.g., 15)\na comma and a space\nthe 4-digit year (e.g., 2022)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#formatting-the-date",
    "href": "lessons/2-06_Datetime_Objects.html#formatting-the-date",
    "title": "2-06: Datetime objects",
    "section": "4 Formatting the date",
    "text": "4 Formatting the date\nNext, we to translate the above information into a language that as.Date() understands using the format argument.\n \nThe official term for the representation of the different parts of the datetime string is conversion specifications, which you can find under the details section here: https://stat.ethz.ch/R-manual/R-devel/library/base/html/strptime.html\n\n\n\n\n\n\nFigure 4: The beginning of the list of conversion specifications\n\n\n\nThe conversion specifications allow you to generalize the different components of the datetime – and they all start with a %.  When you declare the format of a datetime string, you replace the date and time components of the string with conversion specifications.  For instance, Apr 15, 2022 contains the abbreviated month so we know %b will be in the specification.\n \nSome other specifications:\n\n%m: Month – given as a number between 00 and 12\n%M: Minutes – given as a number between 00 and 59\n%y: Last two digits of the year\n%Y: Full year\n\n\n4.1 Using conversion specifications\nLet’s take our string that represents a datetime and replace the date-time components with a conversion specification using the example of string: “Apr 15, 2022”\n \nBroken down, each cell in the column date1 has:\n\nthe abbreviation for the month  (%b)\na space\nthe day of the month (%d)\na comma and a space\nthe 4-digit year (%Y)  note: %y would be the 2-digit year\n \n\nThe non-datetime characters in the specification (e.g., the spaces and the comma) need to be maintained\n \nNow we have the general format for the dates in the date1 column using conversion specifications and it is:\n\"%b %d, %Y\"\nNote: This is still a string value, so we keep the quotes.\n \nAnd we can attach that conversion specification string using the format argument in as.Date():\n  stnDate = as.Date(dateTimeData$date1,    # date1 is a chr (string) column\n                    format=\"%b %d, %Y\");   # give the format of date1\nIn the Environment tab, we see that stnDate is a Date variable with 300 values in it.\nstnDate Date[1:300], format: \"2022-04-15\"...\nstnDate is shown in the default method R uses to display Date variables, which is 4-digit year, 2-digit month, and 2-digit day.\n\n\n4.2 Sorting a Date object\nFormatting dates properly is vital when you are calculating or plotting date and time data.  When properly formatted, R understands the order of the value and the intervals between them.\n \nIf we take the original date1 column and sort it, the sorting will be in alphabetical order with April dates followed by August, then July, June, and May (because R sees date1 as a string).\n \nnote: to save space, I am only outputting every 10th value\n&gt; sort(dateTimeData$date1[seq(from=1,to=300,by=10)])\n [1] \"Apr 15, 2022\" \"Apr 15, 2022\" \"Apr 15, 2022\"\n [4] \"Apr 28, 2022\" \"Apr 28, 2022\" \"Apr 28, 2022\"\n [7] \"Aug 06, 2022\" \"Aug 06, 2022\" \"Aug 06, 2022\"\n[10] \"Jul 12, 2022\" \"Jul 12, 2022\" \"Jul 12, 2022\"\n[13] \"Jul 24, 2022\" \"Jul 24, 2022\" \"Jul 24, 2022\"\n[16] \"Jun 04, 2022\" \"Jun 04, 2022\" \"Jun 04, 2022\"\n[19] \"Jun 17, 2022\" \"Jun 17, 2022\" \"Jun 17, 2022\"\n[22] \"Jun 29, 2022\" \"Jun 29, 2022\" \"Jun 29, 2022\"\n[25] \"May 10, 2022\" \"May 10, 2022\" \"May 10, 2022\"\n[28] \"May 23, 2022\" \"May 23, 2022\" \"May 23, 2022\"\nBut, if we sort stnDate, a Date object, we get the values in order of the date:\n&gt; sort(stnDate[seq(from=1,to=300,by=10)])\n [1] \"2022-04-15\" \"2022-04-15\" \"2022-04-15\"\n [4] \"2022-04-28\" \"2022-04-28\" \"2022-04-28\"\n [7] \"2022-05-10\" \"2022-05-10\" \"2022-05-10\"\n[10] \"2022-05-23\" \"2022-05-23\" \"2022-05-23\"\n[13] \"2022-06-04\" \"2022-06-04\" \"2022-06-04\"\n[16] \"2022-06-17\" \"2022-06-17\" \"2022-06-17\"\n[19] \"2022-06-29\" \"2022-06-29\" \"2022-06-29\"\n[22] \"2022-07-12\" \"2022-07-12\" \"2022-07-12\"\n[25] \"2022-07-24\" \"2022-07-24\" \"2022-07-24\"\n[28] \"2022-08-06\" \"2022-08-06\" \"2022-08-06\"\nYou can also perform addition and subtraction on Date objects to add or subtract days:\n&gt; stnDate[1:5]\n[1] \"2022-04-15\" \"2022-04-17\" \"2022-04-18\" \"2022-04-19\" \"2022-04-20\"\n&gt; stnDate[1:5]-4\n[1] \"2022-04-11\" \"2022-04-13\" \"2022-04-14\" \"2022-04-15\" \"2022-04-16\"\n&gt; stnDate[1:5]+3\n[1] \"2022-04-18\" \"2022-04-20\" \"2022-04-21\" \"2022-04-22\" \"2022-04-23\"\nExtension: How Date and POSIXct objects tell time",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#reformatting-dates",
    "href": "lessons/2-06_Datetime_Objects.html#reformatting-dates",
    "title": "2-06: Datetime objects",
    "section": "5 Reformatting Dates",
    "text": "5 Reformatting Dates\nOnce you have date values properly formatted and saved as a Date object, you can then reformat the date to customize the output using format().\n \nFor instance, you can customize stnDate to the more familiar to American month/date/2-digit year format:\ndate_formatted = format(stnDate, format=\"%m/%d/%y\");  \nOr, you can get information from the dates, like the day of the week (%A):\ndate_weekOfDay = format(stnDate, format=\"%A\");      \ndate_formatted: chr[1:300] \"4-15-22\" \"4-17-22\"...\ndate_weekOfDay: chr[1:300] \"Friday\" \"Sunday\"...\nWhen you reformat, the object is no longer a Date object – the reformatted object is a string object and behaves as a string object.  This is awkward behavior in R – there is no way to create a Date variable with a customized format.  Instead, you use the Date variable in plots or calculation and then reformat afterwards when you want to display the values.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#posixct-values",
    "href": "lessons/2-06_Datetime_Objects.html#posixct-values",
    "title": "2-06: Datetime objects",
    "section": "6 POSIXct values",
    "text": "6 POSIXct values\nDate variables and the corresponding as.Date() function work for values with only dates in them.  Values that have dates and times (or just times) need to be saved as POSIXct variables and the corresponding function is as.POSIXct().\n \nThe only difference between Date and POSIXct variables is that there are a lot more conversion specifications that can be used for POSIXct (all of the specification used for dates and all of the specifications used for time). Otherwise, they operate the same.\n\n6.1 POSIXct example\nLet’s break down the datetime1 column in dateTimeData, which has values that look like this:  2022-04-15 09:42PM\n \nThere is:\n\nthe 4-digit year (e.g., 2022)\na dash\nMonth as a number (e.g., 04)\na dash\nthe day of the month (e.g., 15)\na space\nHour in 12-hour time (e.g., 09)\na colon\nminutes (e.g., 42)\nAM/PM indicator (e.g., PM)\n \n\nUsing the conversion specifications, this becomes:\n\nthe 4-digit year (%Y)\na dash\nMonth as a number (%m)\na dash\nthe day of the month (%d)\na space\nHour in 12-hour time (%I)\na colon\nminutes (%M)\n \n\nSo, the general format of all the values in datetime1 is:\n\"%Y-%m-%d %I:%M%p\"\nOnce again, it is really important to maintain every non-datetime component (e.g., spaces, dashes, commas).  The conversion specification is an instruction to a datetime function (as.Date or as.POSIXct) that gives the exact format of the string.  If the format is off even by a little, the function will likely not produce correct datetimes.\n\n\n6.2 Creating a POSIXct variable\nWe can create a POSIXct variable using as.POSIXct and the datetime conversion specification above:\n  stnDateTime = as.POSIXct(dateTimeData$dateTime1,\n                           format=\"%Y-%m-%d %I:%M%p\");\nstnDateTime is a POSIXct object and R’s default method for displaying POSIXct value is the same as for Date – followed by a 24-hour time using colons. \nstnDateTime: POSIXct[1:300], format \"2022-04-15 21:42:00\"\nLike Date object, we can reformat a POSIXct object using format():\ndateTime_formatted = format(stnDateTime, format=\"%m-%d-%y %H%m\");\nOr, pull some information out of it (in this case, the abbreviated day of the week %a):\ndateTime_weekOfDay = format(stnDateTime, format=\"%a\");\ndateTime_formatted: chr[1:300] \"04-15-22 2104\" \"04-17-22 2104\"...\ndateTime_weekOfDay: chr[1:300] \"Fri\" \"Sun\" \"Mon\"...\n\n\n6.3 Addition and Subtraction on POSIXct\nWhen we added and subtraction from a Date object, each unit is 1 day.  So, adding 5 to a Date object adds 5 days.\n \nWhen we added and subtraction from a POSIXct object, each unit is 1 second.  So, adding 5 to a POSIXct object adds 5 seconds.\n&gt; stnDateTime[1:5]\n[1] \"2022-04-15 21:42:00 EDT\"\n[2] \"2022-04-17 03:42:00 EDT\"\n[3] \"2022-04-18 09:42:00 EDT\"\n[4] \"2022-04-19 15:42:00 EDT\"\n[5] \"2022-04-20 21:42:00 EDT\"\n&gt; stnDateTime[1:5] + 34\n[1] \"2022-04-15 21:42:34 EDT\"\n[2] \"2022-04-17 03:42:34 EDT\"\n[3] \"2022-04-18 09:42:34 EDT\"\n[4] \"2022-04-19 15:42:34 EDT\"\n[5] \"2022-04-20 21:42:34 EDT\"\n&gt; stnDateTime[1:5] - 12\n[1] \"2022-04-15 21:41:48 EDT\"\n[2] \"2022-04-17 03:41:48 EDT\"\n[3] \"2022-04-18 09:41:48 EDT\"\n[4] \"2022-04-19 15:41:48 EDT\"\n[5] \"2022-04-20 21:41:48 EDT\"\nExtension: How Date and POSIXct objects tell time",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#adding-vectors-to-the-data-frame",
    "href": "lessons/2-06_Datetime_Objects.html#adding-vectors-to-the-data-frame",
    "title": "2-06: Datetime objects",
    "section": "7 Adding vectors to the data frame",
    "text": "7 Adding vectors to the data frame\nWe can add the reformatted vectors we created to the data frame:\n  dateTimeData$date_ref = date_formatted;\n  dateTimeData$weekOfDay = dateTime_weekOfDay;\n\n\n\n\n\n\nFigure 5: Adding two of the reformatted datetime vectors to the data frame",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#application",
    "href": "lessons/2-06_Datetime_Objects.html#application",
    "title": "2-06: Datetime objects",
    "section": "8 Application",
    "text": "8 Application\n\nCreate a properly formatted Date object from the dateTimeData columns date2 and date3\nCreate a properly formatted POSIXct object from the dateTimeData columns dateTime2 and dateTime3\nCreate a vector that has the dates in this format: 15-April, 2022\n\nadd this vector to a column named date_formatted in dateTimeData\n\nCreate a vector that has the date-times in this format: 09:36pm on Fri 04/15/22 \n\nadd this vector to a column named dateTime_formatted in dateTimeData\n\nCreate a vector that has date-times given by number of seconds since the epoch \n\nthe epochis Jan 1, 1970 at midnight GMT – basically where UNIX starts counting time (you do not need to know the exact time…)\nyou only need to use one conversion specification (i.e., one %_)\nadd this vector to a column named epoch in dateTimeData\n\n\n \nSave the script as app2-06.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-06_Datetime_Objects.html#extension-how-date-and-posixct-objects-tell-time",
    "href": "lessons/2-06_Datetime_Objects.html#extension-how-date-and-posixct-objects-tell-time",
    "title": "2-06: Datetime objects",
    "section": "9 Extension: How Date and POSIXct objects tell time",
    "text": "9 Extension: How Date and POSIXct objects tell time\nBehind the scenes, Date and POSIXct objects store datetimes as a single number.\n \nThe zero-point for Date is Jan 1, 1970 and adds one for every day after:\n\nJan 2, 1970 = 1\nJan 3, 1970  = 2\nJan 30, 1970 = 31,\nJan 1, 1971 = 366\n\n \nIf you want to go earlier than you subtract 1 so:\n\nDec 31, 1969 = -1\nDec 30, 1969 = -2\n \n\nThe zero-point for POSIXct is Jan 1, 1970 at midnight Greenwich Mean Time.  To get any other time, you add 1 for every second after or subtract 1 for every second before.  This is called epoch time and the current epoch time (as of this writing) is 1749475799, which means there have been 1749475799 seconds since Jan 1, 1970 at midnight GMT.\n \nas.Date() and as.POSIXct() take string values with conversion specifications and create numeric datetime values.  format() does the reverse and takes numeric datetime values and converts them into strings that are readable to the user.  This all works because the epoch time is fixed to a point in time that everyone has agree upon.  Everything else is a (very complicated) conversion.\n \nIf you want to know more about how this system works then here is a video I really like discussing all the problems with dealing time zones:\nhttps://www.youtube.com/watch?v=-5wpm-gesOY",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-06: Datetime objects"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#purpose",
    "href": "lessons/2-04_WhichStatements.html#purpose",
    "title": "2-04: Which Statements",
    "section": "1 Purpose",
    "text": "1 Purpose\n\ncreate conditional statements to evaluate the values in a vector\nget the index of vector values that meet a condition\nuse indexing to subset another vector\nplot values from a subset index",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#script-and-data-for-this-lesson",
    "href": "lessons/2-04_WhichStatements.html#script-and-data-for-this-lesson",
    "title": "2-04: Which Statements",
    "section": "2 Script and data for this lesson",
    "text": "2 Script and data for this lesson\nThe script for this lesson can be downloaded here\nThe data for this lesson can be download here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#which-conditional-statements-for-vectors",
    "href": "lessons/2-04_WhichStatements.html#which-conditional-statements-for-vectors",
    "title": "2-04: Which Statements",
    "section": "3 which() – conditional statements for vectors",
    "text": "3 which() – conditional statements for vectors\nwhich() answers the question: Which values in this vector meet a specified condition?\n \nThe answer to which() is presented as a vector of index values representing the values in the vector where the condition is TRUE.\n \nLet’s do some quick example with the following vectors:\nages = c(25,47,13,59,76,33,45);\nanimalNames = c(\"llama\", \"alpaca\", \"goat\", \"llama\", \"guanaco\");\nWe will ask four questions, using which(), on the two vectors above:\n\nWhich ages are greater than 40?\nWhich ages are less than or equal to 33?\nWhich animalsNames are equal to llama?\nWhich animalsNames are not equal to llama?\n\n \nindex1 = which(ages &gt; 40);   # index of ages greater than 40\nindex2 = which(ages &lt;= 33);  # index of ages less than or equal to 33\nindex3 = which(animalNames == \"llama\"); # index of animals named \"llama\"\nindex4 = which(animalNames != \"llama\"); # index of animals not named \"llama\"\nwhich() outputs a vector of indexed values that meet the condition in parentheses.  This vector is saved to the variables index1, index2, index3, and index4.\n\n3.1 which() produces an index vector\nThe four index vectors contain the index of the values that met the condition – not the values itself.\nThe number of values in the vector that met the condition is given by the second number in brackets [1:X]. The second number is also the length of the vector.\nindex1: int [1:4] 2 4 5 7\nindex2: int [1:3] 1 3 6\nindex3: int [1:2] 1 4\nindex4: int [1:3] 2 3 5\nindex1 says there were 4 values in ages greater than 40: values 2, 4, 5, and 7 (values: 47, 59, 76, and 45)\nindex2 says there were 3 values in ages less than or equal to 33: values 1, 3, and 6 (values: 25, 13, and 33)\nindex3 says there were 2 values in animalNames that were equalto “llama”: values 1 and 4\nindex4 says there were 3 values in animalNames not equal to “llama”: values 2,3 and 5 (alpaca, guanaco, and goat)\n \nExtension: The TRUE/FALSE vector",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#using-which-on-numeric-data",
    "href": "lessons/2-04_WhichStatements.html#using-which-on-numeric-data",
    "title": "2-04: Which Statements",
    "section": "4 Using which() on numeric data",
    "text": "4 Using which() on numeric data\nFor the rest of this lesson, we are going to use the weatherData frame from last lesson.\nweatherData = read.csv(file=\"data/Lansing2016NOAA-3.csv\");\nWe are going to use which() to\n\nfind values in the precipitation columns that meet a certain condition\nsubset other columns (e.g., avgTemp, relHum) by these values\n\nin other words, find the ***avgTemp*** on days where precipitation meets a certain condition\n\n\n\n4.1 Finding the NA values using which()\nIn the last lesson we took the chr column precip, converted it to a numeric vector, and then using for loops, changed the NA values to 0.005.\n \nWe are going to repeat this process using which() statements. \n \nFirst we will save the precip column in weatherData to the vector precip:\nprecip = weatherData$precip;\nThen convert the chr vector precip to a numeric vector – and save the results to precip2:\nprecip2 = as.numeric(precip);\nUse which() to find which values in precip2 are NA:\nnaValues = which(is.na(precip2));\nIn the Environment, we see there are 60 NA values in precip2, starting with values 3, 4, 14… (meaning the 3rd, 4th, 14th… values in precip2 are NA)\nnaValues:  int[1:60] 3 4 14 16 17 19 20 ...\nCreate a copy of precip2 called precip3 (this is only done so we can see the progress):\nprecip3 = precip2;\nSet the precip3 values indexed by naValues to 0.005 (change the 3rd, 4th, 14th… values in precip2 to 0.005):\nprecip3[naValues] = 0.005;\nLike last lesson, we see the progress from a chr vector (precip) to a numeric vector with NA values (precip2) to a numeric value with NA values replaced with 0.005 (precip3):\nprecip:   chr[1:366]  \"0.04\" \"0.00\" «\"T\"» «\"T\"» \"0.00\" ...\nprecip2:  num[1:366]  0.04 0 «NA» «NA» 0 ...\nprecip3:  num[1:366]  0.04 0 «0.005» «0.005» 0 ...\n\n\n4.2 Subset based on numeric conditions\nWe are going to subset the precipNum column in 3 ways: \n\nno precipitation (precipitation == 0.00)\na lot of precipitation (precipitation &gt; 1.00).\nmoderate precipitation (precipitation &gt; 0.25 & &lt; 0.50).\n \n\nFirst we need to create vectors that contain the index values for precipNum that correspond to the three scenarios above.  We will use which() on the precipNum column.  which() statements use conditional statement just like if statements.\ndaysNoPrecip = which(weatherData$precipNum == 0.00);   # days where precip is 0\ndaysHighPrecip = which(weatherData$precipNum &gt; 1.00);  # days where precip is &gt; 1\nNote: it is good practice to put in the decimal (1.00 as opposed to 1) to indicate to the reader that it is a real number that, in this situation, happens to have a value the looks like an integer.\n \nThe first two scenarios have one condition, the third scenario has two conditions:\n\nprecipNum &gt; 0.25 and\nprecipNum &lt; 0.50\n\n \nAs with if statements, when you have multiple condition, each condition must be explicit:\n# explicit condition: days where precip is &gt; 0.25 and precip &lt; 0.5\ndaysModPrecip = which(weatherData$precipNum &gt; 0.25 & weatherData$precipNum &lt; 0.5);\n\n# this code is not explicit and will cause an error\n# daysModPrecip = which(weatherData$precipNum &gt; 0.25 & &lt; 0.5);\nWe see in the Environment tab that there were:\n\n167 days without any precipitation\n8 days with precipitation more than 1 inch\n18 days with precipitation between 0.25 and 0.50 inches\n \n\n\n\n\ndaysHighPrecip: int [1:«8»]  73 91 225 228 229 273 290 307\ndaysModPrecip:  int [1:«18»]  33 88 119 121 123 125 168 183 ...\ndaysNoPrecip:   int [1:«167»]  2 5 6 7 24 30 37 38 42 49 ...\n\n\nFigure 1: Creating vector indices of days based on precipitation amounts",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#subsetting-other-vectors",
    "href": "lessons/2-04_WhichStatements.html#subsetting-other-vectors",
    "title": "2-04: Which Statements",
    "section": "5 Subsetting other vectors",
    "text": "5 Subsetting other vectors\nThe index vectors in Figure 1 give the rows in weatherData$precipNum that meet the given condition.  We can use this information to subset other columns and answer questions like:\n\nWhich dates (dateYear column) had more than 1 inch of rain?\nWhat was the average wind speed (windSpeed) for the days that had greater than 1 inch of rain?\n \n\nrainyDates = weatherData$dateYear[highPrecipIndex];\nrainyDayWindSpeed = weatherData$windSpeed[highPrecipIndex];\nrainyDates and rainyDayWindSpeed are both vector with 8 values, the 8 values are on the rows where the precipitations are greater than 1 inch.\n \nWe see in the Console the 8 dates that had a high amount of precipitation and the average wind speed for those dates:\n\n\n\n&gt; rainyDates\n[1] \"03-13-2016\" \"03-31-2016\" \"08-12-2016\" \"08-15-2016\" \"08-16-2016\" \"09-29-2016\" \"10-16-2016\"\n[8] \"11-02-2016\"\n&gt; rainyDayWindSpeed\n[1]  9.2 17.3  6.1  3.8  9.2 12.4  8.1  4.6\n\n\nFigure 2: Printing out the subsetted rainy dates to the Console\n\n\n\nExtension: Subset using dataframe columns",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#plotting-subsetted-vectors",
    "href": "lessons/2-04_WhichStatements.html#plotting-subsetted-vectors",
    "title": "2-04: Which Statements",
    "section": "6 Plotting subsetted vectors",
    "text": "6 Plotting subsetted vectors\nIn previous lesson, we created a scatterplot by initializing a data frame in ggplot() and mapping columns to the x and y axes:\nplot1 = ggplot(«data=weatherData») +                # initialize data frame\n  geom_point( «mapping=aes(x=avgTemp, y=relHum)»,   # map the x and y axes\n              color = \"blue\") +\n  labs( title=\"Humidity vs. Temperature\",\n        subtitle=\"Lansing, 2016\",\n        x = \"Temperature (F)\",\n        y = \"Humidity (%)\") +\n  theme_bw();\nplot(plot1);\nAnd we get a scatterplot of all 366 values:\n\n\n\n\n\n\nFigure 3: Scatterplot of humidity vs temperature using all values in the columns\n\n\n\nIn this section, we want to create a humidity (relHum) vs temperature (avgTemp) scatterplot limited to the days that meet the precipitation conditions.\n \nIn GGPlot there are two ways to do this:\n\nsubset the weatherData data frame\nsubset the x and y mappings\n\n\n6.1 Subsetting the data frame\nWhen we use this code to set up a ggplot canvas:\nggplot(data = weatherData)\nWe are saying that the plots added to the canvas are going to use data from the weatherData data frame.\n \nIn this case, we do not want to use all of the rows from the data frame – so, we want to set up the ggplot canvas with a data frame that is a subset of weatherData\n \nWe can create a subset of weatherData using the index vector daysHighPrecip.  In other words, we create a data frame that only has the rows from weatherData given by daysHighPrecip.\n \nTo subset rows in a data frame:\nsubset1 = weatherData[1:10,];           # subset rows 1-10, all columns\nsubset2 = weatherData[daysHighPrecip,]  # subset rows given by daysHighPrecip\nsubset1 has the first 10 rows of weatherData:\n\n\n\n\n\n\nFigure 4: subset1 is a data frame that has the first 10 rows of weatherData\n\n\n\nsubset2 is 8 rows from weatherData given by the 8 index values in daysHighPrecip (73, 91, 225..).\n\n\n\n\n\n\nFigure 5: Subsetting the weatherData data frame by rows\n\n\n\n\n\n6.2 Using a subset dataframe in ggplot\nTo plot the data from the 8 rows with precipitation greater than one inch, we can initialize ggplot() with the subsetted data frame, subset2.\nplot2 = ggplot(data=«subset2») +      # initialize the canvas with subset2\n  geom_point( mapping=aes(x=«avgTemp», y=«relHum»), # avgTemp and relHum from subset2\n              color = \"blue\") +\n  labs( title=\"Humidity vs. Temperature\",\n        subtitle=\"Precipiation greater than 1 inch\",\n        x = \"Temperature (F)\",\n        y = \"Humidity (%)\") +\n  theme_bw();\nplot(plot2);\nSince the subsetted data frame only has 8 rows, the plot will have only 8 points representing the 8 days of high precipitation:\n\n\n\n\n\n\nFigure 6: Plot of subsetted humidity and temperature values\n\n\n\n\n\n6.3 Subset the mappings\nThe second way to plot the data is to:\n\nnot initialize the ggplot canvas area with a data frame  (use ggplot() without data)\ndirectly map the subset vectors – in this case, avgTemp and relHum.\n \n\nIf we subset relHum and avgTemp with the daysHighPrecip vector, then we get the 8 humidity and temperatures values that correspond to the 8 days with high precipitation:\n&gt; weatherData$relHum[daysHighPrecip]\n[1] 85 85 82 78 77 90 88 83\n&gt; weatherData$avgTemp[daysHighPrecip]\n[1] 46 53 82 72 76 58 65 58\nWe can map the data inside the component geom_point() instead of the initializing the canvas with a dataframe inside ggplot():\nplot3 = ggplot() +    «# no data frame was initialized for the ggplot canvas»\n  geom_point( mapping=aes(«x=weatherData$avgTemp[daysHighPrecip]»,  \n                          «y=weatherData$relHum[daysHighPrecip]»)) +\n  labs( title=\"Humidity vs. Temperature\",\n        subtitle=\"Precipitation greater than 1 inch\",\n        x = \"Temperature (F)\",\n        y = \"Humidity (%)\") +\n  theme_bw();\nplot(plot3);\nThis code will produce the exact same plot as above (Figure 6).\n \nWarning: You will get an error if you mix the two method (initializing the canvas with a data frame and mapping subsetted vector).\n\n\n6.4 Manually entering values in mappings\nWhen you do not initialize a data frame in ggplot(), then you have manually enter vectors in the mappings.  To be explicit about this fact, we could just put in vector values:\nplot4 = ggplot() +\n  geom_point( mapping=aes(x=c(46,53,82,72,76,58,65,58),\n                          y=c(85,85,82,78,77,90,88,83)),\n              color = \"blue\") +\n  labs( title=\"Humidity vs. Temperature\",\n        subtitle=\"Precipiation greater than 1 inch\",\n        x = \"Temperature (F)\",\n        y = \"Humidity (%)\") +\n  theme_bw();\nplot(plot4);\nThis code will, again, produce the exact same plot as above (Figure 6).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#application",
    "href": "lessons/2-04_WhichStatements.html#application",
    "title": "2-04: Which Statements",
    "section": "7 Application",
    "text": "7 Application\n\nFind dates that had snow (so, snow &gt; 0)\n\nsnow, like precip, uses **T** values\n\n\n \n\nFind dates that had more than a trace of rain\n\n \n\nFind the dates that had peak winds between 30 and 40 mph\n\nCreate a rain vs temperature scatterplot for these date\n\n\n \n\nFind the number of days the humidity was high (greater than 85%) and for these days output to the Console:\n\nthe date\nthe amount of precipitation\nthe maximum wind speed\n\n\n \nThe results of #4 would be best done with a for loop the cycles through all the days and  should look something like this:\n     01-09-2016 had X inches of rain and a wind speed of X miles/hour\n     01-14-2016 had X inches of rain and a wind speed of X miles/hour\n     01-15-2016 had X inches of rain and a wind speed of X miles/hour\n \n \nSave the script as app2-04.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n7.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#extension-subset-using-dataframe-columns",
    "href": "lessons/2-04_WhichStatements.html#extension-subset-using-dataframe-columns",
    "title": "2-04: Which Statements",
    "section": "8 Extension: Subset using dataframe columns",
    "text": "8 Extension: Subset using dataframe columns\nThe line of code:\nhumidity = weatherData[,\"relHum\"];\nsaves all the values from the column relHum in the data frame weatherData to the vector humidity.\n \nWe then could use humidity to find which days had high humidity\nhighHumidity = which(humidity &gt; 80);  # days with high humidity\nBut we could also directly use the relHum column from the data frame\nhighHumidity = which(weatherData[,\"relHum\"] &gt; 80);\nWhile we can use both humidity and weatherData[,\"relHum\"] in the which(), the former is preferred because it is easier to read.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-04_WhichStatements.html#extension-the-truefalse-vector",
    "href": "lessons/2-04_WhichStatements.html#extension-the-truefalse-vector",
    "title": "2-04: Which Statements",
    "section": "9 Extension: The TRUE/FALSE vector",
    "text": "9 Extension: The TRUE/FALSE vector\nLet’s take another look at the which() code:\nages = c(25,47,13,59,76,33,45);\nanimals = c(\"llama\", \"alpaca\", \"goat\", \"llama\", \"guanaco\");\n\nindex1 = which(ages &gt; 40);   # index of ages greater than 40\nindex2 = which(ages &lt;= 33);  # index of ages less than or equal to 33\nindex3 = which(animalNames == \"llama\"); # index of animals named \"llama\"\nindex4 = which(animalNames != \"llama\"); # index of animals not named \"llama\"\nThere is an in between step that we skipped over here.  Each which() has a conditional statement inside.  That conditional statement gets evaluated by R first, and then which() is performed on the answer to the conditional statement.  Using the Console, let’s look at how the conditional statements inside the which() get evaluated by R:\n&gt; ages &gt; 40\n[1] FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE\n&gt; ages &lt;= 33\n[1]  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE\n&gt; animalNames == \"llama\"\n[1]  TRUE FALSE FALSE  TRUE FALSE\n&gt; animalNames != \"llama\"\n[1] FALSE  TRUE  TRUE FALSE  TRUE\nEach conditional statement above produces a vector that has the same length as the number of values in the vector (ages and animalNames).  The vector produced has only two vales: TRUE and FALSE.  The TRUE and FALSE values match the index of the values in the original index.\n \nSo if:\nages = c(25,47,13,59,76,33,45);\nthen:\n(ages &gt; 40)  is evaluated as:  c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE)\n \nThis indicates that the 2nd, 4th, 5th, and 7th values of the vector ages are greater than 40\n \nwhich() takes the TRUE/FALSE vector and outputs the indices of the TRUE values\nwhich(ages &gt; 4);   # This evaluates to c(2, 4, 5, 7)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-04: Which Statements"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#purpose",
    "href": "lessons/2-02_DataFrame_Modifications.html#purpose",
    "title": "2-02: DataFrame Modifications",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nUsing string manipulations on columns within a data frame\nAdd, remove, and reorder columns in a data frame",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#material",
    "href": "lessons/2-02_DataFrame_Modifications.html#material",
    "title": "2-02: DataFrame Modifications",
    "section": "2 Material",
    "text": "2 Material\nThe script for this lesson is here\nThe Lansing2016Noaa.csv is here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#a-larger-data-frame",
    "href": "lessons/2-02_DataFrame_Modifications.html#a-larger-data-frame",
    "title": "2-02: DataFrame Modifications",
    "section": "3 A larger data frame",
    "text": "3 A larger data frame\nFor this lesson we are going to use weather data for Lansing, Michigan for all of 2016.  The weather data comes from NCDC/NOAA.\n \nTo open the data:\nweatherData = read.csv(file=\"data/Lansing2016NOAA.csv\",\n              sep=\",\",\n              header=TRUE);\nIn the Environment, you can see that weatherData consists of 366 observations (366 days – it was a leap year) of 23 variables.  In other words there are 23 different weather variables in the data (columns) for each of the 366 days (rows).\nweatherData:      366 obs. of 23 variables\nIf we double-click on weatherData in the Environment, we can look at the data frame in the file viewer section of RStudio:\n\n\n\n\n\n\nFigure 1: Viewing the weatherData data frame in the main section",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#string-manipulations",
    "href": "lessons/2-02_DataFrame_Modifications.html#string-manipulations",
    "title": "2-02: DataFrame Modifications",
    "section": "4 String manipulations",
    "text": "4 String manipulations\nThere is extra information in the values of the dateTime column (column 1) that is not needed.  We really only need the two-digit month and day, which is the 6th through the 10th characters of each dateTime value:\n\n2016-01-02T00:00:00\n2016-01-14T00:00:00\n2016-01-26T00:00:00\n\n\n4.1 Substrings\nWe can use the function substr() to subset, or pull out, a portion of the string’s value.\n\n\n\n\n\n\nFigure 2: The substr() function\n\n\n\nnote: substr() and substring() are practically the same when working with a single string\n \nsubstr() has three arguments that we need to assign value to:\n\nx: the values that we want to subset (the dateTime column)\nstart: the position we want the substring to start at (the 6th character)\nstop: the position that we want the substring to end at (the 10th character)\n\ndateOnly = substr(x=weatherData$dateTime, start=6, stop=10);\nThis removes the the values between characters 6 and 10 and saves the results to dateOnly.\n \nWe can look at the first six values of dateOnly in the Console using head()  and the last 6 values using tail():\n&gt; head(dateOnly)\n[1] \"01-01\" \"01-02\" \"01-03\" \"01-04\" \"01-05\" \"01-06\"\n&gt; tail(dateOnly)\n[1] \"12-26\" \"12-27\" \"12-28\" \"12-29\" \"12-30\" \"12-31\"\nBased on the 12 dates, we can see we have just the 2-digit month and date.\n\n\n4.2 Pasting values\nLet’s say we actually want the year in the column, but we want it at the end. \nIn other words, we want the date format to be MM-DD-YYYY:\n\n01-02-2016\n01-14-2016\n01-26-2016\n\n \nYou can use paste() to add (concatenate) string values together.\n\n\n\n\n\n\nFigure 3: The paste() function – with … as the first “argument”\n\n\n\n\n\n4.3 three dots ( … ) and arguments\nIn the Help tab that the first argument in paste() is three dots ( … ).  The three dots means that paste() will take any number of objects of any type and try to paste them together.\n \nThe three dots represents a pseudo-argument, meaning that for this function, any argument that does not have a name will be assigned to the three dots (i.e., unnamed arguments are objects to be pasted).\n \nThis means that you have to use argument names for everything else (e.g., sep, collapse) otherwise paste() will assume the object is to be pasted.\n\n\n4.4 Using paste()\nIn this case we want to paste two objects together: the dateOnly vector and the string “-2016” – and we want nothing in between (i.e., nothing separating them):\ndateYear = paste(dateOnly, \"-2016\", sep=\"\");\nLet’s look at the first ten values in dateYear in the Console:\n&gt; dateYear[1:10]\n[1] \"01-01-2016\" \"01-02-2016\" \"01-03-2016\" \"01-04-2016\" \"01-05-2016\"\n[6] \"01-06-2016\" \"01-07-2016\" \"01-08-2016\" \"01-09-2016\" \"01-10-2016\"\n\n4.4.1 The sep argument\nThe sep argument is the character that get placed in between the values being pasted. If you do not put the sep argument in, then sep defaults to one space, meaning an extra space between each object in the paste() – in this case, the date and year: \ndateYearDefaultSep = paste(dateOnly, \"-2016\"); # sep default to \" \"\nThe results have a space after the date:\n&gt; dateYearMistake\n01-02 -2016\n01-14 -2016\n01-26 -2016\nOr, you can set sep to some value, and those characters appear between the date and year:\n&gt; paste(dateOnly, \"-2016\", sep=\"«@!@»\")\n01-02«@!@»-2016\n01-14«@!@»-2016\n01-26«@!@»-2016\nIn general, it is best to set sep=““ (i.e., to nothing) – this gives you more control of the output.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#rounding-numbers",
    "href": "lessons/2-02_DataFrame_Modifications.html#rounding-numbers",
    "title": "2-02: DataFrame Modifications",
    "section": "5 Rounding numbers",
    "text": "5 Rounding numbers\nWe have a column, windSpeed, where there are more decimal places than necessary.\n \nLooking at the first ten values in the vector we can see three decimal places are used:\n&gt; weatherData$windSpeed[1:10]\n[1] 15.539 14.614 9.986 7.742 7.586\n[6] 7.601 4.823 6.720 7.294 17.758\nOne decimal place is probably enough in this case and we can round the values using the round() function:\n\n\n\n\n\n\nFigure 4: The round() function\n\n\n\nround() has two arguments:\n\nx: the values to round\ndigits: decimal places to round to\n\n\n5.1 Using round()\nLet’s round windSpeed to one decimal place and save it to the vector windSpeedRounded:\nwindSpeedRounded = round(weatherData$windSpeed, digits=1);\nAnd look at 10 values in windSpeedRounded to make sure it worked (this time I’ll look at values 40-49):\n\n\n\n&gt; windSpeedRounded[40:49]\n[1] 12.9 13.8 8.9 14.5 9.5 8.1 6.9 3.8 5.9\n[10] 10.7\n\n\nFigure 5: Values rounded to 1 decimal\n\n\n\nIn the Console, we are looking at values 40-49 in windSpeedRounded where [1] and the [10] reflects the index value of the output So, value [1] is windSpeedRounded[40], value [2] is windSpeedRounded[41], through value [10] which is windSpeedRounded[49].  Extension: Index values in output",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#adding-vectors-to-the-data-frame",
    "href": "lessons/2-02_DataFrame_Modifications.html#adding-vectors-to-the-data-frame",
    "title": "2-02: DataFrame Modifications",
    "section": "6 Adding vectors to the data frame",
    "text": "6 Adding vectors to the data frame\nWe have created two new vectors: dateYear and windSpeedRounded, and we want add them both to the weatherData data frame.  There are two ways to add a vector to a data frame:\n\nadd a new column\noverwrite an existing column.\n\n \nFirst, we will make a copy of weatherData called weatherData2.  We will be creating multiple copies of weatherData so that we can see the progress of the data frames in the Environment tab.  You could just manipulate the original weatherData data frame.\n# copy the original data frame\nweatherData2 = weatherData;\n\n6.1 Adding a new column\nLet’s add the dateYear vector to the data frame to a column called dateYear:\nweatherData2$dateYear = dateYear;\nSince there was no dateYear column in weatherData2, the above code ads a column called dateYear to the end of the data frame and populates it with the values in the vector dateYear.  Note that weatherData2 now has one more column (24) than weatherData (23).\n \nDouble-click on weatherData2 in the Environment tab and scroll to the end to see the new dateYear column:\n\n\n\n\n\n\nFigure 6: A column was added to the end of the weatherData2 data frame\n\n\n\n\n\n6.2 Overwriting a column\nWhen you use a column name that does not currently exist (e.g., dateYear), R will create a new column with that name.  If you use a column name that already exists (e.g., windSpeed), then R will overwrite the column with the values in the vector.\n \nWe are going to put the windSpeedRounded vector in the weatherData2 data frame, but this time we are going to overwrite the windSpeed column:\nweatherData2$windSpeed = windSpeedRounded;\nNow the values in the windSpeed column reflect the rounded values from windSpeedRounded and there are still 24 columns:\n\n\n\n\n\n\nFigure 7: the windSpeed column was overwritten with the values from the windSpeedRounded vector",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#deleting-columns-from-a-data-frame",
    "href": "lessons/2-02_DataFrame_Modifications.html#deleting-columns-from-a-data-frame",
    "title": "2-02: DataFrame Modifications",
    "section": "7 Deleting columns from a data frame",
    "text": "7 Deleting columns from a data frame\nThe easiest way to delete a column from a data frame is just to set the column to NULL.\n \nWe will create another copy of weatherData:\nweatherData3 = weatherData2;\nAnd remove the dateTime column from weatherData3 by setting it to NULL:\nweatherData3$dateTime = NULL; \nThe dateTime column, which was the first column in the data frame, has been removed and the number of columns has dropped by 1 (from 24 to 23):\n\n\n\n\n\n\nFigure 8: The dateTime column was removed from weatherData3\n\n\n\n\n7.1 Alternate ways to delete columns\nYou can also use the within() function to remove columns. \nUsing within() to remove the dateTime column:\n# Within weatherData, remove the column dateTime\nweatherData3 = within(weatherData, rm(dateTime));  \nThe advantage to this method, is that you can delete multiple columns at a time:\nweatherData3 = within(weatherData, rm(maxTemp, minTemp, avgTemp));",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#moving-columns",
    "href": "lessons/2-02_DataFrame_Modifications.html#moving-columns",
    "title": "2-02: DataFrame Modifications",
    "section": "8 Moving columns",
    "text": "8 Moving columns\nWe will make another copy of weatherData here:\nweatherData4 = weatherData3;\nThere is no great way to move data frame columns around in R because you cannot just say “move column X to position Y”.  Instead, you need to recreate the whole column order of the data frame to reflect the new position of every column – taking care to include every column.\n \nSo, let’s say we want to move the dateYear column we created earlier (Section 6.1) from the end of the data frame to the beginning.  We essentially need to recreate the 23 columns starting with dateYear first and then have the other 22 columns follow dateYear.\n\n8.1 using sequences to create the column order\nLuckily, we do not have to write out all 23 column names because we can use sequences to refer to multiple columns:\n# Move the last column (dateYear) to the beginning:\nweatherData4 = subset(weatherData2, select=c(dateYear, «maxTemp:windSusDir»));\n( : ) is the sequence operator and it says to take all the columns in between (and inclusive of) maxTemp and windSusDir.  Since maxTemp was the first column and windSusDir was the second to last column (the last being dateYear), this basically says all other columns except dateYear.\n \nSo, select=c(dateYear, maxTemp:windSusDir)) says to order the columns with dateYear first and every other column after that.\n\n\n\n\n\n\nFigure 9: the dateYear column moves from the end to the beginning\n\n\n\n\n\n8.2 A more complex moving example\nWe will create one last data frame:\nweatherData5 = weatherData4;\nIt is trickier to move columns in the middle because you need to keep track of all the other columns.\n \nLet’s says we want to move heatDays and coolDays right after tempDept. These are all columns in the middle of the data frame so you need to break the columns up more to order them the way you want.\n \nMoving heatDays and coolDays after tempDept creates 4 separate column sequences (Figure 10):\n\ndateYear:tempDept\nheatDays:coolDays\nrelHum:wetBulbTemp\nsunrise:windSusDir\n\n\n\n\n\n\n\nFigure 10: The four column sequences when moving columns in the middle of the data frame\n\n\n\n\n\n8.3 Multiple column sequences\nThe column sequences above get used in the select argument:\n  weatherData5 = subset(weatherData5, select=c(dateYear:tempDept, \n                                               heatDays:coolDays,\n                                               relHum:wetBulbTemp,\n                                               sunrise:windSusDir));\nAnd now we have the reordered columns:\n\n\n\n\n\n\nFigure 11: After the middle columns were moved",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#saving-the-data-frame-to-a-csv-file",
    "href": "lessons/2-02_DataFrame_Modifications.html#saving-the-data-frame-to-a-csv-file",
    "title": "2-02: DataFrame Modifications",
    "section": "9 Saving the data frame to a CSV file",
    "text": "9 Saving the data frame to a CSV file\nWe are going to use the weatherData4 data frame in the next lesson, so let’s save it to a CSV file.\n \nQuite often, people just call write.csv(), pass in the data frame and the file name to save it to:\nwrite.csv(weatherData5, file=\"data/Lansing2016Noaa-2-bad.csv\");  \nThe above code will add an extra column populated by the row numbers.  This is because, by default, write.csv() assumes the row numbers are row names.\n \nTo stop write.csv() from assuming the row numbers are row names, we need to set the argument row.names to FALSE:\nwrite.csv(weatherData5, file=\"data/Lansing2016Noaa-2.csv\",\n          row.names = FALSE);  \nIn the next lesson, we will open both of these CSV files and look at the difference.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#application",
    "href": "lessons/2-02_DataFrame_Modifications.html#application",
    "title": "2-02: DataFrame Modifications",
    "section": "10 Application",
    "text": "10 Application\nA) Save the data from Lansing2016NOAA.csv to a data frame named weatherData_app.\n \nB) Reorder weatherData_app to put all five of the wind columns immediately after the temperature columns.\n \nC) Remove the heatDays and coolDays columns from weatherData_app\n \nD) Using substrings, create a dateTimeNew vector that has the dates in this format: 2-digit date, 2-digit month, 2-digit year.\n\nSo, April, 20th 2016 would be 20-04-16\nSave dateTimeNew to a column in weatherData_app\nMove dateTimeNew to the second column in weatherData_app (do not remove the original dateTime column)\n\n \nE) Change tempDept in weatherData_app to 2 significant digits – do not use round()\n\nThe function for significant digits can be found in the Help for round()\nYou are overwriting the tempDept column\n\n \nSave the script as app2-02.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/2-02_DataFrame_Modifications.html#extension-index-values-in-output",
    "href": "lessons/2-02_DataFrame_Modifications.html#extension-index-values-in-output",
    "title": "2-02: DataFrame Modifications",
    "section": "11 Extension: Index values in output",
    "text": "11 Extension: Index values in output\nLet’s take a closer look at how the index values work in the Console output.\n \nWe are going to take a subset of the vector dateYear that goes backwards and only gives at every sixth value.\n \nSo, the subset will go: Dec 31, Dec 25, Dec 19, Dec 13…\nFirst, let’s create the sequence:\n\nstart at the last value (from = 366)\nends at the first value (to = 1)\nmoves backwards 6 values each time (by = -6)\n\n&gt; seq(from=366, to=1, by=-6)\n [1] 366 360 354 348 342 336 330 324 318 312 306 300 294 288 282 276 270\n[18] 264 258 252 246 240 234 228 222 216 210 204 198 192 186 180 174 168\n[35] 162 156 150 144 138 132 126 120 114 108 102  96  90  84  78  72  66\n[52]  60  54  48  42  36  30  24  18  12   6\nThe output has 61 values (366 / 6 = 61).  The first value is 366, the 18th value is 264, the 52nd value is 60, and the 61st value is 6.\n \nWhen we use the sequence to subset dateYear, we also get 61 values, representing the 61 dates on the 61 rows indexed:\n&gt; dateYear[seq(from=366, to=1, by=-6)]\n [1] \"12-31-2016\" \"12-25-2016\" \"12-19-2016\" \"12-13-2016\" \"12-07-2016\" \"12-01-2016\"\n [7] \"11-25-2016\" \"11-19-2016\" \"11-13-2016\" \"11-07-2016\" \"11-01-2016\" \"10-26-2016\"\n[13] \"10-20-2016\" \"10-14-2016\" \"10-08-2016\" \"10-02-2016\" \"09-26-2016\" \"09-20-2016\"\n[19] \"09-14-2016\" \"09-08-2016\" \"09-02-2016\" \"08-27-2016\" \"08-21-2016\" \"08-15-2016\"\n[25] \"08-09-2016\" \"08-03-2016\" \"07-28-2016\" \"07-22-2016\" \"07-16-2016\" \"07-10-2016\"\n[31] \"07-04-2016\" \"06-28-2016\" \"06-22-2016\" \"06-16-2016\" \"06-10-2016\" \"06-04-2016\"\n[37] \"05-29-2016\" \"05-23-2016\" \"05-17-2016\" \"05-11-2016\" \"05-05-2016\" \"04-29-2016\"\n[43] \"04-23-2016\" \"04-17-2016\" \"04-11-2016\" \"04-05-2016\" \"03-30-2016\" \"03-24-2016\"\n[49] \"03-18-2016\" \"03-12-2016\" \"03-06-2016\" \"02-29-2016\" \"02-23-2016\" \"02-17-2016\"\n[55] \"02-11-2016\" \"02-05-2016\" \"01-30-2016\" \"01-24-2016\" \"01-18-2016\" \"01-12-2016\"\n[61] \"01-06-2016\"\nAgain, the index values in square brackets is just given you the index value of the first value on the row.  So, 12-31 is the first value, 12-01 is the 5th value, 11-25 is the 7th value, and 01-06 is the 61st value.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-02: DataFrame Modifications"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html",
    "title": "1-15: Nested loops and Matrices",
    "section": "",
    "text": "nested for loop and breakpoints",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#purpose",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#purpose",
    "title": "1-15: Nested loops and Matrices",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nembedded for loops\nfunctions within a script\nusing matrices\nnamed values in a vector",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#questions-about-the-material",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#questions-about-the-material",
    "title": "1-15: Nested loops and Matrices",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript (only one this lesson): you can download the script here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#functions-within-a-script",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#functions-within-a-script",
    "title": "1-15: Nested loops and Matrices",
    "section": "3 Functions within a script",
    "text": "3 Functions within a script\nIn the previous two lessons, we created a separate script for the functions used in the lesson. For this lesson, the function isPrime3() has been put inside the main script. It is not usually best practice to put functions inside the calling script (why this is true will be an application question). However, there are many occasions where you will see functions put directly inside a script, so it is good to be familiar with this practice.\n\n3.1 functions need to be declared\nFunctions are like variables in that they store information to a named objects – and objects must be declared before they are used. If you are going to code a function directly in a script then you need to declare the function before you call the function.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#nesting-for-loops-isprime3",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#nesting-for-loops-isprime3",
    "title": "1-15: Nested loops and Matrices",
    "section": "4 Nesting for loops: isPrime3()",
    "text": "4 Nesting for loops: isPrime3()\nIn the function isPrime2(), the for loop cycles through all of the possible divisors for the dividend supplied by the caller. If none of the modulus calculations are zero (i.e., there is always a remainder when dividing), then we know the dividend is prime. isPrime3() extends isPrime2() so that it can check multiple dividends for prime instead of one.\n \nThis means we need nested for loops (for loops inside of for loops). The outer for loop cycles through each of the dividends and the inner for loop cycles though all the possible divisors for the specific dividend:\nfor(each dividend we want to check)         # outer loop\n{\n  for(each divisor of the current dividend) # inner loop\n  {\n    \n  }\n}\n\n4.1 Examples of isPrime3()\nBefore we look at the code, let’s look at an example of its use:\nprimeTest1 = isPrime3(c(12,13,14,15,16,17));\nIn the Environment, primeTest1, which stored the return value, is called a Named logi.\nprimeTest1: Named logi [1:6] FALSE TRUE FALSE FALSE FALSE TRUE\nlogi means the vector values are Boolean and Named means the individual vector values are named. You cannot see the names in the Environment but you can in the Console:\n&gt; primeTest1    \n   12    13    14    15    16    17  \nFALSE  TRUE FALSE FALSE FALSE  TRUE \nThe names are the same as the dividend values passed in by the caller. How this is done will be shown later in this lesson.\n \nOne advantage to Named variables is that you can index the vector by either name or position:\n&gt; primeTest1[\"14\"]\n   14 \nFALSE \n&gt; primeTest1[3]\n   14 \nFALSE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#nested-for-loops",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#nested-for-loops",
    "title": "1-15: Nested loops and Matrices",
    "section": "5 Nested for loops",
    "text": "5 Nested for loops\nisPrime3() has two for loops:\n\nouter loop: indexes through the range of dividends supplied by the caller\ninner loop: indexes through the range of divisors that will be used to check the dividend for prime\n\nthe range will be from 2 to one less than the dividend\n\n\n\n5.1 Outer loop\nThe job of the outer loop is cycle through each dividends. The index value, i, determines the current dividend, indexed from the dividends vector. The indexed dividend gets used inside the inner for loop.\n \nIn the example above (Section 4.1),\nprimeNum[1] = 12;\nprimeNum[2] = 13;\n…\nprimeNum[6] = 17;\n  «for(i in 1:length(dividends))»   \n  {     \n    primeNum[i] = TRUE;\n     \n    for(j in 2:(dividends[«i»]-1))     \n    {      \n      if(dividends[«i»] %% j == 0)       \n      {         \n        primeNum[«i»] = FALSE;       \n      }     \n    }   \n  «}»\n\n\n5.2 Inner loop\nisPrime2() used a for loop to check all the possible divisors for the dividend. That for loop is now the inner for loop in isPrime3(). The inner for loop cycles through every single value from 2 to one less that the current dividend, except the index variable is now j, because i was used by the outer loop.\n  for(i in 1:length(dividends))   \n  {  \n     primeNum[i] = TRUE;\n     \n    «for(j in 2:(dividends[i]-1))»  # 2 to one less than current dividend  \n    «{»       \n      if(dividends[i] %% «j» == 0)       \n      {         \n        primeNum[i] = FALSE;       \n      }     \n    «}»   \n  }\nThe return value needs to specific if each dividend is prime (TRUE) or not (FALSE). This means a vector of Boolean value needs to be set and returned to the caller. The vector returned to the caller needs to have the same number of values as dividends.\n\n\n5.3 Set up the return value\nThe function returns a Boolean vector to the caller that is the same length as dividends passed in by the caller. The vector is created in the first line of the function:\nprimeNum = c();\nLike before, we assume that the dividend is prime until proven otherwise, so at the beginning of the outer for loop, we set the current primeNum to TRUE:\nprimeNum[i] = TRUE;\nThe inner for loop goes through all possible divisors and tries to prove the dividend is not prime. If one of the divisors divides the dividend evenly then the dividend is not prime and switches the single value in the vector primeNum to FALSE.\nprimeNum[i] = FALSE;\nisPrime3 = function(dividends)\n{\n  «primeNum = c();»\n  \n  for(i in 1:length(dividends))   # outer loop\n  {\n    «primeNum[i] = TRUE;»  # default is that dividend is prime\n    \n    for(j in 2:(dividends[i]-1))  # inner loop\n    {\n      if(dividends[i] %% j == 0)  # i from outer loop indexing dividends\n      {\n        «primeNum[i] = FALSE;»  # dividend not be prime\n      }\n    }\n  }\n  names(primeNum) = dividends;\n  «return(primeNum);»\n}\n\n\n5.4 Return named vector\nIf we just returned primeNum to the caller, the return would be a Boolean vector that can be indexed by position only.\n \nIt order to make the return value more readable to the caller, we attached names to each vector value. Since the caller want to know the prime status of each dividend, it makes sense to name the return with the dividend values:\nnames(primeNum) = dividends;\nIn the end, we return primeNum back to the caller and primeNum gets save to the variable the caller set equal to the function:\nreturn(primeNum);\n\n\n5.5 Console Examples\nWe can call the function isPrime3() from within the script, as before (Section 4.1), or from the Console:\n&gt; isPrime3(30:39)\n   30    31    32    33    34    35    36    37    38    39 \nFALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE \n&gt; isPrime3(seq(from=17, to=57, by=10)) \n   17    27    37    47    57 \n TRUE FALSE  TRUE  TRUE FALSE \nIf the names(primeNum) = dividends; was taken out of the function then the return values would look like this:\n&gt; isPrime3(30:39)\n [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n&gt; isPrime3(seq(from=17, to=57, by=10)) \n[1]  TRUE FALSE  TRUE  TRUE FALSE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#two-dimensional-vectors",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#two-dimensional-vectors",
    "title": "1-15: Nested loops and Matrices",
    "section": "6 Two-dimensional vectors",
    "text": "6 Two-dimensional vectors\nOne of the more natural uses of nested for loops in R is the creation of two-dimensional vectors, also called a matrix.\n\n6.1 What is a matrix\nA matrix is somewhat of a cross between a vector and a data frame. A matrix has rows and columns like a data frame. However, like a vector, all values in a matrix are of the same type. This means that calculations on a matrix can be applied to all values as opposed to just one column. We will talk more about the use of matrices in a later lesson.\n\n\n6.2 Matrix creation\nJust like c() can be used to create a vector, matrix() can be used to create a matrix, with the arguments nrow and ncol giving the dimensions of the matrix.\n \nWe can create an empty matrix:\n&gt; matrix(nrow=4, ncol=3)\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n[3,]   NA   NA   NA\n[4,]   NA   NA   NA\nOr fill the matrix with values:\n&gt; matrix(data=1:12, nrow=4, ncol=3)\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n\n6.3 Subsetting a matrix\nLet’s save the matrix as the variable, testMatrix, so that we can subset the matrix:\n&gt; testMatrix = matrix(data=1:12, nrow=4, ncol=3)\nTo get a specific cell from the matrix, you need two values, a row and a column:\n&gt; testMatrix[1,2]\n[1] 5\n&gt; testMatrix[3,1]\n[1] 3\n&gt; testMatrix[4,3]\n[1] 12\nYou can get a whole row by leaving the column blank and a whole column by leaving the row blank:\n&gt; testMatrix[3,]\n[1] 3  7 11\n&gt; testMatrix[,2]\n[1] 5 6 7 8\n\n\n6.4 Matrices are often all combinations of two factors\nOne common use of a matrix is to create a table the contains every combination of two factors. For instance, we can have a vector of temperature values and a vector of humidity values and create a heat index matrix for every temperature/humidity combination:\n \n\n\n\nHeat index table from NOAA",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#multiplication-table",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#multiplication-table",
    "title": "1-15: Nested loops and Matrices",
    "section": "7 Multiplication table",
    "text": "7 Multiplication table\nWe will start with a simpler example: a multiplication table. For this table we will have two numeric vectors and populate the matrix with every possible multiplication between values in the two vectors:\n\n\n\n\n1\n2\n3\n\n\n\n\n1\n1\n2\n3\n\n\n2\n2\n4\n6\n\n\n3\n3\n6\n9\n\n\n4\n4\n8\n12\n\n\n5\n5\n10\n15\n\n\n\n\n7.1 Setting up the matrix\nFirst we need our numeric vectors:\n### Factors for multiplication table\nmult1 = 2:6;\nmult2 = 8:10;\nThen we need to create an empty matrix that has the correct number of rows and columns – given by the lengths of mult1 and mult2:\n### Create a matrix that will contain the calculations\nmultTable = matrix(nrow=length(mult1),\n                   ncol=length(mult2));\n\n\n7.2 Using nested for loops to fill matrix\nWe use nested for loops to cycle through every possible combination of mult1 and mult2.\n \nThe outer loop cycles through mult1 and the inner loop cycles through mult2:\nfor(i in 1:length(mult1))   # outer loop (for each mult1)\n{\n  for(j in 1:length(mult2)) # inner loop (for each mult2)\n  {\n    # The [i,j] cell get set to the multiplication of the corresponding i and j values\n    multTable[i,j] = mult1[i] * mult2[j];  \n  }\n}\nThe calculations go in this order:\n2*8, 2*9, 2*10, 3*8, 3*9, 3*10, 4*8, 4*9, 4*10, 5*8, 5*9, 5*10, 6*8, 6*9, 6*10.\n \nAside from cycling through values, the only code is this line:\nmultTable[i,j] = mult1[i] * mult2[j]; \nmultTable is a 2D matrix and needs 2 values to subset it (i and j). The [i, j] spot in the matrix gets populated the ith value of mult1 multiplied by the jth value of mult2.\n\n\n7.3 Naming rows and columns\nAfter we execute the for loop, we have a matrix that looks like this:\n&gt; multTable\n     [,1] [,2] [,3]\n[1,]   16   18   20\n[2,]   24   27   30\n[3,]   32   36   40\n[4,]   40   45   50\n[5,]   48   54   60\nLet’s make the matrix more visually informative by naming the rows and columns to the values in mult1 and mult2:\nrownames(multTable) = mult1;\ncolnames(multTable) = mult2;\nNow we get something that’s easier to read:\n\n\n\n&gt; multTable\n   8  9 10\n2 16 18 20\n3 24 27 30\n4 32 36 40\n5 40 45 50\n6 48 54 60\n\n\nFigure 1\n\n\n\nand can use the names to refer to rows and columns:\n&gt; multTable[\"4\", \"10\"]\n[1] 40\n&gt; multTable[\"2\", \"9\"]\n[1] 18\n\n\n7.4 Indexing named numeric values\nRownames and column names are always characters – this is why the values are in quotes. Numeric value are used to index rows and columns.\n\nmultTable[4, 10] is the value in row 4 and column 10, which does not exist so this would be an error.\nmultTable[\"4\", \"10\"] is the value in the row named “4” and column named “10”",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#wind-chill-matrix",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#wind-chill-matrix",
    "title": "1-15: Nested loops and Matrices",
    "section": "8 Wind Chill Matrix",
    "text": "8 Wind Chill Matrix\nWe will do a slightly more complicated matrix that combines temperature values and wind speed values to create a wind chill matrix\n\n8.1 Matrix setup\nWe first need our temperature and wind speed values. This time we will use sequences that gives every 10th value:\ntemps = seq(from=40, to=-20, by=-10); # 40, 30, 20...\nspeeds = seq(from=5, to=45, by=10);   # 5, 15, 25 ...\nAnd create a matrix that has the correct number of rows and columns based on the length of temps and speeds:\nwindChillTable = matrix(nrow=length(temps),\n                        ncol=length(speeds));\nFinally, we will add row names and column names to make the matrix easier to read:\nrownames(windChillTable) = temps;\ncolnames(windChillTable) = speeds;\n\n\n8.2 changing index names in nested for loops\nIt is common programming practice to use i and j for the index values of the outer and inner for loops, respectively. However, this is often not the most intuitive naming. For this example I will use row and col as the index values:\nfor(«row» in 1:length(temps))     # cycle thru temps for each row\n{\n  for(«col» in 1:length(speeds))  # cycle thru speeds for each column\n  {\n    windChillTable[row,col] = 35.74 +\n                              0.6215*temps[row] -\n                              35.75*(speeds[col]^0.16) +\n                              0.4275*temps[row]*(speeds[col]^0.16);\n  }\n}\n\n\n8.3 Populating the matrix\nThe windChillTable for loop operates almost exactly the same as the multiplication table. It has a outer loop the cycles through one set of values (temperatures) and send each temperature into the inner loop where it cycles through the second set of values (wind speeds). The main difference is the formula, supplied by the National Weather Service, is more complicated.\n \nBut, like the multiplication matrix, each cell in the wind chill matrix…\nwindChillMatrix[row,col]\nis set to a formula that contains the current temperature:\n    windChillTable[row,col] = 35.74 +\n                              0.6215*«temps[row]» -\n                              35.75*(speeds[col]^0.16) +\n                              0.4275*«temps[row]»*(speeds[col]^0.16);\nand the current wind speed:\n    windChillTable[row,col] = 35.74 +\n                              0.6215*temps[row] -\n                              35.75*(«speeds[col]»^0.16) +\n                              0.4275*temps[row]*(«speeds[col]»^0.16);\n\n\n\n\n\n\nFigure 2: The wind chill matrix in Rstudio",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#application",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#application",
    "title": "1-15: Nested loops and Matrices",
    "section": "9 Application",
    "text": "9 Application\n1) For this application, all functions, code, and answers to questions will go in one script named 1-15.r. Make sure you test all code thoroughly in your script.\n \n2) In comments answer:\n\nWhat is the disadvantage of putting a function in the same script that it is called from?\nHow many times does the inner for loop get executed in windChillTable() in Section 8.1?\nIf you reverse the order of the for loop in the multiplication matrix in Section 7.2 (i.e., outer loop cycles through mult2, inner loop cycles through mult1), what is the order of the calculations?\n\n \n3) Reverse the order of the for loops in the wind chill matrix so that the rows are wind speeds and columns and temperatures.\n \n4) Using nested for loops, create a heat index matrix\n\nThe formula for heat index is on page 2 of this document\n\n \n5) Create a wind chill matrix function that has temperature and wind speed as arguments and the return value is the wind chill matrix.\n \nSo, this code:\nwindChill = windchill(temps = seq(from=40, to=-20, by=-10), \n                      speeds = seq(from=5, to=45, by=10))\nshould save to windChill a matrix that looks like this Figure 2\n \n6) Challenge: Create a function that takes a vector of numbers as an argument and returns every pair where one number evenly divides another number.\n\nSo, if you have the vector c(3,4,7,12,14,15)\n\nyou have four pairs: (1) 3 divides 12, (2) 4 divides 12, (3) 7 divides 14, (4) 3 divides 15\nDo not include pairs with the same number (e.g., 3 divides 3, 14 divides 14)\n\nthe answer should look like this – the order of the pairs does not matter:\n&gt; evenlyDivides( c(3,4,7,12,14,15) )\n 3   4  7  3\n12  12 14 15\n\n \nSave the script as app1-15.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-15_Nested_Loops_and _Matrices.html#manually-create-named-vectors",
    "href": "lessons/1-15_Nested_Loops_and _Matrices.html#manually-create-named-vectors",
    "title": "1-15: Nested loops and Matrices",
    "section": "10 Manually create Named vectors",
    "text": "10 Manually create Named vectors\nYou can manually create a named vector in the Console:\n&gt; myVec = c(1,2,3,4) \n&gt; names(myVec) = c(\"z\", \"y\", \"x\", \"w\") \n&gt; myVec z y x w  1 2 3 4 \nnames() is used to both set the names of vectors and display the names:\n&gt; names(myVec) \n[1] \"z\" \"y\" \"x\" \"w\" \n&gt; names(myVec)[3] [1] \"x\"",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-15: Nested loops and Matrices"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html",
    "href": "lessons/1-13_Functions.html",
    "title": "1-13: Functions",
    "section": "",
    "text": "4 parts of programming",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#purpose",
    "href": "lessons/1-13_Functions.html#purpose",
    "title": "1-13: Functions",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreate reusable code (a function)\nUse arguments in functions\nUse return values in functions",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#sec-downloads",
    "href": "lessons/1-13_Functions.html#sec-downloads",
    "title": "1-13: Functions",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nMain Script: download the main script here\nFunction Script: download the function script here\n\n \nFunction scripts should never include rm(list=ls()). The reason is that function scripts are called from other script and rm(list=ls()) would clear the Environment of the calling script.\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#reusable-scripts",
    "href": "lessons/1-13_Functions.html#reusable-scripts",
    "title": "1-13: Functions",
    "section": "3 Reusable scripts",
    "text": "3 Reusable scripts\nFunctions are self-contained scripts that performs a common task. For example, there are statistical functions that take a vector of values and return the statistical value (e.g., mean() and median()), functions that take data and create plots (e.g., plot(), boxplot()), and functions that interact with the Console (e.g., cat() and print()). The functions listed above are come with R and are designed to be used in any script.\n \nBroadly, there are three types of functions in R:\n1) Base-R: these are function that come with R\n2) Packages: extensions of R (e.g., ggplot2, tidyverse – covered later in class)\n3) User-created: the main focus of the next few lessons",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#parts-of-a-function",
    "href": "lessons/1-13_Functions.html#parts-of-a-function",
    "title": "1-13: Functions",
    "section": "4 Parts of a function",
    "text": "4 Parts of a function\nAll functions, whether base-R, in packages, or user-created, have the same four components: name, arguments, codeblock, and return value. \n \nIn the Help tab we can see all components except the codeblock for the statistical function, mean():\n\n\n\n\n\n\nFigure 1: Info about the function mean() in the Help tab\n\n\n\n\n4.1 Name\nFunctions, like variables, are named objects that stores information.  The difference is that variables store values whereas functions store script.\n \nThe name of the function in Figure 1 is mean(). When referring to a function, we often put parentheses after the name to indicate that this object is a function, not a variable.\n\n\n4.2 Arguments (inputs to a function)\nArguments are variables whose values are supplied by the caller and used by the function.\n \nIn the Help tab (Figure 1) we see that the Default S3 Method (the most commonly used method) for mean() has three arguments (x, trim, na.rm). Note: the ( … ) indicates that mean() can be extended with more arguments.\nmean(x, trim = 0, na.rm = FALSE, ...)\nIn this case, x is the vector of values that the caller want to find the mean for. Note: x is often used by R as a generic argument for input values.\n \nThe other two arguments, trim and na.rm, are tweaks to mean() that give mean() more functionality. trim can be used to remove extreme values and na.rm can be used to ignore NA values. trim and na.rm have default values (trim = 0, na.rm= FALSE) meaning the caller does not need to provide values for these arguments unless they want to change the default functionality of mean().\n \nExtension: Functions without arguments\n\n\n4.3 Codeblock\nIn order to interact with a function, the caller needs to know the functions’ (1) name, (2) arguments, and (3) return value. The caller generally does not need to know the rest of the code inside the codeblock, and this code is usually hidden from the caller.\n \nThe Help tab does not show the codeblock for mean(). However, you can see the codeblock for mean() using this code in Console:\n&gt; getAnywhere(\"mean.default\");\nfunction (x, trim = 0, na.rm = FALSE, ...) \n«{»\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x &lt;- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n &lt;- length(x)\n    if (trim &gt; 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim &gt;= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo &lt;- floor(n * trim) + 1\n        hi &lt;- n + 1 - lo\n        x &lt;- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n«}»\nFor a full explanation of why you need to use mean.default() instead of mean() go to Extension: codeblock for mean()\n \nThe main takeaway is that, like if-else statements and for loops, all functions have an associated codeblock that is designated by curly bracket ( { } ). We will see more function codeblocks when we look at the function script for this lesson.\n\n\n4.4 Return value (output of a function)\nWhen a caller calls a function, they usually expect to get some information back from the function. In the case of mean(), the caller is expecting the mean value of the vector provided as an argument. The Value section of Figure 1 gives information about what the function is returning to the caller. mean() returns alength-one object.\n \nIn other words, the return value from mean() is one value: the mean.\n\n\n4.5 Using a function\nWe will call mean() multiple times with the same vector of values but changing the arguments. One value in the vector is NA, which we need to deal with because the mean of any vector with an NA value is NA. Note: this was covered in more detail in lesson 5 with median().\n \nThere are four calls below to the function mean(). Each call passes in one or more argument value, and saves the return value from the function to the variables named ret1, ret2, ret3, and ret4.\ntestVector = c(10, 15, 5, NA, -100, 10);  # has an NA value\nret1a = mean(x=testVector);               # uses default for na.rm, which is FALSE\nret1b = mean(x=testVector, na.rm=FALSE);  # same as above\nret1c = mean(x=testVector, na.rm=TRUE);   # remove NAs\nret1d = mean(x=testVector, na.rm=TRUE, trim=0.1);  # remove NAs and trims high and low value\nIn the Environment we can see the return values stored in the variables.\nret1a: NA_real_\nret1b: NA_real_\nret1c: -12\nret1d: 10\n\nret1 and ret2 are NA_real because there was an unignored NA value in the vector and we did not choose to remove the NA. note: NA_real_ means the value is NA but should be a real number (as opposed to a string value).\nret3 is -12, the mean of the values when the NA is removed\nret4 is 10, the mean of the values when the high (15) and low (-100) values are also removed. Note: trim=0.1 means trim top and bottom 10%.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#using-a-function-script",
    "href": "lessons/1-13_Functions.html#using-a-function-script",
    "title": "1-13: Functions",
    "section": "5 Using a function script",
    "text": "5 Using a function script\nSo far we have used base-R functions. Now we will use functions from script for the lesson named 1-13_myFunctions.R (in Section 2).\n\n5.1 Function header\nIn 1-13_myFunctions.R, there are two functions that calculate mean called mean_class() and mean_adv(). Both functions have an argument named vec, which is the values that the caller want to find the mean of. mean_adv() has a second argument called removeNA, which is set to a default value of FALSE.\n \nThe first line of a function is called the header and gives the names and arguments needed to use the function.\n\n\n\nmean_class = function(vec)\n\nmean_adv = function(vec, removeNA = FALSE)\n\n\nFigure 2: Headers for the two functions in 1-13_myFunctions.R\n\n\n\n\n\n5.2 Sources the functions script\nSince the functions are in a separate script, we must first read in the functions script to gain access to the functions. In the main lesson script, 1-13_Functions.R. we read in the functions script using source() and the path to the function script as the argument (in this case: scripts/myFunctions.R):\nsource(\"scripts/1-13_myFunctions.R\");\nThe above code adds the two functions from 1-13_myFunction.R to the Functions section of the Environment, giving the script the ability to use the functions.\n\n\n\nFunctions\nmean_adv:   function (vec, removeNA = FALSE)\nmean_class: function (vec)\n\n\nFigure 3: Environment after sourcing the functions script\n\n\n\nnote: source(), like the Source button, executes all code within a script\n\n\n5.3 Parts of the functions\nLooking at the two functions in 1-13_myFunctions.R, we see the four components of a function:\n\nname: mean_class() and mean_adv()\narguments:\n\nmean_class() has one: vec\nmean_adv() has two: vec and removeNA\n\ncodeblock: everything between ( { ) and ( } ) – this is the code that gets executed when the function is called\nreturn value: both functions return the mean value using return()",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#using-the-function-script",
    "href": "lessons/1-13_Functions.html#using-the-function-script",
    "title": "1-13: Functions",
    "section": "6 Using the function script",
    "text": "6 Using the function script\nThe function, mean_class() solves for the mean by cycling through all the values in vec using a for loop, adds the values, and then dividing that by the number of values in vec.\n\n6.1 Header line of a function\nThe first line of a function (i.e., the header) gives the name of the function (mean_class) and the arguments (vec):\nmean_class = function(vec)\nvec is the vector that the caller wants to find the mean for. Since vec has no default value, vec must be supplied by the caller.\n\n\n6.2 Function codeblock\nFunctions, just like if() and for(), have codeblocks attached to them that are executed when the function is called. The codeblock is encapsulated with curly brackets { }.\nmean_class = function(«vec»)\n{ # start function codeblock\n  vecAdded = 0; ### state variable -- starts at 0\n\n  ### Use the for loop to cycle through all the values in vec and add them to vecAdded\n  for(i in 1:length(«vec»))\n  {\n    ### Adds the next value in vec\n    vecAdded = vecAdded + «vec»[i];\n  }\n\n  ### Divide the total value by the number of values to get the mean\n  meanVal = vecAdded / length(«vec»);\n\n  ### return the mean value to the caller\n  «return(meanVal)»;\n} # end function codeblock\nA function codeblock operates like any other R code with two exceptions:\n\nThe arguments in the function call are variables used in the codeblock. So, the caller gives a value to vec and the codeblock uses this value.\nFunctions explicitly return a value to the callerusing return(). In this case, meanVal is returned.\n\n\n\n6.3 Return value\nTo the caller a function acts largely like a block box that takes input (arguments) and has an output (the return value). The return value is sent to the caller using the function return():\nreturn(meanVal);\nWhen the caller calls the function, they often set a variable equal to the function (e.g., retVal in the code below). The return value is stored in the variable set equal to the function:\nretVal = mean_class(c(3,5,2,7));  # saves the return value (4.25) to the variable retVal\n\n\n6.4 Calling the function\nRemember that a function, like a variable, cannot be used unless it is put in your Environment, this is what source(\"scripts/1-13_myFunctions.R\") does.\n \nWe will call mean_class() multiple times and save the results to four different variables:\nret2a = mean_class(vec=c(6,2,8,3));        # 4.75\n# ret2b = mean_class();                    # error because argument not provided\nret2c = mean_class(vec=c(6,2, NA, 8,3));   # NA_Real because of the NA \nret2d = mean_class(vec=c(6,2,8,3,75,200)); # 49\nanotherVec = c(7, -7, 10, -8);\nret2e = mean_class(vec=anotherVec);        # can use a predefined vector\nEach call to the function mean() passes in values for one or more arguments and saves the return value to a variable (ret2a, ret2b…). In the Environment we can see the return values stored in the variables.\nret2a: 4.75 \nret2c: NA_real_\nret2d: 49\nret2e: 1",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#mean_adv",
    "href": "lessons/1-13_Functions.html#mean_adv",
    "title": "1-13: Functions",
    "section": "7 mean_adv",
    "text": "7 mean_adv\nJust like mean_class(), the function, mean_adv() solves for the mean by going through all the values, adding them up, and then dividing that answer by the number of values in vec. The difference is that mean_adv() checks for NA values and gives the caller the option to remove them.\n\n7.1 Header line of a function\nThe header for mean_adv() looks similar to mean_class() except there is a second argument, removeNA, and this argument has a default value of FALSE. This means if the caller does not set removeNA, it will be FALSE (i.e., NA values will not be removed).\nmean_adv = function(vec, removeNA = FALSE)\n\n\n7.2 Codeblock\nIn the codeblock attached to mean_adv(), we need to conditionally handle the situation where NA values are to be removed, based on the value of the argument removeNA. We do this using an if-else-if structure inside the for loop.\nmean_adv = function(vec, removeNA = FALSE)\n{\n  vecAdded = 0; ### state variable -- starts at 0\n  numNA = 0;    ### second state variable that counts the number of NA values\n\n  ### Use the for loop to cycle through all the values in vec and add them to vecAdded\n  for(i in 1:length(vec))\n  {\n    «if»(is.na(vec[i]) == FALSE)  ### If the value is not NA\n    {\n      ### Adds the next value in vec\n      vecAdded = vecAdded + vec[i];\n\n    }«else if» (removeNA == TRUE)   ## we have a NA value and want to remove it\n    {\n      ### Don't add the value, instead increase the number of NA by 1\n      numNA = numNA +1;\n    \n    }«else if» (removeNA == FALSE)  ## we have a NA value and don't want to remove it\n    {\n      ### We cannot solve for a mean with an NA so the return value has to be NA\n      return(NA);  # this will end the function\n    }\n    \n    ### Divide the total value by the number of values that are not NA to get the mean\n    meanVal = vecAdded / ( length(vec) - numNA);\n  \n    ### return the mean value to the caller\n    return(meanVal);\n  }\nThere are three possible situations, hence three parts to the if-else-if structure:\n\nif(is.na(vec[i]) == FALSE)  # The current vec value is not NA\n\nThe ith value is not NA (i.e., it’s a number), so add the number to the total\n\nelse if (removeNA == TRUE)  # We have a NA value and want to remove it\n\nignore the NA value and add 1 to the number of NA values\n\nelse if (removeNA == FALSE) # We have a NA value and don't want to remove it\n\nwe know the return value has to be NA – so return NA\n\n\n\n\n7.3 return value\nJust like break immediately ends a for loop, return() immediately ends a function.\n \nThere are two return() statements in this function:\n\nOnce an NA value is hit, and the caller did not ask for NA values to be removed. At this point we know the answer is NA. There is no point in checking any more values in the vector. We put a return() to end the function and pass NA back to the caller\nAt the end of the codeblock after the for loop cycles through all the values in the vector.\n\n \nSince return() ends a function, only one return() can be executed per function call.\n\n\n7.4 Using the function\nret3a = mean_adv(vec=c(6,2,8,3));       # 4.75\n# ret3b = mean_adv();                   # will cause error because argument not provided \nret3c = mean_adv(vec=c(6,2, NA, 8,3));  # will be NA (removeNA default is FALSE)\nret3d = mean_adv(vec=c(6,2, NA, 8,3), removeNA = TRUE);  # 4.75\nret3e = mean_adv(vec=c(6,2,8,3, 75,200)); # 49\nEach line of code above calls the function mean(), passes in values for one or more arguments, and saves the return value from the function to a variable. In the Environment we can see the return values stored in the variables.\nret3a:  4.75 \nret3c:  NA_real_\nret3d:  4.75\nret3e:  49",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#application",
    "href": "lessons/1-13_Functions.html#application",
    "title": "1-13: Functions",
    "section": "8 Application",
    "text": "8 Application\n1) For this application you need to create two scripts:\n\na functions script named app1-13_functions.r that contains the functions created in this application\na main script named app1-13.r where you will answer questions in comments and test the functions created in app1-13_functions.r\nsource() your functions script from the main script\nMake sure you test all the functions thoroughly in your main script. I want to see the test code in app1-13.r.\n\n \n2) For the function mean_adv(), answer the following questions in comments in the main script:\n\nWhy do we count the number of NAs?\nFor the two else if statements, what assumption can be made about the ith value being checked? Why can we make this assumption?\nWhy does removeNA have a default value but vec does not?\nUnder what circumstances, if any, will this line not be executed?\n\nmeanVal = vecAdded / ( length(vec) - numNA);\n \n3) Create a function that returns either the standard deviation or variance of a vector:\n\nThere should be two arguments: (1) the vector and (2) something that allows the caller choose whether they want the standard deviation or the variance of the vector.\nDo not use var() or sd() – use your own formula. You can use the code from application 1-03 as a starting point.\n\n \n4) Create a function that converts a temperature from either Celsius to Fahrenheit or Fahrenheit to Celsius\n\nThe conversion from Celsius to Fahrenheit is: \\(F=\\frac{9}{5} C+32\\)\nThe user needs to pass in two arguments: (1) the temperature value and (2) which direction they want to convert\n\n \n5) Create a function that takes a single number from 0 to 100 and returns a grade from A to F. \n\nReturn an error if the number is less than 0 and return a different error if the number is greater than 100.\n\n \n6) Create a function that takes multiple numbers from 0 to 100 and return the percentage of values that are above 60.\n\nDo not count numbers less than 0 or greater than 100\nTest the function with 10 random numbers from -20 to 120\n\nsample(-20:120, size=10);\n\n\n \nSave the script as app1-13.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#sec-meanCodeblock",
    "href": "lessons/1-13_Functions.html#sec-meanCodeblock",
    "title": "1-13: Functions",
    "section": "9 Extension: getAnywhere() and mean()",
    "text": "9 Extension: getAnywhere() and mean()\ngetAnywhere() is a base R function that allows you to see the codeblock associated with other base-R functions. But if you pass in mean as the argument you get this:\n&gt; getAnywhere(\"mean\") \nA single object matching ‘mean’ was found \nIt was found in the following places   \n  package:base   \n  namespace:base with value  \n  \nfunction (x, ...)  \nUseMethod(\"mean\") &lt;bytecode: 0x000001c00fe2d450&gt; \n&lt;environment: namespace:base&gt;\nThis is because mean() is a function that calls other functions (sometimes called a generic function) depending on the argument type (e.g., numeric, string, date).\n \nTo find the possible functions that mean() calls, we use methods()\n&gt; methods(\"mean\") \n[1] mean.Date     mean.default  mean.difftime mean.POSIXct  mean.POSIXlt \nThere are five possible calls. Four of the calls are related to times and dates. Only the second function, mean.default(), handles number (you can look this up in the Help tab). To see the codeblock for the function that handles numeric values, we need to pass mean.default into the argument of getAnywhere():\n&gt; getAnywhere(\"mean.default\");\n A single object matching ‘mean.default’ was found\nIt was found in the following places\n  package:base\n  registered S3 method for mean from namespace base\n  namespace:base\nwith value\n\nfunction (x, trim = 0, na.rm = FALSE, ...) \n{\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x &lt;- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n &lt;- length(x)\n    if (trim &gt; 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim &gt;= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo &lt;- floor(n * trim) + 1\n        hi &lt;- n + 1 - lo\n        x &lt;- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n}\n&lt;bytecode: 0x000001c00fc0f500&gt;\n&lt;environment: namespace:base",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-13_Functions.html#extension-functions-without-arguments",
    "href": "lessons/1-13_Functions.html#extension-functions-without-arguments",
    "title": "1-13: Functions",
    "section": "10 Extension: Functions without arguments",
    "text": "10 Extension: Functions without arguments\nMost of the time when you call a function, including the ones above, an argument is needed inside the parentheses.\n \nThis is not always true, for instance c(), which creates a vector, is often used without an argument, which means the vector initially has no values, also called a NULL vector:\nvec1 = c();         # a vector that initially has no values (an empty vector) \nvec2 = c(5,2,9,1);  # a vector with four values\nvec1: NULL\nvec2: num [1:4] 5 2 9 1",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-13: Functions"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#purpose",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#purpose",
    "title": "1-11: For Loops and State Variables",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nShow more example of using for loops with state variables",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#questions-about-the-material",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#questions-about-the-material",
    "title": "1-11: For Loops and State Variables",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#for-loops-a-vital-skill",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#for-loops-a-vital-skill",
    "title": "1-11: For Loops and State Variables",
    "section": "3 For loops – a vital skill",
    "text": "3 For loops – a vital skill\nIn this lesson, we will be using for loops and if() statements to do common calculations on a vector (e.g., finding the sum, finding maximum value, checking if any value meets a condition).  There are functions for all of these calculations in R that are easier to use than a for loop.  Hoever, the best way to learn for loops is to use them in applications that are easy to understand.  You are going to have many situations where you cannot rely on an R function or package – and for loops with embedded if-else statements are the best solution.\n \nUnderstanding how to effectively use for loops is perhaps the most vital skill you will learn as a programmer.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#multiple-state-variables",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#multiple-state-variables",
    "title": "1-11: For Loops and State Variables",
    "section": "4 Multiple state variables",
    "text": "4 Multiple state variables\nWe ended last lesson by introducing you to the concept of a state variable – a state variable is a variable that updates information (e.g., the state of some value) as the for loops cycles.  The state variable is always declared outside of the for loop and modified within the for loop.\n \nNote: if the state variable was declared inside the for loop then it would be re-initialized every time the for loop cycles.\n \nThe state variable needs to be initialized to some default value – or the value the state variable should be if the for loop has no cycles (an empty vector).  In the last example from last lesson, the state variable sunnyDays was initialized to 0, which is the correct value if the condition inside the for loop is FALSE every cycle..\n\n\n\nsunnyDays = 0; # state variable -- will hold the count of sunny days\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")  # was the day sunny\n  {\n    sunnyDays = sunnyDays +1;   # it was -- increase sunnyDays by 1\n  }\n  # there is no else here -- we don't care about non-sunny days\n}\n\n\nFigure 1: Using a state variable to calculate how many sunny days there was in noonCond (from last lesson)\n\n\n\nNow, let’s expand this for loop to count for two different conditions: Sunny and Rain.  We will now need two state variables – initializing both values to 0. \n\n\n\nsunnyDays = 0; # state variable -- will hold the count of sunny days\nrainyDays = 0; # state variable -- will hold the count of rainy days\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    sunnyDays = sunnyDays +1; # increases sunnyDays by 1\n  # We use else if here because we know \"Sunny\" and \"Rain\" are mutually exclusive\n  }else if(noonCond[i] == \"Rain\")\n  {\n    rainyDays = rainyDays +1; # increases rainyDays by 1\n  }\n}\n\n\nFigure 2: Using multiple state variables\n\n\n\nAnd we can look in the Environment tab to see what the final values of rainyDays and sunnyDays were:\nrainyDays:   3\nsunnyDays:   6\nYou can double check the noonCond vector and see there are 6 sunny and 3 rain days.\n&gt; noonCond\n[1] \"Cloudy\" \"Cloudy\" \"Sunny\" \"Rain\" \"Fog\" \"Sunny\" \"Sunny\" \"Cloudy\" \"Rain\" \"Rain\"\n[11] \"Snow\" \"Sunny\" \"Sunny\" \"Sunny\"\n\n4.1 The if-else statement\nIn Figure 2 we used an if-else structure to separate the two conditional statement (Sunny and Rain).  We could have just used two if() statements.  In other words, the 10th line could have been written:\nif(noonCond[i] == \"Rain\")\nBut we would be checking for Rain on days that we already know is Sunny.  noonCond on a specific day cannot be both Sunny and Rain (i.e., they are mutually exclusive) – so the extra checks are not needed.  The code would still work, just not be as efficient.  But, efficiency becomes more important as the number of values in your vector increases – and efficiency means quicker execution time.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variables-uses",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variables-uses",
    "title": "1-11: For Loops and State Variables",
    "section": "5 State variables uses",
    "text": "5 State variables uses\nWe can also use state variables on numeric values to count how many times a condition is met.\n \nIn this case, we will look at how many time\n\nthe temperature was greater than 60\nthe temperature was less than 50.\n\n \nWe are looking at two situations so we need two state variables.  Again, we initialize the values of the state variables to 0 because 0 would be the correct answer if the conditions inside the if-else statement were FALSE for every day.\n\n\n\ntempGT60 = 0; # days with temperatures greater than 60\ntempLT50 = 0; # days with temperatures less than 50\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &gt; 60)      # high temp more than 60\n  {\n    tempGT60 = tempGT60 +1;\n  }else if(highTemps[i] &lt; 50) # high temp less than 50\n  {\n    tempLT50 = tempLT50 +1;\n  }\n}\n\n\nFigure 3: Using multiple state variables to look at temperature values\n\n\n\nAnd we can look in the Environment tab to see the final values of the state variables:\ntempGT60:   2\ntempLT50:   4\nAgain, you can check highTemps in the Console to see this is correct:\n&gt; highTemps\n[1] 57 50 54 40 39 58 60 53 55 44 39 54 61 75\n\n5.1 Sequences with the for loops\nPerhaps you do not want to check every day – maybe you only want to check every-other day.  In this case you use seq() in the for loop to subset the days:\ntempGT60odd = 0; # odd indexed days with temperatures greater than 60\ntempLT50odd = 0; # odd indexed days with temperatures less than 50\n\nfor(i in «seq(from=1, to=numDays, by=2)») # every other day (1,3,5,7...)\n{\n  if(highTemps[i] &gt; 60)\n  {\n    tempGT60odd = tempGT60odd +1;\n  }else if(highTemps[i] &lt; 50)\n  {\n    tempLT50odd = tempLT50odd +1;\n  }\n}\nAnd, again, the Environment tab will show the final values of the state variables:\ntempGT60odd:   1\ntempLT50odd:   2",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variable-to-sum-values",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#state-variable-to-sum-values",
    "title": "1-11: For Loops and State Variables",
    "section": "6 State variable to sum values",
    "text": "6 State variable to sum values\nWe have used state variables to count values – adding 1 to the state variable during each cycle of a for loop when a condition is TRUE.\n \nNext we will use a state variable to add values. In this case, adding up precipitation values to get the total precipitation.  Again, we initialize the state variable to default value of 0, because 0 is the answer if there is nothing to add.\n \nThe difference is that, instead of adding 1 to the state variable, we add the precipitation for that day, or precip[i] where i is the index variable.\n \nNote: there are no if() statements in this for loop because we are unconditionally adding every days’ precipitation to the total precipitation\n\n\n\ntotalPrecip = 0;\nfor(i in 1:numDays)\n{\n  totalPrecip = totalPrecip + precip[i];\n}\n\n\nFigure 4: Using a state variable to add values",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#if-any-checks",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#if-any-checks",
    "title": "1-11: For Loops and State Variables",
    "section": "7 if-any checks",
    "text": "7 if-any checks\nNow we are going to use a state variable to see if any value in the vector meets a condition.\n \nWe are going to initialize the state variable to FALSE and if any variable meets the condition, the state variable will be changed to TRUE.  The condition we will look is whether a temperature is less than 40.\n \nTrap: Using T and F to represent TRUE and FALSE is a bad idea\n\n\n\nanyDayLT40 = FALSE;\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &lt; 40)\n  {\n    anyDayLT40 = TRUE;\n  }\n}\n\n\nFigure 5: Using for loops to find out if any value in a vectors meets a condition\n\n\n\nAfter executing the script, we see that anyDayLT40 in TRUE in the Environment.  You can easily test other scenarios by changing the if() condition.  For example:\n  if(highTemps[i] &lt; 30)  # this will produce a FALSE result\n\n7.1 The break statement\nIn Figure 5, the for loop is inefficient because it will continue to check every temperature value even after one of them passes the condition of being greater that 40.  This is not necessary because we only care if at least one value meets the condition. We do not care if more than one meets the condition\n \nTo make the code more efficient, we can add a break statement to the codeblock attached to the if(). break is a command that tells R to immediately exit the for loop. In other words, if the 5th value passes the condition, the for loop will end and not cycle through values 6-14.\n  # A more efficient check if any value in highTemps is less than 40\n  anyDayLT40_2 = FALSE;     # initialize state variable to FALSE\n  for(i in 1:numDays) \n  {\n    if(highTemps[i] &lt; 40)\n    {\n      anyDayLT40_2 = TRUE;  # found a value -- change state variable to TRUE\n      «break;»                # exits the for loop immediately\n    }\n  }\nA break statement in the above code will not meaningfully speed up this script, but it will speed up script that is cycling through 1000s or 10000s of times through a for loop.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#finding-the-highest-or-lowest-value",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#finding-the-highest-or-lowest-value",
    "title": "1-11: For Loops and State Variables",
    "section": "8 Finding the highest (or lowest) value",
    "text": "8 Finding the highest (or lowest) value\nFor the last example we are going to find the highest temperature in a vector.  We do this by cycling though each value in the vector highTemps and comparing it to the current highest temperature.  If the new value is higher than the highest temperature, then we set that to be the highest temperature.\n \nHere is the code – we will go over it in more detail in a bit:\n\n\n\nhighestTemp = 0;  # initialize the state variable to 0\n\nfor (i in 1:numDays)\n{\n  if(highTemps[i] &gt; highestTemp) # is this day's value grater than the current high\n  {\n    # this day's value is higher -- set highestTemp to this value\n    highestTemp = highTemps[i]; \n    # browser();  # uncomment to pause the script's execution at this point\n  }\n}\n\n\nFigure 6: Finding the highest value in a vector\n\n\n\n\n8.1 Using browser() to pause your script\nThe for loop above is going through every value in the highTemps in order.  Each time a new high temperature is found, highestTemp is set top that value.  So, highestTemp is going to start at 0 (the initial value), and change multiple times.\n \nIf we put highTemps in the Console, we can see each time a new highest temperature will occur:\n&gt; highTemps\n [1] «57» 50 54 40 39 «58» «60» 53 55 44 39 54 «61» «75»\nA new highest temperature will be discovered 5 times: 57, 58, 60, 61, and 75 (cycles 1, 6 , 7, 13, and 14).\n \nWe can use browser() to see this, too.  browser() is an instruction to pause the script in the middle of execution and put it in debug mode.\n \nIf we uncomment the browser() line in Figure 6:\n   # browser();  # uncomment to pause the script's execution at this point\nThen the script will pause at that line when the condition if(highestTemp &gt; highTemps[i]) is TRUE, which happens 5 times (out of 14 cycles) when i = 1, 6, 7, 13, and 14.\n \nbrowser() will initially pause the script when i = 1 and you can click Continue to pause the script when i = 6, 7, 13, and 14.  For now, the only other button you should know is Stop, which ends debug mode.\n\n\n\n\n\n\nFigure 7: The script Sourced with browser() uncommented after Continue is clicked twice\n\n\n\n \nDebug mode is a complicated topic that will be more fully explored in future lessons.\n\n\n8.2 Initializing the state variable\nI initialized the state variable, highestTemp, to 0 – and that works in this case because we know there are temperatures greater than 0.  But, if all the temperatures were negative, then this would not work (I will let you answer why this would not work in the Application).\n \nA better solution is to set the state variable to the first value in the vector (highTemps[1]).  This makes the first value in the highTemps vector the default answer.  In other words, if every condition check is FALSE (i.e., no temperature is greater than the first) then the first temperature is the highest temperature.\n \nNote: this means you could start the indexing variable i at 2 instead of one.  You do not need to test the 1st value against the 1st value – there is no harm but it is a tiny bit inefficient.\n\n\n\nhighestTemp2 = highTemps[1];  # set the state variable to the first value in the vector\n\nfor(i in 1:numDays) # could be (i in 2:numDays)\n{\n  if(highTemps[i] &gt; highestTemp2) # is this day's value greater than the current high\n  {\n    highestTemp2 = highTemps[i];  # set the state variable to the current day's value\n    ### another way to debug your script...\n    cat(\"Day \", i, \" the highest temp changed to \", highTemps[i], \"\\n\", sep=\"\");\n  }\n}\n\n\nFigure 8: Using a for loop to find the highest value in a vector\n\n\n\nWhenever you are looking for the most extreme value in a vector, it is best to set the state variable to the first value in the vector.  By doing this, you do not have to guess what kind of values you are going to get.\n\n\n8.3 Debug with cat()\nUsing cat() to output information to the Console is a quick-and-dirty, if not the most robust, way to debug your script. In this case, cat() shows the four time the highest temperature was changed in the 14 cycles of the for loop.\nDay 6 the highest temp changed to 58\nDay 7 the highest temp changed to 60\nDay 13 the highest temp changed to 61\nDay 14 the highest temp changed to 75\nRemember to remove or comment out your cat() statements that are used for debugging before sharing your script.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#application",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#application",
    "title": "1-11: For Loops and State Variables",
    "section": "9 Application",
    "text": "9 Application\n1) In comments answer: What happens if you set the state variable to 0 when trying to find the highest temperature if all temperatures are negative.\n \n2) Find out if any of the even days were less than 40 degrees. Hint: use seq()\n\nadd code to exit the for loop as soon as the condition is met\nadd code that outputs to Console the first day that met the condition\n\n \n3) Find the mean low temperature using for loops: get the total and divide by the number\n \n4) In one for loop find out how many days had:\n\n1 inch or more rain\nbetween 0.1 and 1 inch of rain (not inclusive of 0.1 or 1)\n0.1 inches or less rain\n\n \n5) Find out the lowest low temp and output to the Console the lowest temperature and the date it occurred on.\n \n6) On days that were cloudy: find the highest temperature and the mean temperature .\n \nSave the script as app1-11.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-11_For_Loops_and_State_Varibles.html#trap-using-t-and-f-to-represent-true-and-false-is-a-bad-idea",
    "href": "lessons/1-11_For_Loops_and_State_Varibles.html#trap-using-t-and-f-to-represent-true-and-false-is-a-bad-idea",
    "title": "1-11: For Loops and State Variables",
    "section": "10 Trap: Using T and F to represent TRUE and FALSE is a bad idea",
    "text": "10 Trap: Using T and F to represent TRUE and FALSE is a bad idea\nThe terms TRUE and FALSE are reserved keywords in R (just like if, for, else…) – this means that TRUE and FALSE are predefined and cannot be used as variable names in R.\n \nIf you try to assign a value to a “variable” named TRUE or FALSE, you will get an invalid (do_set) left-hand side to assignment error (Figure 9).  This is the same error you get if you try to assign a number to a number (i.e., 10 = 5).\n\n\n\n\n\n\nFigure 9: Assigning a value to a keyword causes an error.\n\n\n\nYou will often see R scripts that use T and F as shortcuts for TRUE and FALSE.  R accepts T and F as shortcuts for TRUE and FALSE but you should not use T and F to represent TRUE and FALSE because T and F are not protected keywords.  T and F can be overwritten as shown in Figure 9.\n \nIf T or F get overwritten then your code will produce unexpected results.  It is best to stick with the reserved (and protected) keywords TRUE and FALSE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-11: For Loops and State Variables"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#purpose",
    "href": "lessons/1-09_If_Else_Statements.html#purpose",
    "title": "1-09: If-Else Statements",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreate condition statements that control flow for either TRUE or FALSE conditions using an if-else structure\nperform multiple conditional statements on one variable using an if-else-if structure\ncreate error conditions in an if-else-if structure with an else statement",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#questions-about-the-material",
    "href": "lessons/1-09_If_Else_Statements.html#questions-about-the-material",
    "title": "1-09: If-Else Statements",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#dealing-with-false-conditions",
    "href": "lessons/1-09_If_Else_Statements.html#dealing-with-false-conditions",
    "title": "1-09: If-Else Statements",
    "section": "3 Dealing with FALSE conditions",
    "text": "3 Dealing with FALSE conditions\nIn the last lesson we looked at execution of the if() statement and how it changes the flow of a script.  if() statements contain a conditional statement inside the parenthesis and an attached codeblock surrounded by curly brackets ( { } ).  The codeblock is only executed if the conditional statement is TRUE. \nrandomNum = sample(1:100, size=1);\n\nif(randomNum &gt; 50)  # execute the attached codeblock if TRUE\n{\n  cat(\"You win\");\n}\n\n3.1 Else and FALSE conditions\nMany times when you are programming you want to execute something when the condition (e.g., temperature &gt; 50) is TRUE and when the condition is FALSE.  You execute a codeblock on a FALSE condition by using an if-else statement:\n\n\n\nrandomNum2 = sample(1:100, size=1);\n\nif(randomNum2 &gt; 50)  # execute the attached codeblock if TRUE\n{\n  cat(\"You win\");\n}else # execute this codeblock if FALSE\n{\n  cat(\"You lose\");\n}\n\n\nFigure 1: This author’s preference for structuring an if-else statement in R\n\n\n\n\nIf the condition is TRUE, the codeblock in the curly brackets ( {  } ) attached to the if() gets executed.\nIf the condition is FALSE, the codeblock in the curly brackets attached to the else gets executed.\n\n \nNote: Like if() statements, if-else statements are often used within for loops to check multiple values at once (e.g., all values in a column of a data frame) – we will be getting to that in the next lesson.\n\n\n3.2 Curly bracket placement in R and a bug\nFigure 1 uses the bracket placement preferred by me. However, when you see an R script you often see people write their if-else statements like this:\n\n\n\nif(randomNum2 &gt; 50) { \n  cat(\"You win\");\n} else { \n  cat(\"You lose\");\n}\n\n\nFigure 2: The common way in R to structure an if-else statement\n\n\n\nI find the method in Figure 2 harder to read and more challenging to add comments to than the method in Figure 1. However, for this class, you can use either method when coding if-else structures.\n \nNote: Neither method follows programming standards that you will find in almost every other language. This is because of a bug R. More information about this is here: Extension: Programming standards for if-else statements",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#if-else-statements-and-conditional-operators",
    "href": "lessons/1-09_If_Else_Statements.html#if-else-statements-and-conditional-operators",
    "title": "1-09: If-Else Statements",
    "section": "4 If-else statements and conditional operators",
    "text": "4 If-else statements and conditional operators\nLet’s now look at the script for the lesson. Like last lesson, we:\n\nread in the data from twoWeekWeatherData.csv\nsave the highTemp and noonCondition column to a vector\n\n### read in data from twoWeekWeatherData.csv\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                     sep=\",\",\n                     header=TRUE, \n                     stringsAsFactors = FALSE);  \n\n### Extract the highTemps column from the data frame -- save it to a variable\nhighTemps = weatherData$highTemp;\nnoonCond = weatherData$noonCondition;\nThis time, the script executes a codeblock for both TRUE and FALSE conditions:\nif(highTemps[3] &gt; 50)\n{\n  cat(\"  high temp 3 is greater than 50\\n\");   \n}else  # highTemp[3] &lt;= 50\n{  \n  cat(\"  high temp 3 is not greater than 50\\n\");\n}\n\nif(highTemps[4] &gt; 50)\n{\n  cat(\"  high temp 4 is greater than 50\\n\");\n}else\n{\n  cat(\"  high temp 4 is not greater than 50\\n\");\n}\n\nif(highTemps[5] &gt; 50)\n{\n  cat(\"  high temp 5 is greater than 50\\n\");\n}else\n{\n  cat(\"  high temp 5 is not greater than 50\\n\");\n}\nNow the script outputs information for all three highTemp values, two of which were less than 50\n\n\n\nChecking highTemps 3, 4, and 5 to see which are &gt; 50:\n  high temp 3 is greater than 50\n  high temp 4 is not greater than 50\n  high temp 5 is not greater than 50\n\n\nFigure 3: If-else output when checking three highTemp values to see if they are greater than 50\n\n\n\nExtension: Skipping brackets in if-else structures",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#if-else-statements-using-strings",
    "href": "lessons/1-09_If_Else_Statements.html#if-else-statements-using-strings",
    "title": "1-09: If-Else Statements",
    "section": "5 If-Else statements using strings",
    "text": "5 If-Else statements using strings\nConditional operators can also be used to compare two string values.  Usually, we are using == or != to compare string values.  So, the else statement is the opposite condition:\n\n\n\nif(noonCond[2] == \"Cloudy\")  # noonCond[2] is \"Cloudy\"\n{\n  cat(\"  Day was Cloudy\\n\");\n}else # noonCond[2] is not \"Cloudy\"\n{\n  cat(\"  Day was not Cloudy\\n\");\n}\n\nif(noonCond[3] != \"Sunny\")   # noonCond[3] is not \"Sunny\"\n{\n  cat(\"  Day was not Sunny\\n\")\n}else # noonCond[3] is \"Sunny\"\n{\n  cat(\"  Day was Sunny\\n\")\n}\n\n\nFigure 4: Using if-else statements on strings\n\n\n\nDay 2 was cloudy (the if condition) and day 3 was sunny (the else condition)\nCheck to see the noon condition on the day 2:\n  Day was Cloudy\n  Day was Sunny\n\n5.1 If-else vs. if() statements\nYou could just write the code in Figure 4 using only if statements and the code would output the same messages:\n\n\n\n  if(noonCond[2] == \"Cloudy\")  # noonCond[2] is \"Cloudy\"\n  {\n    cat(\"  Day was Cloudy\\n\");\n  }\n  if(noonCond[2] != \"Cloudy\")  # noonCond[2] != \"Cloudy\"\n  {\n    cat(\"  Day was not Cloudy\\n\");\n  }\n\n  if(noonCond[3] != \"Sunny\")   # noonCond[3] is not \"Sunny\"\n  {\n    cat(\"  Day was not Sunny\\n\")\n  }\n  if(noonCond[3] == \"Sunny\")   # noonCond[3] is \"Sunny\"\n  {\n    cat(\"  Day was Sunny\\n\")\n  }\n\n\nFigure 5: The inefficient way to check opposite conditions – using only if() statements\n\n\n\nBut there are two problems with the code above:\n\nYou are executing code that you know does not need to be executed.  Sunny and Not Sunny are mutually exclusive – there is no need for the script to check both.  This extra check adds a little bit to the script’s execution time – this can make a difference if you are checking 100,000 values in a data frame!\nAn if-else statement is easier to debug than two individual if() statements because you only need to debug one conditional statement – as opposed to two",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#adding-in-more-conditions-if-else-if-structures",
    "href": "lessons/1-09_If_Else_Statements.html#adding-in-more-conditions-if-else-if-structures",
    "title": "1-09: If-Else Statements",
    "section": "6 Adding in more conditions: If-Else-If Structures",
    "text": "6 Adding in more conditions: If-Else-If Structures\nWe are limited to two outcomes when using if-else structures: (a) the if() condition is TRUE or (b) The if() condition is FALSE.  However, the examples above contain situations that could easily have more than two possible condition.  For instance, the noonCondition can be “Sunny”, “Cloudy”, or “Rain” – and we can check for all three in an if-else-if structure.\n \nWith an if-else-if structure you can check as many mutually exclusive situations as you want.  And if-else-if structures are efficient because they will only execute the code until the first if-else-if condition is TRUE.\n\n\n\nif(noonCond[4] == \"Cloudy\")        # 1st check: the day is cloudy\n{\n  cat(\"  Day 4 was cloudy\\n\");\n}else if(noonCond[4] == \"Sunny\")  # 2nd check: the day is sunny\n{\n  cat(\"  Day 4 was sunny\\n\"); \n}else if(noonCond[4] == \"Rain\")   # 3rd check: the day is rainy\n{\n  cat(\"  Day 4 was rainy\\n\"); \n}\n\n\nFigure 6: Check multiple conditions using an if-else-if structure\n\n\n\nChecking day 4 against multiple conditions:\n  Day 4 was rainy \n\n6.1 The efficiency of if-else-if structures\nIn Figure 6, if we replaced day 4 with day 2, which was “Cloudy”, then only the first condition (noonCond[4] == “Cloudy”) gets checked.  Because “Cloudy” is TRUE there is no need to check “Sunny” and “Rain”.  If there are thousands of values to check (e.g., you are checking all the values in a large vector – next lesson) then a lot of computation time is saved by not checking conditions that cannot be TRUE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#the-error-or-everything-else-condition",
    "href": "lessons/1-09_If_Else_Statements.html#the-error-or-everything-else-condition",
    "title": "1-09: If-Else Statements",
    "section": "7 The error or everything else condition",
    "text": "7 The error or everything else condition\nWe usually want to execute something for values we have not prepared for.  For instance, a phone system might have menu options numbered 1 through 5.  In the user presses 7, the system will usually have a message saying something like “sorry, 7 is not an option”.\n \nThe problem with the script above is that it does nothing if the condition for the day is not given anywhere in the if-else-if structure (i.e., all the conditionals are FALSE). In an if-else-if structure you cannot anticipate everything that somebody will input into a dataframe – let alone all of the errant spellings.  To resolve this, we create what is often referred to as an error condition, meaning we set up a codeblock that gets executed if none of the conditions in the if-else-if structure are TRUE.  This error codeblock gets attached to the else statement.\n\n\n\nif(noonCond[5] == \"Cloudy\")       # 1st check: the day is cloudy\n{\n  cat(\"  Day 5 was cloudy\\n\");\n}else if(noonCond[5] == \"Sunny\")   # 2nd check: the day is sunny\n{\n  cat(\"  Day 5 was sunny\\n\"); \n}else if(noonCond[5] == \"Rain\")    # 3rd check: the day is rainy\n{\n  cat(\"  Day 5 was rainy\\n\"); \n}else  # none of the above are TRUE so output some error message\n{\n  cat(\"  The condition for day 5,\", noonCond[5], \", is invalid\\n\"); \n}\n\n\nFigure 7: Adding an error condition to the if-else-if structure\n\n\n\nSince we have an else statement at the end, there is guaranteed to be a response from the script no matter what noonCond is:\nChecking day 5 against multiple conditions:\n  The condition for day 5, Fog, is invalid\n\n7.1 Error statement help in debugging\nAdding the error statement also helps you debug your code.  In this case, the error statement tells you that some value does not meet any of the conditions (in this case, day 5 had Fog) and you can use the codeblock attached to the else statement to provide useful information about what went wrong – and perhaps suggest a fix.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#creating-number-ranges-using-if-else-structures",
    "href": "lessons/1-09_If_Else_Statements.html#creating-number-ranges-using-if-else-structures",
    "title": "1-09: If-Else Statements",
    "section": "8 Creating number ranges using if-else structures",
    "text": "8 Creating number ranges using if-else structures\nAnother use for if-else-if structures is to create number ranges.  The following code categorizes the highTemp by temperature range.\n\n\n\n  if(highTemps[3] &gt; 70)      # check for anything above 70\n  {\n    cat(\"  That is hot for April!\"); \n  }else if(highTemps[3] &gt; 60) # check for temps 61-70\n  {\n    cat(\"  That is warm for April!\");   \n  }else if(highTemps[3] &gt; 50) # check for temps 51-60\n  {\n    cat(\"  That temperature is about right for April!\");   \n  }else if(highTemps[3] &gt; 40) # check for temps 41-50\n  {\n    cat(\"  That is a little cold for April!\");   \n  }else # temperatures 40 and below\n  {\n    cat(\"  That is unusually cold for April!\");   \n  }\n\n\nFigure 8: Create number ranges with an if-else-if structure\n\n\n\nChecking temperature of day 3:\n  That temperature is about right for April!\n\n8.1 If-Else-If statements are mutually exclusive\nAn if-else-if structure ends as soon as a condition is determined to be TRUE.This means that at most one codeblock in an if-else-if structure gets executed.  In the above example (Figure 8), if the temperature is 75 (i.e., day 14), the first condition (highTemps[14] &gt; 70) is TRUE and “That is hot for April” is output. The if-else-if  ends here and none of the other conditions are checked.\n \nThe second condition (highTemp[14] &gt; 60) would, if checked, also be TRUE. But this condition does not get checked because a condition above was already TRUE – the if-else-if structure is done executing.\n \nAgain, in an if-else-if structure, only the codeblock attached to the first TRUE conditional statement gets executed. If none of the conditional statements are TRUE then the codeblock attached to  the else statement at the end is executed.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#application",
    "href": "lessons/1-09_If_Else_Statements.html#application",
    "title": "1-09: If-Else Statements",
    "section": "9 Application",
    "text": "9 Application\nA) In comments answer: Why can I say that the fourth condition else if(highTemps[3] &gt; 40) in Figure 8 checks only for values between 41 and 50 when the condition is highTemps[3] &gt; 40?\n \nB) In comments answer: Why might it be easier to find errors in a dataset using if-else-if structures vs. just if() statements?\n \nC) The following line randomly picks a letter from the vector and saves it to grade:\n  grade = sample(c(\"A\", \"B\", \"C\", \"D\", \"E\"), size=1);\nUse the above line \n\nHave the script output the score range for the grade (A is 90-100, B is 80-90…)\nHave the script output an error message if grade is anything except A,B,C,D,E (add more letters to the grade vector to test this out)\n\n \nD) The following line creates a random number between -30 and 120 and saves it to the variable temperature:\n  temperature = sample(-30:120, size=1);\n\nUse the above line and have the script output:\n\n\n“cold” if the temperature is between -20 and 30 (exclusive of -20 and 30)\n“warm” if the temperature is between 30 and 60 (inclusive of 30, exclusive of 60)\n“hot” if the temperature is between 60 and 100 (inclusive of 60 and inclusive of 100)\n“invalid value” if the temperature is below -20 or above 100\nhint: do the if-else-if structure strictly in ascending order or strictly in descending order – like the grades example above.  This mean splitting the “invalid” category into two conditions (less than -20 and greater then 100)\n\n\n\nChallenge: In the same script – change the output if the user enters a “border” value (in this case: 30 or 60)\n\n\nfor 30 output: “cold-ish”\nfor 60 output: “hot-ish”\n\n \nE) Repeat parts C, D, and E from the application in last lesson (1-08: Conditional Operations) using if-else statements. Note: there are a few different ways to do this.\n \nSave the script as app1-09.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#trap-true-and-false-are-keywords-t-and-f-are-not",
    "href": "lessons/1-09_If_Else_Statements.html#trap-true-and-false-are-keywords-t-and-f-are-not",
    "title": "1-09: If-Else Statements",
    "section": "10 Trap: TRUE and FALSE are keywords, T and F are not",
    "text": "10 Trap: TRUE and FALSE are keywords, T and F are not\nThe terms TRUE and FALSE are reserved keywords in R – this means that TRUE and FALSE are predefined and cannot be used as variable names in R.\n \nIf you try to assign a value to a “variable” named TRUE or FALSE, you will get an invalid (do_set) left-hand side to assignment error (Figure 9).  This is the same error you get if you try to assign a value to a number (e.g., 10 = “a”).\n\n\n\n\n\n\nFigure 9: Assigning a value to a keyword causes an error.\n\n\n\nYou will often see R scripts that use T and F as shortcuts for TRUE and FALSE.  R accepts T and F as shortcuts for TRUE and FALSE but T and F are not keywords.  This means that someone can assign a value to T or F that overrides the default TRUE/FALSE values – as done in Figure 9. If this happens, using T or F as shortcuts for TRUE or FALSE would produce unexpected results.  It is best to stick with the reserved (and protected) keywords TRUE and FALSE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#extension-brackets-and-code-blocks",
    "href": "lessons/1-09_If_Else_Statements.html#extension-brackets-and-code-blocks",
    "title": "1-09: If-Else Statements",
    "section": "11 Extension: brackets and code blocks",
    "text": "11 Extension: brackets and code blocks\nA codeblock enclosed by curly brackets { } usually follows an if() statement.  The brackets designate the start and end of the code block and R does not care how the brackets are placed in code – as long as the order is correct.\n \nThe following four code-blocks all execute exactly the same in R:\nrm(list=ls());  \n\nyourAge = readline(\"How old are you? \")\n\nif(yourAge &lt; 20)\n«{»\n    cat(\"You have your whole life ahead of you!!\");\n«}»\nrm(list=ls()); \n\nyourAge = readline(\"How old are you? \")\n\nif(yourAge &lt; 20)«{»\n    cat(\"You have your whole life ahead of you!!\");\n«}»\nrm(list=ls()); \n\nyourAge = readline(\"How old are you? \")\n \nif(yourAge &lt; 20)«{» cat(\"You have your whole life ahead of you!!\"); «}»\nrm(list=ls());\n\nyourAge = readline(\"How old are you? \")\n \nif(yourAge &lt; 20)\n                                           «{»\ncat(\"You have your whole life ahead of you!!\");     «}»                                            \nAll the above code blocks are valid.  R just looks for a start and end bracket and executes everything in between – it completely ignores the spaces in between.  The decision on where to place the brackets has to do with coding standards and viewability.  The first two code blocks above are the most commonly accepted standards and your code should use one of these two methods.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#extension-skipping-brackets-in-if-else-structures",
    "href": "lessons/1-09_If_Else_Statements.html#extension-skipping-brackets-in-if-else-structures",
    "title": "1-09: If-Else Statements",
    "section": "12 Extension: Skipping brackets in if-else structures",
    "text": "12 Extension: Skipping brackets in if-else structures\nYou will often see if-else statements with no curly brackets.  This only works if there is only one command attached to the if() and one command attached to the else.\nrm(list=ls()); \n\nfavAnimal = readline(\"What is your favorite animal? \");\n \nif(favAnimal == \"Llama\")\n  cat(\"You are wise beyond your years\");\nelse\n  cat(\"You still have a lot of room for growth\");\nThe code above works and is functionally equivalent to the code below\nrm(list=ls());   \n\nfavAnimal = readline(\"What is your favorite animal? \");\n \nif(favAnimal == \"Llama\")\n{\n   cat(\"You are wise beyond your years\");\n}else\n{\n   cat(\"You still have a lot of room for growth\");\n}\nThe only advantage to not using curly brackets is that it takes up less space.  I recommend that you include curly brackets even if there is only one command in the codeblock – it is more explicit and you avoid accidentally adding additional commands without the brackets.\n \nThe code below will give an unexpected ‘else’ error.  This is because R believes that the if() structure ends right after the first command, the cat() on line 7, because there are no curly brackets attached to the if(). This means the else statement is completely detached from the if(), so the else was unexpected.\nrm(list=ls());   options(show.error.locations = TRUE);\n  \nfavAnimal = readline(\"What is your favorite animal? \")\n   \nif(favAnimal == \"Llama\")\n   cat(\"You are wise beyond your years\\n\");\n   cat(\"No doubt about that.\");       # this line is NOT attached to the if()\nelse\n   cat(\"You still have a lot of room for growth\");\n\n\n\n\n\n\nFigure 10: Unexpected else error caused by not using curly brackets in if-else structures.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#trap-else-never-has-an-attached-condition",
    "href": "lessons/1-09_If_Else_Statements.html#trap-else-never-has-an-attached-condition",
    "title": "1-09: If-Else Statements",
    "section": "13 Trap: Else never has an attached condition",
    "text": "13 Trap: Else never has an attached condition\nA common mistake for people new to programming is to treat else like an if() or an else if() and attach a condition to it.  The codeblock attached to the else statement is supposed to be executed if all other conditional statements in the if-else-if structure fail, which is when the score is less than 60.\nrm(list=ls());\n \nscore = readline(\"Enter your score: \") \nscore = as.numeric(score);\n \nif(score &gt; 90) \n{\n   cat(\"A\");\n}else if(score &gt; 80) # score between 80-90\n{\n   cat(\"B\");\n}else if(score &gt; 70) # score between 70-80\n{ \n   cat(\"C\");\n}else if(score &gt; 60) # score between 60-70\n{ \n   cat(\"D\");\n}else (score &lt;= 60)  # will cause an error\n{                 \n   cat(\"E\");\n}\nThe script seems to work at first.  If you type in a value below 55 then “E” will be the output.  However, if you type in 75 the output is  “CE”.  If you type in 95  the output is “AE”. In fact, “E” will be part of the output no matter what you type in.\n\n\n\n\n\n\nFigure 11: Putting a condition on an else causes an error\n\n\n\nWhat happens is that the errant condition (score &lt;= 60) was attached to the else instead of the codeblock. Since the codeblock below was was detached from the else statement, it execute without condition (i.e., all the time).\n{                 \n   cat(\"E\");\n}\n \nThe proper way to code the else is as follows:\nrm(list=ls());\n \nscore = readline(\"Enter your score: \");\nscore = as.numeric(score);\n \nif(score &gt; 90) \n{\n   cat(\"A\");\n}else if(score &gt; 80) # score between 80-90\n{\n   cat(\"B\");\n}else if(score &gt; 70) # score between 70-80\n{ \n   cat(\"C\");\n}else if(score &gt; 60) # score between 60-70\n{ \n   cat(\"D\");\n}«else»  # all other conditions failed\n{                 \n   cat(\"E\")\n}\nNow the else will execute only when all other conditions fail.  In other words, it will execute when score is less than or equal to 60",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-09_If_Else_Statements.html#extension-programming-standards-for-if-else-statements",
    "href": "lessons/1-09_If_Else_Statements.html#extension-programming-standards-for-if-else-statements",
    "title": "1-09: If-Else Statements",
    "section": "14 Extension: Programming standards for if-else statements",
    "text": "14 Extension: Programming standards for if-else statements\nNeither Figure 1 or Figure 2 is the programming standard for coding an if-else structure. The two most common methods put else on a line by itself either like this:\nif(randomNum2 &gt; 50) \n{ \n  cat(\"You win\"); \n}\nelse \n{ \n  cat(\"You lose\"); \n}\n Or like this:\nif(randomNum2 &gt; 50) { \n  cat(\"You win\");\n} \nelse { \n  cat(\"You lose\");\n}\nI would argue that both of the above methods improve upon the R standard for coding if-else structure. The problem is that, in R, the above methods will sometimes cause an unexpected ‘else’ error – something I consider to be a bug in R",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-09: If-Else Statements"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#purpose",
    "href": "lessons/1-07_Outputs.html#purpose",
    "title": "1-07: Outputs",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nOutput variables to the Console tab\nOutput messages to the Console tab\nOutput vectors, sequences, and mathematical operations\nOutput special characters to the Console tab, including a line feed\nOutput mixed message and variable statements to the Console tab\n\n\n1.1 Files for the lesson\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-to-console",
    "href": "lessons/1-07_Outputs.html#output-to-console",
    "title": "1-07: Outputs",
    "section": "2 Output to console",
    "text": "2 Output to console\nThe Console tab has many uses and one of them is to output messages from a script – the messages can contain text, variable, or some combination of the two.  Outputting messages to the Console can be done using the function cat(), which stands for concatenate. This is R’s way of saying that cat() will concatenate (combine) variables and values to create an output.\n \nExtension: cat() vs print()\n\n2.1 Output a message\nWe will first use cat() to output a text message to the Console tab – to do this we need to put the message in quotes:\ncat(\"Hello\");\n\n\n\nHello\n\n\nFigure 1: Outputting a text message in the Console tab\n\n\n\nIf you do not use quotes (” “), R will think you are referring to a variable.  For instance, the line cat(Hello) gives you the Object not found error because R thinks this is a reference to a variable named Hello – and, in this case, there is no variable named Hello. \ncat(Hello); # Will cause an «object not found» error\n\n\n\nError in cat(Hello) : object Hello not found\n\n\nFigure 2: An error that occurs if you try to output a variable (object) that does not exist in your script.\n\n\n\nNote: If there is a variable named Hello in your script, then cat(Hello); will output the value of the variable Hello.\n\n\n2.2 Output multiple messages\nYou can add as many cat() statements to your script as you like and they will be displayed sequentially in the Console tab:\ncat(\"Hello, World.\");\ncat(\"How are you?\");\ncat(\"I am fine.\");\n\n\n\nHello World. How are you? I am fine.\n\n\nFigure 3: Output message without spacing\n\n\n\n\n\n2.3 The line feed: \\n\nBut there is a problem here – R puts no spacing in between the lines (Figure 3).  This is typical behavior of programming languages – they do not add line feeds (e.g., enter or return) unless the script specifically requests that a line feed is added.\n \nThe instruction to add a line feed is to put \\n inside the quotes ( “  ” ):\ncat(\"Hello, World.\\n\");\ncat(\"How are you?\\n\");\ncat(\"I am\\n fine.\\n\"); # the first \\n will break up the line\n\n\n\nHello, World\nHow are you?\nI am\n fine.\n\n\nFigure 4: Message with line feeds\n\n\n\nIn Figure 4 we have our text on multiple lines.  Notice that the \\n does not get printed to the screen.  \\n is an instruction to R to add a line feed, sometimes called a newline character, and \\n needs to be put inside the quotes.\n \n\\n can be put anywhere in a quote.  In the above code there is a \\n put in between “am” and “fine”, hence the line feed between the two words.  The exact same message as Figure 4 can be output to the Console tab using only one cat() statement with multiple \\n:\ncat(\"Hello, World.\\nHow are you?\\nI am\\n fine?\\n\");\n\n\n\nHello, World\nHow are you?\nI am\n fine.\n\n\nFigure 5: Using one cat() statement with multiple \\n to output multiple lines of text",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#escape-character-backslash",
    "href": "lessons/1-07_Outputs.html#escape-character-backslash",
    "title": "1-07: Outputs",
    "section": "3 Escape character: backslash ( \\ )",
    "text": "3 Escape character: backslash ( \\ )\nThe backslash in programming is used in a string as an escape character. An escape character tells R that the next character is to be treated as a command rather than the character. This is similar to the way the Shift, Control, or Alt keys on your keyboard change the meaning of the character that is pressed with them (e.g, control-C is a command to copy).\n \nBackslash can be used to\n\nput in a control like a line feed ( \\n ) or a tab ( \\t )\nprint a character that has a functional meaning like a double quote ( \\“ ). In other words, treat the double quote as a character for output, not as the start or end of a string. This also works if you want to output a backslash ( \\\\ )\nuse Unicode to print our characters not on the keyboard using Unicode.  Here is a link to a partial list of Unicode characters.  Use the Escape sequence given on the page.  Note: according to Wikipedia, there are around 150,000 Unicode characters – and just recently Unicode has added lots of emojis.\n\n \ncat(\"\\tAnd the boy said, \\\"Hello\\\" \\n\");\ncat(\"Send a backslash \\\\ to the Console\\n\")\ncat(\"Some Unicode characters: \\u00C5 \\u0A94 \\u0115\\n\");\n\n\n\n    And the boy said, \"Hello\" \nSend a backslash \\ to the Console\nSome Unicode characters: Å ઔ ĕ\n\n\nFigure 6: Using backslash ( \\ ) to output special characters.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-messages-with-variables",
    "href": "lessons/1-07_Outputs.html#output-messages-with-variables",
    "title": "1-07: Outputs",
    "section": "4 Output messages with variables",
    "text": "4 Output messages with variables\nLet’s output data from the twoWeekWeatherData.csv file to the Console tab.\n \nFirst we will read in the file, like we did last lesson:\n  weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                         sep=\",\",                   \n                         header=TRUE);\n                        \nAnd then save the highTemp and lowTemp columns to their own variable:\nhighTemps = weatherData$highTemp;\nlowTemps = weatherData$lowTemp;\nWe can directly output the whole temperature vector values along with a line feed:\ncat(lowTemps);  # prints the variable lowTemps in the Console\ncat(\"\\n\");      # adds a line feed -- so the next message goes to the next line\n\n\n\n45 43 46 38 36 45 32 50 48 40 36 43 45 63\n\n\nFigure 7: Output the 12 values in the lowTemps variable\n\n\n\n\n4.1 Combine text and variables in one command\nWe can combine content (e.g., variables and text) in one cat() command by using comma to separate the different types of content:\ncat(\"The low temps are:\", lowTemps, \"\\n\");\n\n\n\nThe low temperatures are: 45 43 46 38 36 45 32 50 48 40 36 43 45 63\n\n\nFigure 8: Combining a text message and variables in one output\n\n\n\nTrap: Misplacing (or forgetting) quotes",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-indexed-values",
    "href": "lessons/1-07_Outputs.html#output-indexed-values",
    "title": "1-07: Outputs",
    "section": "5 Output indexed values",
    "text": "5 Output indexed values\nWe can output a single value from a vector by indexing it:\ncat(lowTemps[4], \"\\n\");     # 4th value in lowTemps\nOr, output a more robust message about the 4th day:\ncat(\"On the 4th day the high temperature was\", highTemps[4], \"and the low temperature was\", lowTemps[4], \"\\n\");\n\n\n\nOn the 4th day the high temperature was 40 and the low temperature was 38\n\n\nFigure 9: Combining multiple text messages and variables in an output\n\n\n\nOr, even do math on the values:\ncat(\"On the 4th day the difference in temperature was\", \n      highTemps[4] - lowTemps[4], \"degrees\\n\"); \nOn the 4th day the difference in temperature was 2 degrees",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#output-multiple-values",
    "href": "lessons/1-07_Outputs.html#output-multiple-values",
    "title": "1-07: Outputs",
    "section": "6 Output multiple values",
    "text": "6 Output multiple values\nWe can use c() to index multiple values within a vector:\ncat(lowTemps[c(4, 8, 3, 11)], \"\\n\");  # 4th, 8th, 3rd, and 11th values in lowTemps\n38 50 46 36 \nOr, we can use the sequencing operators to output multiple values in a vector:\n  cat(lowTemps[5:9], \"\\n\");   # simple sequence: 5th through 9th value\n  cat(lowTemps[seq(from=1, by=2, to=10)], \"\\n\"); # Values 1,3,5,7,9\n\n\n\n36 45 32 50 48\n45 46 36 32 48\n\n\nFigure 10: Output of sequenced values in lowTemps\n\n\n\nAnd add messages to the above output:\n  cat(\"Day 5-9 temperature:\",lowTemps[5:9], \"\\n\");  \n  cat(\"Temp on odd days:\", lowTemps[seq(from=1, by=2, to=10)], \"\\n\");\n\n\n\nDay 5-9 temperature: 36 45 32 50 48 \nTemp on odd days: 45 46 36 32 48 \n\n\nFigure 11: Outputting contiguous values in lowTemps using the sequencing operator.\n\n\n\ncat() commands can go across multiple lines – this one cat() is functionally the same as the above two cat():\n  cat(\"Day 5-9 temperature:\", lowTemps[5:9], \"\\n\", \n      \"Temp on odd days:\", lowTemps[seq(from=1, by=2, to=10)], \"\\n\");\n\n\n\nDay 5-9 temperature: 36 45 32 50 48 \nTemp on odd days: 45 46 36 32 48 \n\n\nFigure 12: Outputting the values of lowTemps using seq()",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#the-concatenate-cat-function",
    "href": "lessons/1-07_Outputs.html#the-concatenate-cat-function",
    "title": "1-07: Outputs",
    "section": "7 The concatenate, cat(), function",
    "text": "7 The concatenate, cat(), function\nWe have used cat() many times in this script to output variable and text to the Console but we really have not talked about cat() itself.\n \nLet’s search for cat in the search bar of the Help tab:\n\n\n\n\n\n\nFigure 13: Information about the cat() function in the Help tab.\n\n\n\nThe first part of cat() is the three dots “…”.  When the 3 dots are at the beginning of a function, the three dots say that cat() will accept any number of objectsas inputs.  The objects can be text in quotes, string variables, numeric variables, or other objects we have not discussed yet like Dates.\n \nNote: the three dots in cat() has a different meaning from the three dots in read.csv().  When three dots are at the first argument of a function (e.g., cat()) it means that any number of inputs are accepted.  When the three dots are elsewhere (e.g., read.csv()) it means the function can be extended with arguments that are not on the list.\n \nAfter the three dots, cat() has 5 arguments: file, sep, fill, labels, and append. These all have default values (e.g., file=““, sep=” “)\n\n7.1 The sep argument\nArguments are used to modify the behavior of a function.  sep changes how the different components of the output are separated– the default is to use 1 space.  We are going to change the sep argument.\n \nLet’s take the code from above and add the sep argument to cat() and give sep the value ” ** “:\n  cat(\"Day 5-9 temperature:\", lowTemps[5:9], \"\\n\", \n      \"Temp on odd days:\", lowTemps[seq(from=1, by=2, to=10)], \"\\n\",\n      sep = \" ** \");\nAnd you will notice that the different components in cat() are separated by ” ** “.\n\n\n\nDay 5-9 temperature: ** 36 ** 45 ** 32 ** 50 ** 48 ** \n ** Temp on odd days: ** 45 ** 46 ** 36 ** 32 ** 48 ** \n\n\nFigure 14: Using the sep argument in cat()\n\n\n\nNote: The most common way people use sep is to set sep=““– in other words, set sep to nothing so nothing is added to the output.\n \nTrap: Misplacing (or forgetting) quotes\n\n\n7.2 The file argument\nBy default, cat() will output to the Console. But, you could have cat() output to a file by using the file argument.  The file argument in cat() works just like the file argument in read.csv() with one exception:  if the file does not exist yet then R will create the file.\n \nSo, this line:\ncat(\"Hi\", file=\"hello.txt\");\ncreates a file called hello.txt in your Project Folder and add the text hi to the file.\n \nExtension: Sending Console info directly to file",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#application",
    "href": "lessons/1-07_Outputs.html#application",
    "title": "1-07: Outputs",
    "section": "8 Application",
    "text": "8 Application\nA. Line 47 in the script downloaded for this lesson is beyond 85 characters, break the line up so that it functions the same but does not go over 85 characters.\n \nB. In the Help for the function c(), the S3 method has 3 dots as the first argument. In comments answer: What does the three dots tell you about the c() function?\n \nC.  Using one cat(), output to the Console:\n\nthe date of the 11th day and the amount of precipitation on that day\nthe difference in precipitation between the 3rd and 4th day\nevery 3rd days precipitation\nthe precipitation for days 12, 9, 4 – using a index vector created with c()\nChallenge: output the total precipitation for the first 10 days (without using sum(), which is not something you have learned yet!)\n\nMake sure you use newlines (\\n) to make the output readable.\n \nD. Using cat(), output the data from part B to a file named output.txt in your data folder (instead of the Console)\n\nUse the file argument in cat()– the file format is the same as the file format in read.csv()\n\n \nE. Challenge: Using cat(), append your name and three different Unicode characters to the text in the output.txt file created in part C.  Hint: look at the arguments in cat() – you need to change one of them.\n \n \nSave the script as app1-07.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#extension-cat-vs-print",
    "href": "lessons/1-07_Outputs.html#extension-cat-vs-print",
    "title": "1-07: Outputs",
    "section": "9 Extension: cat() vs print()",
    "text": "9 Extension: cat() vs print()\nThe two main functions used to output to the Console are cat() and print(). The big difference is that print() does a lot more formatting of the output than cat().  You would likely use print() when you want to display the results of a statistical test, which often has a complicated format.  cat() does very little formatting on its own – cat() lets the programmer control the output.  You would use this when you want to output text and some simple data – or, where you really want control of the output format.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#trap-misplacing-or-forgetting-quotes",
    "href": "lessons/1-07_Outputs.html#trap-misplacing-or-forgetting-quotes",
    "title": "1-07: Outputs",
    "section": "10 Trap: Misplacing (or forgetting) quotes",
    "text": "10 Trap: Misplacing (or forgetting) quotes\nIt is easy to accidentally forget a quote, add a quote, or simply move a quote to a place it does not belong. The following code has a missing quote on line 8 right after “The values are…\nrm(list=ls());  options(show.error.locations = TRUE);\n\ndistance = 100;\ntime = 50;\nvelocity = distance/time;\n\ncat(\"The values are..., \"\\nDistance: \", distance, \"\\ntime: \",\n    time, \"\\nvelocity: \", velocity);\nIf you execute the script above, you will get the following message in the Console:\n&gt; source(\"~/.active-rstudio-document\")\nError in source(\"~/.active-rstudio-document\") : \n  ~/.active-rstudio-document:«7:26: unexpected '\\\\'»\n6: \n7: cat(\"The values are..., \"\\\n                            ^\nThe error is unexpected ‘\\\\’ on line 7, character 26. R is telling you that is does not understand why the character on line 7, character 26 is a backslash ( \\ ). This might not be the most helpful message.\n \nHowever, RStudio has a built-in feature to help you find misplaced quotes – the color scheme.  The quoted text is in a different color than other parts of the code.  For example, in the XCode color scheme – text in quotes is colored red.\n \n\n\n\n\n\n\nFigure 15: Missing quote in cat()\n\n\n\nFigure 15 shows that, right after “The value are… , the variables are all treated as if they are in quotes and the messages are outside the quotes. Since one quote was missing, the error propagated and assumed characters to be variables/numbers and variables/numbers to be characters.\n \nWe will add the missing quote to line 8:\ncat(\"The values are...«\"», \"\\nDistance: \", distance, \"\\ntime: \",\n    time, \"\\nvelocity: \", velocity);\nNow the correct components of the output are in quotes and the script executes without an error:\n&gt; source(\"~/.active-rstudio-document\")\nThe values are... \nDistance:  100 \ntime:  50 \nvelocity:  2",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-07_Outputs.html#extension-sending-console-info-directly-to-file",
    "href": "lessons/1-07_Outputs.html#extension-sending-console-info-directly-to-file",
    "title": "1-07: Outputs",
    "section": "11 Extension: Sending Console info directly to file",
    "text": "11 Extension: Sending Console info directly to file\nsink() is a commonly used command in R that redirects all Console output to a file. The following command will send all future Console output to the file output2.txt in the data folder.\nsink(file=\"data/output2.txt\") # send Console content to data\nBy “all future output”, RStudio will send the output from all script execution (no matter the script file) to the file until you undo the command like this:\nsink(file=NULL)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-07: Outputs"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#purpose",
    "href": "lessons/1-05_Functions_Introduction.html#purpose",
    "title": "1-05: Functions Introduction",
    "section": "1 Purpose",
    "text": "1 Purpose\nExplain how functions works and how to use the Help tab in RStudio.  The presentation of functions in R is inconsistent but it is very useful to understand how to read a function help page.\n\n1.1 Files\nThe script for the lesson is here\n\nSave the linked script file to the scripts folder in your Class Project\nAll the code in this lesson is sequentially placed in the script\n\nThe data used in this lesson, twoWeekWeatherData.csv\n\nSave the linked data file to the data folder in your Class Project",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#functions",
    "href": "lessons/1-05_Functions_Introduction.html#functions",
    "title": "1-05: Functions Introduction",
    "section": "2 Functions",
    "text": "2 Functions\nIn the last lesson we used two functions in R:\n\nread.csv(): open up a CSV file and read in the data\nseq(): create a configurable sequence of numbers\n\n \nFunctions are standalone scripts designed to do some repeatable operations.  A function almost always takes inputs (i.e., arguments) and sends a response (i.e., return value).\n \nIn the case of read.csv() from last lesson:\n\n\n\n# path to data file (from project folder)\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                       sep=\",\",      # values separated by comma\n                       header=TRUE); # there is a header row\n\n\nFigure 1: Calling read.csv() to get data from twoWeekWeatherData.csv and save it to weatherData\n\n\n\nThe inputs (arguments) are the values for file, sep, and header.\nThe response (return value) is the data from the CSV file and gets saved to the variable weatherData.\n \nIn the case of seq():\nseq1 = seq(from=1, to=10, by=3);\nThe inputs (arguments) are the values for from, to, and by.\nThe response (return value) is the sequence of numbers that gets saved to the variable seq1.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#arguments",
    "href": "lessons/1-05_Functions_Introduction.html#arguments",
    "title": "1-05: Functions Introduction",
    "section": "3 Arguments",
    "text": "3 Arguments\nIn programming, the values you pass into a function(e.g., file, sep, and header) are called arguments of the function.  Arguments are added to the function call to tweak the operation of the function – arguments act like the knobs and dials for a function.\n \nThe majority of the programming world uses the term parameters instead of arguments.  I tend to like parameters better as I think it better indicates that these values are properties of the function.  But, R is a programming language for statisticians and arguments is a mathematical term, so R chose to go with arguments. Just note you will occasionally see the term parameters, and it means the same thing as arguments.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#a-simpler-function-median",
    "href": "lessons/1-05_Functions_Introduction.html#a-simpler-function-median",
    "title": "1-05: Functions Introduction",
    "section": "4 A simpler function: median()",
    "text": "4 A simpler function: median()\nLet’s take a step back and look at a simpler function, median(), which takes a vector and finds the median value in the vector.\n \nTo use median() we need a vector with numeric values in it, which we will call vec1:\nvec1 = c(3,4,5,6,21,45,61);\nAnd then we pass vec1 in as an argument to the median() function:\nmedianVal1 = median(vec1);\nTrap: Forgetting to pass in a vector to median\n \nAnd the Environment shows the return value, saved to medianVal1, is 6\nmedianVal1:   6\n\n4.1 Help for median()\nNow let’s use RStudio’s Help tab to go behind-the-scenes of median().  RStudio Help tab is a useful resource for finding out more information on functions. The information that appears in Help is from the latest R documentation. If you do an internet search, you will often get older documentation. Note: the Help window is using the website https://search.r-project.org/.\n \nIf we type median in the search bar we get this:\n\n\n\n\n\n\nFigure 2: The median function in the Help tab in RStudio\n\n\n\n \nThe Help page shows that median() has two arguments:\n\nx: the vector that you want to find the median for\nna.rm: a TRUE/FALSE value that determines how to handle NA values in the vector. NA means Not Available and usually indicating a problem with the data\n\n \nNote: the ( … ) can be ignored – it is R indicating that this function can be expanded with more arguments\n\n\n4.2 Skipping argument names\nWhen we called median(), we did not include any argument names:\nmedianVal1 = median(vec1);\nHowever, since x is the first argument in median(), it is assumed that the first value is meant to be for x.\n \nThis is an equivalent call to median() that more explicitly says that the vec1 is the value for x:\nmedianVal1b = median(x=vec1);\nAnd the return value will be the same:\nmedianVal1:   6\nmedianVal1b:  6\n\n\n4.3 Default argument values\nThe other argument in median(), na.rm, has a default value of FALSE . This means that you do not have to supply a value for the argument na.rm when you call the function.  You only need to supply a value if you want to change na.rm to something other than FALSE (e.g., TRUE).\n \nOur first example did not have an NA values, let’s create a vector with an NA value in it:\nvec2 = c(3,4,5,NA,6,21,45,61);\nAnd then use that as an argument for median():\nmedianVal2 = median(x=vec2);\nIf there is an NA value in a vector then, for most mathenatical functions in R, the return value will be of type NA. The median of a vector with NA values will always be NA_real_. NA_real_ says that median cannot be determined but would be a real number.\nmedianVal2:   NA_real_\n\n\n4.4 Dealing with the NA\nna.rm is the argument that determines whether NA values are removed from the vector – and the default value is FALSE, meaning NA values are not removed.\n \nLet’s set na.rm to TRUE so the NA values are removed before finding the median:\nmedianVal2b = median(x=vec2, na.rm=TRUE);\nNow the NA in the vector is ignored and we get the same median value as before:\nmedianVal2b:   6\n\n\n4.5 Alternate ways to call median()\nArgument names (e.g., x and na.rm) are not needed if you put values in the correct order. All of these calls functionally do the same thing as the above median() call:\nmedianVal2c = median(vec2, TRUE);\nmedianVal2d = median(vec2, na.rm=TRUE);\nmedianVal2e = median(na.rm=TRUE, x=vec2);  # can reverse arguments if you name them\nmedianVal2f = median(x=vec2, TRUE);\nMy general recommendation is to always use argument names when calling a function.  This makes your code easier to read and you don’t have to worry about the order of the arguments.  This is especially important when you are dealing with more complicated functions that have lots of arguments (e.g., plotting functions).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#help-seq",
    "href": "lessons/1-05_Functions_Introduction.html#help-seq",
    "title": "1-05: Functions Introduction",
    "section": "5 Help seq()",
    "text": "5 Help seq()\nUnfortunately, the Help for functions can contain many abstractions and extraneous information. Throughout this course, we will open up the Help menu for new functions to get you more familiar with the abstractions.\n \nLet’s look at the function seq():\n\n\n\n\n\n\nFigure 3: The Help page for the seq() function\n\n\n\n \nWhen you see Default S3 Method, that is most likely the version of the function you care about.  S3 means S version 3, S is a programming language developed in the 1970s and was the predecessor to R (yeah, that sounds a bit backward…). The other object types you might see are S4, RC (very rare), and R6.\n\n5.1 The arguments and defaults\nseq() has 5 arguments: from, to, by, length.out, and along.with.  We are going to ignore along.with, which complicates matters and is not needed, nor very useful.\n \nThe descriptions of the arguments in Figure 3 are helpful but the default argument values for seq() are misinformative:\n## Default S3 method\nseq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),\n    length.out = NULL, along.with = NULL, ...)\nseq() essentially is solving for this equation:\n\\[\nby=\\frac{\\text{ to }-\\text{ from }}{\\text{ length.out }-1}\n\\]\nThere are four variables in the equation and you have to give exactly three out of four of them as arguments.  seq() will rearrange the formula, calculate the unknown fourth variable, and create the sequence.\n\n\n5.2 seq() examples\nIf you set from, to, and by as we did for seq1, seq() will calculate length.out (the number of values in the sequence)\nseq1 = seq(from=1, to=10, by=3);   # will have 4 values\nand give you the sequence:\nseq1: num[1:5] 1 4 7 10\nlength.out allows you to set the number of values in the sequence.  You can also set length.out to a value, but then you can only use 2 of these 3 arguments: from, to, and by.\n \nAn example of using length.out:\nseq2 = seq(from=1, to=10, length.out=5);\nThen you get 5 evenly spaced number starting with 1 and ending with 10\nseq2:   num[1:5] 1 3.25 5.5 7.75 10",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#read.csv-expanded",
    "href": "lessons/1-05_Functions_Introduction.html#read.csv-expanded",
    "title": "1-05: Functions Introduction",
    "section": "6 read.csv() expanded",
    "text": "6 read.csv() expanded\nWhen you go to the Help page for read.csv() , you are taken to the Help page for read.table(). This is because read.csv() is a version of the function read.table().  In other words, read.csv() is read.table() with different default values for the arguments. The different argument values are underlined in Figure 4.\n \nFor instance, the default value for sep (the separator between data) is a space in read.table() and a comma in read.csv().  read.csv() uses all the arguments from read.table() (e.g., row.names, col.names), read.csv() just changes some of the values for default arguments (underlined below).\n\n\n\n\n\n\nFigure 4: Using the Help tab in RStudio to look up functions (and a remainder that arguments are sometimes called parameters)\n\n\n\n\n6.1 read.csv arguments\nWhen you call read.csv(), you can use any of the argument from read.table().\n \nAnd there are a lot of arguments in read.table(). The majority of these arguments rarely need to be changed from their default value.\n \nMost of the arguments in read.table() look cryptic and you will probably never have to use them. A couple that are easier to understand:\n\ndecimal: the character that represents a decimal in the decimal number.  You might need to change this to a comma ( , ) if you get data from Europe\ncomment.char: the character after which everything on the line is a comment (i.e., not data)\n\nnotice that read.csv() has no comment.char whereas read.table() uses ( # ) as the default comment.char\n\n\n\n\n6.2 Required arguments and default arguments\nfile is an argument that is not set equal to anything in read.table() / read.csv().  This is because file must be supplied by the user –file is the only required argument.  This should make sense as there is no point in calling read.table() / read.csv() without any data.\n \nMost other argument in read.table() / read.csv() has a default value (except row.names and col.names – there is a question about this in the application). This means you can execute the function without using any argument except file.\n \nIn fact, the following code will produce the same results as the earlier read.csv() call in Figure 1:\nweatherData2 = read.csv(file = \"data/twoWeekWeatherData.csv\");\nIf you look in the Environment tab the values for weatherData and weatherData2 are exactly the same.\n\n\n\n\n\n\nFigure 5: Expanding weatherData and weatherData2 in the Environment tab\n\n\n\n\n\n6.3 The other arguments (aside from file)\nIn my original call to read.csv(), the arguments sep=“,” and header=TRUE are functionally not changing anything because I have them set to the same value as their default.  But, these arguments are changed often enough that it is nice to have them quickly at hand when copying read.csv() from one script to another.\n \n weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\",\n                       sep=\",\",                 \n                       header=TRUE);",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#application",
    "href": "lessons/1-05_Functions_Introduction.html#application",
    "title": "1-05: Functions Introduction",
    "section": "7 Application",
    "text": "7 Application\n1. Create this sequence: 13, 9, 5, 1, -3, -7, -11 using seq().\n\nCome up with two more ways (three in all) to produce the same sequence using seq(), but changing the arguments (from, by, to, length.out). \n\n \n2. Explain, in comments, why you get an error if you try to use all four arguments (from, by, to, length.out)\n \n3. In comments answer: What are the default values for row.names, col.names, na.strings, and fill in read.csv()? For row.names and col.names you will need to look at the Arguments section of the Help for read.csv to find the answer.\n \n4. Find the log (base 5) of this vector: c(0.04, 0.2, 25, 125) using the log() function\n\nUse the Help tab to find out more about the log() function\nThe answer is: -2, -1, 2, 3 (so you can check)\nnote: the default value for base is exp(1) = e1 = e = 2.71828… (i.e., the natural logarithm)\n\n \n5. Properly read in this CSV file of the same two week weather data but:\n\ncommas are used in place of decimals in precipitation column\nspaces are used to separate variables (instead of commas)\n\nSave the data to a dataframe name WD_Comma\n \n6. In comments, answer: How many factors levels does the noonCondition column have?  How about the date column?\n \n \nSave the script as app1-05.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n7.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-05_Functions_Introduction.html#trap-forgetting-to-pass-in-a-vector-to-median",
    "href": "lessons/1-05_Functions_Introduction.html#trap-forgetting-to-pass-in-a-vector-to-median",
    "title": "1-05: Functions Introduction",
    "section": "8 Trap: Forgetting to pass in a vector to median",
    "text": "8 Trap: Forgetting to pass in a vector to median\nIf you want to find the median of the vector: c(3,4,6,2,7,10), you have two choices:\n \nSave the vector to a variable and use the variable as an argument to median():\n&gt; vec6 = c(3,4,6,2,7,10) \n&gt; median(vec6) \n[1] 5\nUse the vector directly as an argument to median():\n&gt; median(c(3,4,6,2,7,10)) \n[1] 5\nBoth produce the correct answer, 3.5.\n \nA mistake people often make is to forget to put the numbers into a vector by using c(), they do this instead:\n&gt; median(3,4,6,2,7,10) \n[1] 3\nIs this case, you are calling median() with 6 separate arguments: 3, 4, 6, 2, 7, and 10. median() only takes 1 arguments so it ignores the last five number and takes the median of 3, which is 3.\n \nWhen you put the six numbers into c(), you are saying that these numbers are all grouped together into one vector, and median will take in the whole vector as the argument.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-05: Functions Introduction"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#purpose",
    "href": "lessons/1-03_Mathematical_Operations.html#purpose",
    "title": "1-03: Mathematical Operations",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nPerform mathematical operations, including powers, on numerical variables\nExplicit use of mathematical symbols in formulas\nConvert algebraic formulas to programming formulas\nUse parentheses to establish the order of operations for formulas",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#questions-about-the-material",
    "href": "lessons/1-03_Mathematical_Operations.html#questions-about-the-material",
    "title": "1-03: Mathematical Operations",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#putting-a-formula-in-code",
    "href": "lessons/1-03_Mathematical_Operations.html#putting-a-formula-in-code",
    "title": "1-03: Mathematical Operations",
    "section": "3 Putting a formula in code",
    "text": "3 Putting a formula in code\nOnce again, we will calculate velocity using distance and time, except, we will now use the full version of the velocity formula, which looks at the changes in distance and time as opposed to absolute distance and time.\n \nThe full velocity formula is (subscript i means initial, subscript f means final):\n\\(v=\\frac{d_{f}-d_{i}}{t_{f}-t_{i}}\\) .\n \nNote: If ti and di are zero then you get the formula we used in Lesson 1-2: (\\(\\boldsymbol{v}=\\frac{d}{t}\\))\n \nWe are going to code this formula, but there are a couple of issues:\n\nfractions are “stacked” – but in scripts, equations can only be read left to right\nvariable names have subscript characters (e.g., ti), but subscript and superscript characters are not allowed in script\n\n\n3.1 Minding your parentheses\nIn script, everything goes left-to-right so you cannot write a fraction as you would in Algebra.  Instead, we need to be more explicit and put both both the numerator and the denominator in parentheses:\n\\[\nv=\\frac{\\left(d_{f}-d_{i}\\right)}{\\left(t_{f}-t_{i}\\right)}\n\\]\nThen, pull out the fraction between the numerator and denominator and replace it with a division sign:\n\\[\nv=\\left(d_{f}-d_{i}\\right) /\\left(t_{f}-t_{i}\\right)\n\\]\nNow the formula is all on one line, but the symbols need to be replaced with valid variable names that do not have subscripts:\n\\[\n\\text { velocity }=(\\text { finalDist }- \\text { initDist }) /(\\text { finalTime }- \\text { initTime })\n\\]\nThis is now a valid line of code in R, assuming all four variables on the right side have assigned values.\nvelocity = (finalDist - initDist) / (finalTime - initTime);\nThe line of code above says that velocity will be assigned the value equal to the calculations of the four variables on the right side of the equation.\n\n\n3.2 Other ways to assign values\nIn most programming languages the equal sign is used to assign values, and the equal sign always evaluates what is on the right side and assigns it to the variable on the left.  In R, you can use arrows to assign values:\n«velocity &lt;-» (finalDist - initDist) / (finalTime - initTime); # commonly used\n(finalDist - initDist) / (finalTime - initTime) «-&gt; velocity»; # rarely used\nThe top ( &lt;- ) is the most commonly used in R and the bottom ( -&gt; ) works but is rarely used anymore.  I prefer using ( = ) to ( &lt;- ) because ( = ) is used in most programming languages whereas ( &lt;- ) is not. \n \nNote: In this case, ( = ) and ( &lt;- ) are functionally the same. There are differences between the two, which we will talk about in the lesson on functions.\n\n\n3.3 Variable naming error\nHere is the full script with a small error on the line calculating velocity:\nrm(list=ls());   # Clear out environment\noptions(show.error.locations = TRUE); # give line number of error*\n\nfinalDistance = 100;\ninitDistance = 50;\nfinaltime = 20;       # misspelled: use t instead of T\ninitTime = 15;\n# error will be on the line below:\n«velocity = (finalDistance - initDistance) / (finalTime - initTime)»\nEvery variable on the right side of the velocity equation must be given a value beforehand –  otherwise, you will get the pesky Object not found error as shown in the image below (Figure 1)\n \n\n\n\n\n\n\nFigure 1: Object not found because the variable name does not exist (it is misspelled).\n\n\n\n \nExtension: The show.error.location line\n \nNote: Object is almost synonymous with Variable in R.  The error is basically saying that there is no variable with that name.  Any spelling error will cause the Object not found error.  In this case I “spelled” the variable name wrong by changing the case of the T.  finaltime is not the same as finalTime.\n \nrm(list=ls());           # clean out the environment\noptions(show.error.locations = TRUE); # give line number of error*\n \nfinalDistance = 100;\ninitDistance = 50;\n«finalTime» = 20;\ninitTime = 15;\nvelocity = (finalDistance - initDistance) / (finalTime - initTime);\n\n\n\n\n\n\nFigure 2: Misspelled variable name corrected – script now calculates velocity.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#powers-and-multiplication",
    "href": "lessons/1-03_Mathematical_Operations.html#powers-and-multiplication",
    "title": "1-03: Mathematical Operations",
    "section": "4 Powers and multiplication",
    "text": "4 Powers and multiplication\nWe will look at one more formula that relates kinetic energy to mass and velocity:\n\\[\nE_{k}=\\frac{1}{2} m v^{2}\n\\]\nThere are two new issues with coding this formula:\n\nthe square function is a superscript – you cannot use superscript characters in R\nthe implicit multiplication – we know that mass (m) and velocity (v) are being multiplied, but there is no multiplication sign\n\n\n4.1 Dealing with parenthesis and multiplication\nSo let’s first pull the one-half out of fraction form and into division form:\n\\[\nE_{k}=1 / 2 m v^{2}\n\\]\nWe need to be more explicit because this formula could be misinterpreted by the reader as \\(E_{k}=1 /\\left(2 m v^{2}\\right)\\), so we need to put the one-half in parenthesis:\n\\[\nE_{k}=(1 / 2) m v^{2}\n\\]\nNext, we will explicitly put in the multiplication symbols – a necessity in programming:\n\\[\nE_{k}=(1 / 2)^{*} m^{*} v^{2}\n\\]\nTraps: Forgetting Multiplication Symbol\n \nAnd then change the symbols to script-friendly variable names:\n\\[\n\\text { kineticEnergy }=(1 / 2)^{*} \\text { mass }^{*} \\text { velocity }^{2}\n\\]\n\n\n4.2 Dealing with square power\nIn R the ( ^ ) is the power operator.  So ^2 means raise to the power of 2 (i.e., square):\n# this formula works...\nkineticEnergy = (1/2)*mass*velocity^2;\nWhile the above works correctly, it is often helpful to be explicit and add parenthesis around the value or values that are getting raised to the power:\n# more explicit solution\nkineticEnergy = (1/2)*mass*(velocity)^2;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#the-power-operator",
    "href": "lessons/1-03_Mathematical_Operations.html#the-power-operator",
    "title": "1-03: Mathematical Operations",
    "section": "5 The power operator ( ^ )",
    "text": "5 The power operator ( ^ )\nThe ( ^ ) operator works for all powers including square roots, cubed roots, and mixed powers (e.g., raising to the 3/2 or 5/3).\n \nLet’s rearrange the kinetic energy formula to solve for velocity, which requires a square root\n\\[\nv=\\sqrt{\\frac{2 E_{k}}{m}}\n\\]\nTo put the above formula into a script form, we need to:\n1) Put the numerator and denominator on one line by taking out the fraction and replacing it with a division sign.\n\\[\nv=\\sqrt{\\left(2 E_{k} / m\\right)}\n\\]\n2) Be explicit and put in multiplication symbols.\n\\[\nv=\\sqrt{\\left(2^{*} E_{k} / m\\right)}\n\\]\n3) Spell the formula out using script-friendly variable names:\n\\[\n\\text { velocity }=\\sqrt{\\left(2^{*} \\text { kineticEnergy / mass }\\right)}\n\\]\n4) Use the power operator ( ^ ) to square root the whole formula.  Square rooting something is the same as saying raise it to the 1/2 power. Since we are square rooting the whole formula, we need to put the whole formula in parenthesis.\n\\[\n\\text { velocity }=\\left(2^{*} \\text { kineticEnergy } / \\text { mass }\\right)^{1 / 2}\n\\]\n\n5.1 Coding the power\nSo we have this in R:\nrm(list=ls());          # clean out the environment\n\nkineticEnergy = 50;\nmass = 5;\nvelocity = (2*kineticEnergy / mass)^1/2; # still a problem here!\n\n\n\n\n\n\nFigure 3: Incorrect answer for velocity because the power is missing parentheses\n\n\n\n\n\n5.2 Correcting the power with parenthses\nThe Environment tab (Figure 3) shows that v is, unexpectedly, 10.  This is because of the order-of-operations. Instead of raising the (2*kineticEnergy/mass) to the 1/2 power, the above code raised (2*kineticEnergy/mass) to the first (1) power and then divided everything by 2.  We need to be more explicit and put the 1/2 in parenthesis.\nrm(list=ls());          # clean out the environment\n\nkineticEnergy = 50;\nmass = 5;\nvelocity = (2*kineticEnergy / mass)^«(1/2)»; # now we are good!\n\n\n\n\n\n\nFigure 4: Correct answer for velocity\n\n\n\n\n\n5.3 More power and roots\nThis style will work for all powers and roots:\nrm(list=ls());          # clean out the environment\n\nkineticEnergy = 50;\nmass = 5;\n\ntest1 = (2*kineticEnergy / mass)«^(1/3)»;  # third root\ntest2 = (2*kineticEnergy / mass)«^(5)»;    # fifth power\ntest3 = (2*kineticEnergy / mass)«^(5/3)»;  # mixed root and power\ntest4 = (2*kineticEnergy / mass)«^(3.17)»; # decimal power\n\n\n\n\n\n\nFigure 5: Testing different powers in R",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#the-square-root-function",
    "href": "lessons/1-03_Mathematical_Operations.html#the-square-root-function",
    "title": "1-03: Mathematical Operations",
    "section": "6 The square root function",
    "text": "6 The square root function\nIn R, you will usually see square roots done using the sqrt() function:\nvelocity = «sqrt»(2*kineticEnergy / mass);  # how square roots are usually done\nsqrt() works just fine but there is no equivalent for all the other types of powers and roots.  That is why I prefer to use the ( ^ ) operator – it is easy to remember and you can use it for every power and root situation – you just need to attach the appropriate number.\nvelocity = (2*kineticEnergy / mass)^(1/2); # how I prefer to do them",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#random-values",
    "href": "lessons/1-03_Mathematical_Operations.html#random-values",
    "title": "1-03: Mathematical Operations",
    "section": "7 Random values",
    "text": "7 Random values\nIn Figure 5 we hardcoded the values for kineticEnergy and mass, which just means we directly provided a values for the two variables.  We can also randomly pick values for variables using sample().\n \nsample() requires two arguments:\n\nthe range of numbers you want to randomly sample from\nthe number of values you want to randomly sample (for now we will just do one)\n\n \nThe code to pick one random number between 20 and 100 is:\nrandomNum1 = sample(20:100, size=1);\nnote: 20:100 is inclusive of the numbers on both ends – so, 20 and 100 are both possibilities meaning there are 81 possible numbers to choose randomly from\n \nThe code to pick a random number between -100 and -50 is:\nrandomNum2 = sample(-100:-50, size=1);\nsample() always returns a whole number. \n\n7.1 normal values\nsample() treats every number the same.  If there are 100 numbers in the range then every number has a 1% chance of being picked.  If you want to pick a random value, but weigh the value (e.g., a normally distributed random values) then you can use rnorm().\n \nrnorm() requires three arguments:\n\nthe number of values you want to randomly pick (for now, we will just pick 1 at a time)\nthe mean of the normal distribution you want to pick randomly from\nthe standard deviation of the normal distribution\n\n \nThe code to pick one random number from a normal distribution with mean 10 and standard deviation 3 is:\nrandomNorm1 = rnorm(n=1, mean=10, sd=3);\nThe code to pick one random number from a normal distribution with mean -7.5 and standard deviation 0.5 is:\nrandomNorm2 = rnorm(n=1, mean=-7.5, sd=0.5);\nrnorm() always returns a decimal number\n\n\n\n\n\n\nFigure 6: Picking random numbers – the random numbers will be different each time you execute the code",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#application",
    "href": "lessons/1-03_Mathematical_Operations.html#application",
    "title": "1-03: Mathematical Operations",
    "section": "8 Application",
    "text": "8 Application\n1) Add this code right after the rm(list=ls()) lines:\nset.seed(5); \nThe above line will make sure that you get the same “random” number every time you execute your script by creating a seed value.  Seed values are covered in a much later lesson.\n \n2) Create six variables that all hold length values:\n\n1st and 2nd are assigned the values: 25, 30\n3rd and 4th are randomly picked between 20 and 30 (each number has an equal chance)\n5th and 6th are randomly picked from a normal distribution with mean of 25 and standard deviation of 2\n\n \n3) Calculate the (a) mean, (b) variance, and (c) standard deviation of the six values.\n\nVisit this page if you need a reminder about how to calculate mean, variance, and standard deviation\nyou can use R functions like mean(), var(), and sd() to check these values, but I want you to manually solve these – it is important to learn how to properly code the mathematics because you will often not have functions to do it for you.\nExtension: Mathematical operations across multiple lines\n\n \n4) Make sure the 6 values, their mean, their variance, and their standard deviation appear in the Environment tab after the script is executed.\n \n5) Challenge: Pick a random two-digit decimal number between 0 and 1 (e.g., 0.23, 0.89, 0.10)\n\nyou will need to use sample() and then manipulate the number\n\n \n \nSave the script as app1-03.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#extension-mathematical-operations-across-multiple-lines",
    "href": "lessons/1-03_Mathematical_Operations.html#extension-mathematical-operations-across-multiple-lines",
    "title": "1-03: Mathematical Operations",
    "section": "9 Extension: Mathematical operations across multiple lines",
    "text": "9 Extension: Mathematical operations across multiple lines\nIf you have a long mathematical formula to execute in code, there is a good chance that you will want to break the code up into multiple lines.\n \nTo keep it simple, let’s add 5 values together across multiple lines:\nc = 10 + 10 + 10 +\n    10 + 10;\nIf you put the above code in you script, then you will get c = 50 in the Environment.\n \nHowever, this code:\nd = 10 + 10 + 10\n    + 10 + 10;\nwill put d=30 in the Environment.\n \nThis is because R did not know the continue the equation for d to the second line.  R treated the first line as the complete command/equation.  By putting the ( + ) at the end of the first line for c, R knew it needed to continue the command to the next line.\n \nBy the way, R does do something with the second line for d – it prints the answer to Console if you click Run:\n&gt; d = 10 + 10 + 10\n&gt;     + 10 + 10;\n[1] 20\nIn other words:\n+ 10 + 10\nis a command that evaluates to 20",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#traps-forgetting-multiplication-symbol",
    "href": "lessons/1-03_Mathematical_Operations.html#traps-forgetting-multiplication-symbol",
    "title": "1-03: Mathematical Operations",
    "section": "10 Traps: Forgetting Multiplication Symbol",
    "text": "10 Traps: Forgetting Multiplication Symbol\nLet’s say you are solving for kinetic energy:\n\\[\nE_{k}=\\frac{1}{2} m v^{2}\n\\]\nAnd you have a value for velocity (v) and mass (m)\nrm(list=ls());          # clean out the environment\n\nm = 100;\nv = 10;\n«KE = ????;    # should be: KE = (1/2)*m*v^2;»\nIf you code KE like this::\nKE = 1/2*mv^2;\nThen you will get the error: object ‘mv’ not found in the Console tab because R does not realize you want to multiply the variables m and v, it thinks you are trying to use a variable named mv, and the variable mv does not exist.\n \nIf you code KE like this::\nKE = (1/2)m*v^2;  # same error arises if you do 1/2m*v^2\nyou will get the error: unexpected symbol (Figure 7) and the Console tab will point to the m\n\n\n\n\n\n\nFigure 7: Unexpected symbol error\n\n\n\n \nIn this case, R is expecting an operation (symbol) after (1/2).  m is a variable, not a operation, hence the error.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#trap-units-or-lack-thereof-in-programming",
    "href": "lessons/1-03_Mathematical_Operations.html#trap-units-or-lack-thereof-in-programming",
    "title": "1-03: Mathematical Operations",
    "section": "11 Trap: Units, or lack thereof, in programming",
    "text": "11 Trap: Units, or lack thereof, in programming\nOne problem that crops up quite often in programming is that none of the numbers used in calculations have units.  So we often have lines of code without any mention of units like this:\n# find an average of the following three weights\nweight1 = 175;\nweight2 = 200;\nweight3 = 210;\n\naveWeight = (weight1 + weight2 + weight3) / 3;\nAnd if we add units to the number…\n# find an average of the following three weights\n«weight1 = 175lb;  # causes \"unexpected symbol\" error»\nweight2 = 200lb;\nweight3 = 210lb;\n\naveWeight = (weight1 + weight2 + weight3) / 3;\nWe get the error unexpected symbol because R is expecting some sort of operation after the number 175 and lb is not a valid operation. \n \nNote: Lines 3 and 4 would also cause an unexpected symbol error but R ceases executing at the first error.\n \nIt is best to mention the units somewhere in the comments especially if your script is large or others are using your script.\n# find an average of the following three weights («all in pounds»)\nweight1 = 175;\nweight2 = 200;\nweight3 = 210;\n\naveWeight = (weight1 + weight2 + weight3) / 3;\nOtherwise, you risk a situation like the Mars Climate Orbiter crash, which could have easily been avoided with proper comments.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-03_Mathematical_Operations.html#extension-the-show.error.location-line",
    "href": "lessons/1-03_Mathematical_Operations.html#extension-the-show.error.location-line",
    "title": "1-03: Mathematical Operations",
    "section": "12 Extension: The show.error.location line",
    "text": "12 Extension: The show.error.location line\nThe second line of code in Figure 1 tells R to provide a line number where an error occurs:\noptions(show.error.locations = TRUE);\nIn Figure 1, in the Console tab the error includes the line number, 9, because of the line above. This seems like a great idea except that this line only works in a few limited situations. As you get into more complex code, this line will not work and R will not show you the line number for the error.\n \nUnfortunately, R is one of the harder programming languages to debug. We will get to some debugging strategies in later lessons. For now, you can include the show.error.location line in your code. It does not hurt – it just has limited utility.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-03: Mathematical Operations"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html",
    "href": "lessons/1-01-RStudioProjectsSetup.html",
    "title": "1-01: RStudio Projects Setup",
    "section": "",
    "text": "Include checklist",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#purpose",
    "href": "lessons/1-01-RStudioProjectsSetup.html#purpose",
    "title": "1-01: RStudio Projects Setup",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nInstall and test the software you will need for this class\nProvide a basic overview of how RStudio works and its relationship to R\nExecute, using the Source button, an R script\nShow how commenting works and the importance of commenting\n\n\n1.1 Special note about images in the lessons for this class\nRStudio is a rapidly evolving program, and it would be too much work to maintain all the images so that they reflect the newest version of RStudio and its visual likeness.  Some of the images in this class reflect older versions of RStudio and there are minor changes that I have made to the code that I did not believe warrants putting in new images. I have tried to make sure these differences change nothing functionally.  Inevitably, something will fall through the cracks – so please, contact the instructor if there is a problem!",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#questions-about-the-material",
    "href": "lessons/1-01-RStudioProjectsSetup.html#questions-about-the-material",
    "title": "1-01: RStudio Projects Setup",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "href": "lessons/1-01-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "title": "1-01: RStudio Projects Setup",
    "section": "3 Viewing file extensions and hidden files",
    "text": "3 Viewing file extensions and hidden files\nBy default, Windows and Mac hides file extensions from you (e.g., your Word document file is listed in the file manager as stuff instead of stuff.docx).  This is not convenient when you are programming as you are working with many file types (e.g., *.txt, *.r, *.csv) and, many times, the only difference between the name of two files is the extension.  For instance, you might have two files called weather.r and weather.csv in your folder – without file extensions they are both listed as weather.\n \nAlso, when you are programming, there are files you will need to access that are hidden by default by the operating system.\n \nThis section is optional, but I would highly recommend you learn how to view all files and file extensions – it will greatly assist you when programming.\n\n3.1 Viewing in newer versions of Windows 11\nThis is easy to to do in newer versions of Windows 11:\n\nOpen the File Explorer\nClick View -&gt; Show\nCheck File name extensions and Hidden items\n\n\n\n\n\n\n\nFigure 1: Change settings to view all file extensions on Windows 11\n\n\n\n\n\n3.2 Viewing in Windows 10 and older Windows 11 versions\nThis feature is a bit buried in these Window versions.\n \n\nOpen any File Explorer window (i.e., your folder viewer)\nIn menu bar\n\nWindows 10: click View -&gt; Options -&gt; Change folder and search options\nWindows 11: click 3 dots ( · · · ) -&gt; Options\n\nIn Folder Options window (Figure 2), go to the View tab\nUncheck Hide extensions for known file types\nCheck Show hidden files, folder, and drives\nClick OK\n\n\n\n\n\n\n\nFigure 2: Viewing in older versions of Windows\n\n\n\n\n\n3.3 Viewing in Mac\nFile Extensions:\n\nOpen Finder\nClick on Finder -&gt; Preferences…\nIn Finder Preferences window click on the Advanced tab\nCheck Show all filename extensions\n\n \nHidden files:\n\nYou can temporarily see hidden files in the Finder by pressing Command-Shift-Dot ( . ). \nYou can use the Terminal to permanently show hidden files as described on this webpage but this is not recommended unless you are comfortable with Terminal commands.\n\n\n\n\n\n\n\nFigure 3: Change settings to view all file extensions on a Mac",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "href": "lessons/1-01-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "title": "1-01: RStudio Projects Setup",
    "section": "4 Install R and RStudio on your computer",
    "text": "4 Install R and RStudio on your computer\nWe are going to install R and RStudio on your computer. R is a programming language and RStudio provides a structured environment for the R programming language, similar to the way Microsoft Word provides a structured environment for document editing. RStudio is patterned on other popular programming environments like Microsoft’s Visual Studio.\n \nOn Windows the default installation can be used for R and RStudio. For Mac, installation is a bit trickier – details below.\n \nNote: Even if you already have the software installed, it is a good idea to verify you have a recent version.\n\n4.1 Install or update R (need version 4.4 or higher)\nThe R for Windows download is here. Click on Download R 4.#.# for Windows.\n \nThe R for Mac download is here.  \n\nThere are two versions of R for Mac \n\nR-4.#.#-arm64.pkg: for Macs with Apple-based processors (M1, M2, M3…), all Macs from 2021 on use Apple-based processors\nR-4.#.#.pkg: for older Macs with Intel-based processors\n\nThe installer will tell you If you pick the wrong pkg file – there is no harm except a bit of wasted time.\n\n \nAnd for those of you using Linux – the R for Linux download instructions are here.\n\n\n4.2 Install or update RStudio\nYou need version 2023.12 or higher for this class and you should have 2025.04 or higher if you are using Git.\n \nYou can download the RStudio Installer here. Download the appropriate file for your computer under Installers, open the file, and use the default installation options.\n\n4.2.1 Special instructions for Mac users\nFor Mac users there are some extra complexities:\n\nYou might be asked to install Command Line Developer Tools while installing RStudio. Go ahead and install the developer tools.\n \nThe download for RStudio is called RStudio-202X.XX.dmg.  Double-clicking the file will open the window below (Figure 4).  In the window, drag the RStudio file to the Applications folder\n\n\n\n\n\n\n\nFigure 4: Opening RStudio DMG file\n\n\n\nIf you already have RStudio installed, you will be asked if you want to replace the old version – go ahead and Replace it.\n \n\nAfter installation, unmount the RStudio device in the Finder by clicking the eject button (Figure 5)\n\n\n\n\n\n\n\nFigure 5: Unmounting the RStudio device (very important!)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#installing-a-package",
    "href": "lessons/1-01-RStudioProjectsSetup.html#installing-a-package",
    "title": "1-01: RStudio Projects Setup",
    "section": "5 Installing a package",
    "text": "5 Installing a package\nGGPlot2, is a widely used package that does not come with R or RStudio – so we are going to install the GGPlot2 package using RStudio.\n \nTo install the package GGPlot2 using RStudio (Figure 6):\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type GGPlot2 in the Packages textbox\nClick Install\n\n \nGGPlot2 requires many other packages (its dependencies) – and RStudio will install those packages along with GGPlot2.  Be patient, as this could take a little time.\n\n\n\n\n\n\nFigure 6: Installing the GGPlot2 Package in RStudio\n\n\n\n \nExtension: Different ways to install packages",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "href": "lessons/1-01-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "title": "1-01: RStudio Projects Setup",
    "section": "6 RStudio Projects and Project Folders",
    "text": "6 RStudio Projects and Project Folders\nMost of the work you will do in R involves multiple scripts, data files, and perhaps other types of files.  All these files together make up your project and they exist within a Project Folder, which is the folder on your computer than contains all the files and subfolders for your project – and it is very important that you keep all files associated with a project within a Project Folder.\n \nIn this class we will be using RStudio to create, edit, and execute R scripts.  In RStudio, there is a feature called RStudio Projects, which is a Project Folder, that makes it much easier to move, share, and host your project on GitHub.  You need to keep all of your class work in an RStudio Project.\n\n6.1 Create a new RStudio Project\nTo create a new RStudio Project, which is also your project folder:\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click New Directory\nIn the Project Type window click New Project\n\n\n\n\n\n\n\nFigure 7: Creating a new RStudio Project\n\n\n\n \nIn the Create New Project window:\n\nThe Directory name is the name of the Project Folder that will contain your whole RStudio Project\nThe Project Folder will be created in the folder listed in the second textbox (Create project as subdirectory of:)\n\n \nIn Figure 8, the Project Folder is named My_Project and is in the Desktop folder.  Note: you can name the folder whatever you want and put it in any folder location.\n\n\n\n\n\n\nFigure 8: Creating a directory for the RStudio Project\n\n\n\n \nExtension: RStudio Project in an existing directory\n\n\n6.2 RStudio Project Files Tab\nThe Files tab (bottom-right corner) in RStudio is a File Manager, and it allows you to do many things that you can do in your operating systems File Manager (called File Explorer in Windows and Finder in Mac). The Files tab can be used to open, add, remove, or rename files and folders. When we first create the RStudio Project, the Files tab will be set to the Project Folder (Figure 9, C:/Users/Charlie/Desktop/My_Project) and there is one file in the folder: My_Project.Rproj.\n \nWhenever you create an RStudio Project, an .Rproj file is added to the Project Folder. This main purpose of this file is to designate this folder as the working directory for your project.  Double-clicking on the .Rproj file in your File Manager will open your Project in RStudio (just like double-clicking a .docx file opens the file in Word).\n\n\n\n\n\n\nFigure 9: Files tab opened to the Project Folder\n\n\n\n\n\n6.3 Viewing hidden files in RStudio\nBy default, the Files tab shows file extension but it does not show hidden files.  If you click on More -&gt; Show Hidden Files, you will see the hidden folder .Rproj.user – this is not a folder you will use in this class.\n \n\n\n\n\n\n\nFigure 10: Showing hidden files\n\n\n\nExtension: *.RProj and .Rhistory\n\n\n6.4 Add Subfolders\nWe will use the Files tab in RStudio (bottom-right tab) to create two subfolders: scripts and data.\n \nTo add two folders named scripts and data:\n\nClick on New Folder in the Files tab\nEnter scripts in the textbox and click OK\nRepeat the last two steps to add a folder called data\n\n\n\n\n\n\n\nFigure 11: Adding folders using the Files tab in RStudio\n\n\n\n\n\n6.5 Add files to the project\nWe are going to download two files and add them to your new RStudio Project.\n\nRSProj_Setup.r: put this file in your scripts directory\nRSProj_Setup.csv: put this file in your data directory\n\n\n\n6.6 Opening File Manager from Files tab\nThe Files tab can do a lot of things that File Explorer/Finder can do – but not everything.  For instance, you cannot drag and drop files in the Files tab like you can in File Explorer/Finder.\n \nYou can open up a File Explorer/Finder window to the same folder by clicking More… -&gt; Show Folder in New Window.\n\n\n\n\n\n\nFigure 12: The Files tab in RStudio and the File Manager\n\n\n\n\n\n6.7 RStudio Project File Manager\nYou should now be running RStudio, opened to the RStudio Project that you just created.  If you click on the Files tab in the lower-right corner, you will see all the folders and files within your RStudio Project (linked to your Project Folder). You will also see your project name in the upper-right corner (in this case, My_Project).\n\n\n\n\n\n\nFigure 13: RStudio opened with an RStudio Project (named My_Project)\n\n\n\nThe *.RProj files is here and you might also see a file named .RHistory. These are not files you will need to use right away but you can learn more about them at Extension: *.RProj and .Rhistory.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#rstudio-basics",
    "href": "lessons/1-01-RStudioProjectsSetup.html#rstudio-basics",
    "title": "1-01: RStudio Projects Setup",
    "section": "7 RStudio Basics",
    "text": "7 RStudio Basics\nNow we are going to execute the script file, RSProj_Setup.R, that we just downloaded to your RStudio Project’s scripts folder.\n \nRSProj_Setup.R takes weather data from the other downloaded file, RSProj_Setup.csv and creates boxplots showing how Wind Direction and Wind Speed relate to the Change In Temperature.\n \nWe are executing the script to test your setup and help you become familiar with the RStudio environment. If you are taking the GGPlot class, the code in RSProj_Setup.R is something you will learn throughout the course. For this lesson,\n\n7.1 Open your RStudio Project\nThere are multiple ways to open an RStudio Project – three of them are:\n\nOpen your Project Folder in File Explorer (Windows) or Finder (Mac) window and double-click the &lt;Project_Name&gt;.Rproj file\nIn RStudio, click File -&gt; Open Project… -&gt; navigate to the Project Folder and click the *&lt;Project_Name&gt;.Rproj file\nIn RStudio, click File -&gt; Recent Projects -&gt; choose the RStudio Project you just created\n\n\n\n7.2 Open a script file in your Project\nTo open the script file either:\n\nIn Files tab, go to the scripts folder and click on RSProj_Setup.R or\nIn RStudio click File -&gt; Open File -&gt; and then find  RSProj_Setup.R in the scripts folder and click Open.\n\n \nAfter opening the script file, you should see something that looks like this (Figure 14) on your screen:\n\n\n\n\n\n\nFigure 14: Opening your first script in RStudio\n\n\n\nThe script will only execute if it is opened inside your RStudio Project.\n\n\n7.3 Setting up RStudio tabs for scripts\nWhen we are editing and executing an R script, we generally have the following RStudio tabs open (Figure 15):\n\nFile Viewer – text viewer and editor for the opened script files (upper-left corner)\nConsole – displays information about the execution of your script file (lower-left corner)\nEnvironment – displays data points, or variables, from the execution of your script file (upper-right corner)\nPlots – plots produced by the execution of your script file are displayed here (lower-right corner)\n\n \nThe fourth (lower-right corner) tab is on Files, so we switched the tab to Plots:\n\n\n\n\n\n\nFigure 15: The Tabs most commonly used in RStudio\n\n\n\n \nNote: the Help tab in the lower-right corner is something you might find useful. Extension: The Help Tab\n\n\n7.4 Common buttons used in RStudio\nThe script file, RSProj_Setup.r, is a fully functioning script that takes temperature and wind data from the Comma Separated Value (CSV) file, RSProj_Setup.csv, and plots out the data. I am going to use this program to demonstrate a few of the useful buttons in RStudio.\n \nThe one button you will use most in R is Source, which executes your whole script.  Press the Source button to execute the script (Figure 16).\n \nNote: If you have already used R, there is a good chance you highlight lines of code and click Run to execute just those lines.  We are not using this method in this class.  For this class, you should always use Source to execute your code.  For more information go to Extension: Run vs. Source\n\n\n\n\n\n\nFigure 16: Running (Sourcing) the script\n\n\n\nAfter the script is run:\n\nThe Environment tab displays values for the data (variables) in the script (e.g., weatherData, windLabels).\nThe Console tab displays information about the execution of the script.\nThe Plot tab displays the box plots.  If there are multiple plots, you can use the arrow buttons to switch between the plots.\n\n\n\n7.5 Cleaning up the RStudio windows\nThere many times where you want to clean up the windows, which can get very crowded with information from old script executions.\n\nTo clean the Environment, Plot, and Console tabs use the brush button (Figure 16).\n\n\n\n\n\n\n\nFigure 17: Cleaning out the windows\n\n\n\n \nIf you click Source again, the Environment, Plot, and Console tabs will once again be populated with data from the script.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#application",
    "href": "lessons/1-01-RStudioProjectsSetup.html#application",
    "title": "1-01: RStudio Projects Setup",
    "section": "8 Application",
    "text": "8 Application\n\nIn your RStudio Project, create a new script file (File -&gt; New File -&gt; R Script)\nCopy and paste this lesson’s script, RSProj_Setup1.r, to the new script.\nChange the colors in the boxplot (edit lines 17-21)\n\nHere is a comprehensive list of color names you can use in R\n\nSave the script as app01.r, and to your script folder\n\n \nSave the script as app1-01.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n8.2 Zip your Project Folder\nIn your File Manager (not in RStudio), right-click on the Project Folder and in:\n\nWindows 10:\n\nClick Send to\nClick Compressed (zipped) folder\n\nWindows 11:\n\nClick Compress to Zip file\n\nMac:\n\nClick Compress “&lt;Project Folder&gt;”\n\n\nFor all operating systems, a zipped file named &lt;Project Folder&gt;.zip with all the Project Folders’ contents is created in the same folder. You can email the zip file.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-color-schemes",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-color-schemes",
    "title": "1-01: RStudio Projects Setup",
    "section": "9 Extension: Color Schemes",
    "text": "9 Extension: Color Schemes\nI am not a big fan of the default color scheme in RStudio.  It does not create enough differentiation between the different components of a script.  For instance, comments (red arrows) are in green and quoted items (blue arrows) are in just a slightly different green (Figure 18).\n\n\n\n\n\n\nFigure 18: The text color for comments and quotes\n\n\n\n\n9.1 Changing the color scheme\nA good color scheme can really help a programmer by allowing them to quickly identify parts of a script and common errors, like misplaced quotes.\n \nRStudio offers many color schemes – you can change the color scheme by:\n\nclicking on Tools in the main menu (circled in Figure 19)\nchoose Global Options\nWhen the Global Options window open (in Figure 19), click on Appearance\n\n\n\n\n\n\n\nFigure 19: Color schemes for RStudio (note: the Editor font might be different in your window – that is OK)\n\n\n\n \nThe image above shows the Xcode color scheme ( Figure 19).  I prefer Xcode because it does a good job differentiating the different aspects of the script. Notice how the comments (in green) are now clearly distinguished from the quotes (in red).\n \nYou can choose from around 20 themes in the Editor theme window and you can change the theme anytime without affecting anything else.\n\n\n9.2 Adding more color to differentiate output\nThere are a couple more helpful options in RStudio that use color to distinguish components of your code and the output in the Console tab.\n \nTo make these changes go to\nTools -&gt; Global Options… -&gt; Code -&gt; Display and check:\n\nHighlight R function calls\n\n \nTools -&gt; Console and check:\n\nShow syntax highlighting in console input\n\n\n\n\n\n\n\nFigure 20: Console Window changes",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "title": "1-01: RStudio Projects Setup",
    "section": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes",
    "text": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes\nA common complaint I have gotten from my students is they hate the way RStudio tries to be “helpful” by automatically adding matching parenthesis or quotes when the user types in a parenthesis or start quote.\n \nYou can turn off this feature by:\n\ngoing to Tools -&gt; Global Options… -&gt; Code  -&gt; Editing\nuncheck Insert matching parens/quotes\nset Surround selection on text insertion to Never\n\n\n\n\n\n\n\nFigure 21: Stop RStudio from automatically ending your parenthesis and quotes.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "title": "1-01: RStudio Projects Setup",
    "section": "11 Extension: RStudio Project in an existing directory",
    "text": "11 Extension: RStudio Project in an existing directory\nTo create a new RStudio Project inside a directory that already exists (has scripts and data)\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click Existing Directory\nBrowse to the folder you want to be the Project working directory and click Create Project\n\n \nRStudio will add a *.RProj file to the folder – this is what makes the folder an RStudio Project.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "title": "1-01: RStudio Projects Setup",
    "section": "12 Extension: Working directories in R and RStudio (why RStudio Projects)",
    "text": "12 Extension: Working directories in R and RStudio (why RStudio Projects)\nThis topic is, in this author’s opinion, one of the most frustrating topic in R.  Compared to other programming languages (e.g., C++. Python, Javascript), R handling of working directories makes it harderto share projects.\n \nA working directory is the folder location used when one file is looking for another file.  It is best shown by its use-case: a script file that is reading in information from another file – this file can be a data file or another script file.\n \nFor example, let’s say we have a script file called weather.r and it is pulling in data from the file weather2020.csv.  weather.r needs to first find the folder location for weather2020.csv before it can access the file.  To do this, weather.r needs a path to weather2020.csv.  This path can be thought of as map directions between two points – and the working directory is the starting point.\n \nFor the vast majority of programming languages, there is no concept of a working directory.  The process of files calling other files works like google maps – a route is specified between the two files starting with the folder the caller (e.g., weather.r) is in and ending where the callee (e.g., weather.csv) is. The path between the two files is called a relative file path. \n\n12.1 R’s default handling of working directories\nIn R, the starting point, or working directory, is fixed for all R files opened in a session (called a session variable).  Using the google maps analogy, this is like saying the map starting point is fixed for everyone – it does not matter where you actually are located.  You can change the working directory in your script using setwd() but this changes the working directories for all R files in the session.  In other words, you are simply changing the starting point to a new location and all files will now use that location.\n\n\n12.2 Absolute file paths (a bad fix to the problem)\nOne way to get around working directories is to use an absolute file path.  So, instead of mapping between weather.R and weather.csv, you just give the file path for weather.csv on your computer (called the absolute file path).\n \nThis will look something like: c:\\Users\\RStudent\\Documents\\WeatherProj\\Data\\weather.csv\n \nDoing this means you do not have to worry about working directories.  But this solution breaks as soon as you move files on your computer or move them to another computer.  The reason is that the file path changes.  Absolute file paths make it almost impossible to share file and should not be used.\n\n\n12.3 How RStudio Projects handle working directory (the least-worst option)\nAn RStudio Project sets the working directory to the Project Folder.  So, for weather.r to find weather.csv inside an RStudio Project, it just needs to know where weather.csv is located relative to the project folder.  Most likely this will be something like: Data\\weather.csv. This makes it far easier to share your project because the path to weather.csv will be the same on any computer.\nWhile I believe this is by far the best method for handling working directory issues, it comes with a major caveat:You need to open script files from within the RStudio Project.  Opening the project sets the working directory for all script files used in the session.  If you a file outside of the Project session, then the working directory is not set by the project.\n\n\n12.4 The default working directory\nA working directory is not defined for a file, it is defined for a session.  So, all files within that session will have the same working directory.  IF you change the working directory in one file, you change it for every file within the session.  This leads to awkward behavior where one R file can change the behavior of another R file within the same session by using setwd().",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "title": "1-01: RStudio Projects Setup",
    "section": "13 Extension: Different ways to install packages",
    "text": "13 Extension: Different ways to install packages\nHere are three different ways in RStudio to install packages used in your script\n\n13.1 Use the RStudio menu\nTo install packages using the RStudio menu:\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type the package name in the Packages textbox (RStudio will give suggestions based on what you have typed)\n\nnote: you can type in multiple packages using spaces to separate them\n\nClick Install\n\n\n\n13.2 Use the Console tab\nIn R, we can install packages using install.packages().  So, if you wanted to install GGPlot2, you would type:\ninstall.packages(\"GGPlot2\")\nNote: you can install multiple packages at once if you put the names in a vector:\ninstall.packages(c(\"GGPlot2\", \"gridExtra\", \"tidyverse\")\nThe Console tab in RStudio is an R interface, and you could type in the above line to install the GGPlot2 package.\n\n\n\n\n\n\nFigure 22: Using the RStudio Console to install a package\n\n\n\n\n\n13.3 Have RStudio install the packages\nRStudio looks through your script and will prompt you to install packages used in your script that you do not have installed. With a click, RStudio installs all needed packages and dependencies.\n\n\n\n\n\n\nFigure 23: RStudio looking for packages needed by the script– click Install and RStudio installs the required package(s)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-the-help-tab",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-the-help-tab",
    "title": "1-01: RStudio Projects Setup",
    "section": "14 Extension: The Help tab",
    "text": "14 Extension: The Help tab\nThe Help tab is essentially an intelligent online search through the R documentation.  So, if you type plot in the search bar and hit enter, the R plot help page from the online documentation will appear.  Note: you could have done the same thing by typing ?plot in the Console tab.\n\n\n\n\n\n\nFigure 24: The R plot help page in the online documentation.\n\n\n\n \nThe page that appears in the Help tab (Figure 24) is this page: https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/plot.html\n \nhttps://stat.ethz.ch is where the official documentation for R is located.  So, you will see this website appear quite often when you do an internet search for something R related.\n \nIn a future lesson we will use the Help tab to find information about GGPlot functions.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-run-vs.-source",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-run-vs.-source",
    "title": "1-01: RStudio Projects Setup",
    "section": "15 Extension: Run vs. Source",
    "text": "15 Extension: Run vs. Source\nTechnically speaking, the difference between Run and Source is:\n\nSource will execute all the code in a script file.\nRun will execute either:\n\nThe code that is highlighted (if code is highlighted) OR\nThe command that the cursor is on (if the command is on more than one line) OR\nThe whole line the cursor is on\n\n\n \nThe real difference lies in a historical discussion of scripting vs. programming, which is a discussion beyond this class.  Suffice to say, R was originally intended to be more like an advanced calculator than a programming language. The script files would contain multiple lines of code that could be execute independently and in any order (think of these as buttons on a calculator).  The user could click a “button” to pull in data, click another “button” to run statistical analysis on the data, and click a third “button” to output the analysis.  This is what the Run button does.\n \nHowever, as R has grown, the focus has shifted towards developing well-structured code just like any modern programming language (e.g., Python, C, Java). This means executing the script as a whole instead of in parts.  This is what Source does.  Executing your script as a whole instead of in parts has many advantages as the code is easier to debug, easier to share, and much better organized – because you are forced to organize it. In the not-so-humble opinion of this author, learning to treat your script as a whole is a vital part of learning how to program.  For this reason, we will always be using the Source button in this class.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/1-01-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "href": "lessons/1-01-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "title": "1-01: RStudio Projects Setup",
    "section": "16 Extension: Create a standalone R script",
    "text": "16 Extension: Create a standalone R script\nThere are two ways to create script file in RStudio:\n\nA standalone script\nAs part of an RStudio Project\n\n \nMany people use the first method.  In this class we exclusively use the second method.  The first method of creating a script file is fine for testing something out.  The second method is far better for organizing larger projects and sharing your code with others.\n \nThe reason the second method is better is because a project consist of many file that need to talk each-other.  Script files will call other scripts file or read in data from data files.  In order to makes this work, the script files need to know how to find the other files. In an RStudio Project, this is easy because the working directory is always the Project Folder of your project – and all files in the project are contained within the Project Folder.  So, you just need to look for the file relative to the Project Folder.\n \nR Programmers often get around the lack of a Project Folder/defined working directory by setting the working directory in code using setwd().  This can work locally but becomes problematic when files are shared or moved.  Whereas, RStudio Project always maintain their folder structure.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-01: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html",
    "href": "lessons/0-01-IntroductionAndSyllabus.html",
    "title": "Introduction and Syllabus",
    "section": "",
    "text": "The purpose of this class is to introduce students to the principles of programming using R and RStudio.  R and RStudio are powerful and versatile data analysis packages that are freely available. The R community is extensive and is constantly developing new tools that rival and, in many cases, surpass commercial statistical software and graphing packages.  This class is designed for students new to programming.  While the class focus is on R programming in RStudio, the programming skills taught (e.g., for loops, if-else statements, functions) are designed so that students can transfer their skills to other programming languages like C, JavaScript, or Python.\n \nThe class is a self-paced and asynchronous online class. The amount of material in the class is about the same as a 4 credit, one semester class and students are expected to complete the class within six months.  There are no regularly scheduled office hours but you can email the instructor anytime to ask questions or set up a Zoom meeting.  All contacts will receive a response within one business day.\n\n\nCharlie Belinsky\n\nbelinsky@msu.edu\n517-355-0126\n\n\nAbout me…\nI started my career as a Software Engineer for Motorola in Arizona where I developed software for military radios. From there I became a high school teacher in Port Huron, MI where I taught Computer Science, Web Design, and Physical Science. After that, I worked as an Instructional Designer for the College of Education at MSU where my main project was developing the hybrid graduate program. I currently work at the QFC where my primary job is developing and teaching online classes, including this one.  In my free time you will often find me with a backpack deep in a forest or, as my picture testifies to, hanging out in the West Rim of Zion National Park.\n\n\n\nYou can contact me, Charlie, regarding technical issues.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#welcome-to-programming-fundamentals-using-r-and-rstudio",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#welcome-to-programming-fundamentals-using-r-and-rstudio",
    "title": "Introduction and Syllabus",
    "section": "",
    "text": "The purpose of this class is to introduce students to the principles of programming using R and RStudio.  R and RStudio are powerful and versatile data analysis packages that are freely available. The R community is extensive and is constantly developing new tools that rival and, in many cases, surpass commercial statistical software and graphing packages.  This class is designed for students new to programming.  While the class focus is on R programming in RStudio, the programming skills taught (e.g., for loops, if-else statements, functions) are designed so that students can transfer their skills to other programming languages like C, JavaScript, or Python.\n \nThe class is a self-paced and asynchronous online class. The amount of material in the class is about the same as a 4 credit, one semester class and students are expected to complete the class within six months.  There are no regularly scheduled office hours but you can email the instructor anytime to ask questions or set up a Zoom meeting.  All contacts will receive a response within one business day.\n\n\nCharlie Belinsky\n\nbelinsky@msu.edu\n517-355-0126\n\n\nAbout me…\nI started my career as a Software Engineer for Motorola in Arizona where I developed software for military radios. From there I became a high school teacher in Port Huron, MI where I taught Computer Science, Web Design, and Physical Science. After that, I worked as an Instructional Designer for the College of Education at MSU where my main project was developing the hybrid graduate program. I currently work at the QFC where my primary job is developing and teaching online classes, including this one.  In my free time you will often find me with a backpack deep in a forest or, as my picture testifies to, hanging out in the West Rim of Zion National Park.\n\n\n\nYou can contact me, Charlie, regarding technical issues.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#class-requirements",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#class-requirements",
    "title": "Introduction and Syllabus",
    "section": "2 Class Requirements",
    "text": "2 Class Requirements\nStudents should be familiar with basic statistical concepts (e.g., mean, standard deviation, standard error).  All material for this course is online – no textbooks or any other purchases are required.\n\n2.1 Tech requirements\nHardware:  Any Windows (10 or 11), Mac, or Linux machine from the past ten years that has updates installed can handle all hardware and software requirements of this class.\n \nBrowser: You can use any browser (Firefox, Microsoft’s Edge, Chrome, Safari) updated within the last couple of years.\n \nVideoconferencing: We use Zoom for our videoconference meetings.  The meeting link will be emailed to you prior to the meeting.  It is recommended that you download and test your camera and microphone on Zoom before attending an instructor meeting.  The easiest way to do this is to go to the Zoom test page.  Note: Zoom’s test page will download Zoom for you.\n \nTo test your hardware in Zoom, open Zoom and make sure you are on the Home tab and click the Settings Icon (Figure 1) and the Settings Window will open Figure 1.  Go to the Audio and Video tabs to test your microphone, speakers, and webcam.  If you are using a Mac, the view is different but the buttons are the same.\n\n\n\n\n\n\nFigure 1: Testing the audio and video in Zoom (click on picture to resize).\n\n\n\n\n\n2.2 Accessing the class\nYou need a GitHub ID to access the class and hand in assignments. Go to http://github.com and click Sign up, you can use a free GitHub account or a professional account.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#class-structure",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#class-structure",
    "title": "Introduction and Syllabus",
    "section": "3 Class Structure",
    "text": "3 Class Structure\nThe course has 28 lessons divided into two units: Basic Programming and Data Programming\n \n\nBasic Programming: basic programming structures and operations like variables, inputs, outputs, mathematical operations, if-else structures, for loops, and conditional operations.\n\n1-1 RStudio Projects Setup: Set up a Project in RStudio and learn the basics of the RStudio programming environment.\n1-2 Variables: Discussion of the different types of variables, variable naming conventions, assigning values to variables, changing values.\n1-3 Mathematical Operations: Mathematical operations on numeric variables, power operations, algebraic formulas in R\n1-4 Vectors and Data Frames: Learn about CSV files and two common data types in R\n1-5 Functions Introduction: Reading function descriptions and using arguments\n1-6 Run and Source: The two ways in R to execute a script and some convenient coding feature in RStudio\n1-7 Outputs: Output information to the console, mixed string, and numeric outputs.\n1-8 Conditional Operators: Creating decision points in your script using if() statements and the six conditional operators.\n1-9 If-Else Statements: Checking multiple conditions on a variable, creating error conditions.\n1-10 For loops: Cycle through data using for loops and performing conditional operations on each value\n1-11 For loops and State Variables: Remembering values as you cycle through for loops\n1-12 Multiple Conditions: Checking complex conditions on a variable using logical operators & and\n1-13 Functions: Creating your own function, adding and using arguments and return values \n1-14 Function 2: Default arguments, multiple returns, error checking\n1-15 Nested Loops and Matrices: for loops within for loops and multidimensional vectors\n\nData Programming: data programming structures and operations like file inputs, vectors, subset operations, plotting, and data types.\n\n2-1 GGPlot Introduction: Structures within GGPlot, creating basic plots from data in a data frame\n2-2 Data frame Modifications: Add, remove, and reorder column in a data frame, and manipulating string values\n2-3 Data types and Data Frames: Conversion between data types, NA values, common issues with data frames\n2-4 Which Statements: Conditionally subset numeric data, plot subsetted data\n2-5 Which and Regular Expressions: Conditionally subset string data, finding patterns in string values \n2-6 Datetime Objects: Formatted date and datetime values, converting from strings to datetime value \n2-7 Matrices: Create two-dimensional data, performing statistics on 2D data\n2-8 Binding and Sampling: Combining data and creating randomly sampled values\n2-9 Stacking and Mapping: Plotting multiple columns in a data frame at once, mapping data to color and size\n2-10 Statistical Tests: t-tests, ANOVAs, linear regressions and storing and reading information from the tests \n2-11 Objects and Attributes: deeper dive into the data types in R and their attributes\n2-12 Lists: Reading, navigating, subsetting, and creating List objects in R \n2-13 Breakpoints: a method for debugging your code \n\n\n\n3.1 Lesson Application\nAll lessons have an Application section at the end that will ask you to apply what you learned in the lesson in your own script. The Application is the only product that gets evaluated. There are no tests and there is no final exam.\n \nThe class is self-paced, however you should not go more than 2 weeks without handing in an application unless you inform the instructor that there will be a delay.  You will have a chance to redo all applications.\n\n\n3.2 Lesson feedback\nEach application has these three questions regarding the lesson:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n \nThese questions are vital for feedback in this class and far more useful to me than end-of-class surveys as they give me real-time information.  Please take a few minutes to answer these questions.  Feedback from these questions has become my main way of improving the class.  In return, I promise to address concerns and questions from your responses.\n\n\n3.3 Extensions and Traps\nMany of the lessons contain optional content called Extension and Traps.  Extensions contain material that goes beyond the lesson’s objectives and Traps capture some of the common issues students have with the lesson’s objectives.  There are links to Extensions and Traps within the Content area of the lesson.  Clicking on the appropriate link takes you directly to the Extension or Trap. Extension: Testing the extension link",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#student-instructor-meetings",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#student-instructor-meetings",
    "title": "Introduction and Syllabus",
    "section": "4 Student-Instructor Meetings",
    "text": "4 Student-Instructor Meetings\nWith the exception of an initial meeting (after lesson 2), student-instructor meetings will be done on an as-needed basis and meetings can always be requested by the student.  Meetings are preferably over Zoom so that screens can be shared.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#lesson-features-technical",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#lesson-features-technical",
    "title": "Introduction and Syllabus",
    "section": "5 Lesson features (technical)",
    "text": "5 Lesson features (technical)\nThis sections goes over some of the technological features built into the lessons.\n\n5.1 Long-click menu\nIf you long-click (hold left-button for about half a second) anywhere on any lesson page Figure 2, try it!), you are given options to:\n\nReturn to the Previous Position (only appears after you have jumped to a position on the page)\nGo to Top of Page\nPrint/ Save as PDF (same as the lesson’s Print link)\nMaximize All Images\nMinimize All Images\n\n \n\n\n\n\n\n\nFigure 2: The long-click menu – this view is from Firefox .\n\n\n\n\n\n5.2 Resizing Pictures\nMost images in the course can be resized so that the picture is out of your way when you don’t need to view it.\n \nClicking on the image toggles it between the minimized and maximized states.\nClicking and dragging on the image allows you to resize the image to any size. (Figure 3).\n\n\n\n\n\n\nFigure 3: Test picture to resize (Ninh Bình, Việt Nam)\n\n\n\n\n\n5.3 Figures and references\nWhen you click on a figure reference (e.g., Figure 3), the caption on the figure will highlight for 2 seconds.\n \nIf the figure is not on the screen, then the page will scroll to the figure and highlight it.  For instance, clicking on Figure 1 will take you to the Zoom figure near the top of this page.  You can return to this position by long-clicking and selecting Return to the Previous Position\n\n\n5.4 Printing lessons and saving lessons to PDF\nYou can print any lesson or save it as a PDF by clicking on the Printer icon at the top of every lesson (and this syllabus).  This will bring up a print dialog (Figure 4) and you can print the lesson to a printer.  On most machines, you can also choose a PDF device as a printer – this will save the lesson as a PDF document.\n \nNote: Using your browser’s print feature instead on the Print link will print out the whole webpage instead of just the lesson.\n\n\n\n\n\n\nFigure 4: This author has two print-to-PDF devices – the Microsoft Print to PDF, which comes with Windows 10 and 11, works fine\n\n\n\n\n5.4.1 Print-to-PDF Software\nIf you are using Windows 7 or 8 you might not have a Print to PDF option and you will need to download Print-to-PDF software. You can see if you have a PDF device by going to the print options in any program and see if any of the devices have “PDF” in their name (Figure 4).  If you don’t have a PDF device, then I recommend you install CutePDF (direct link to the file download).  CutePDF is simple and powerful print-to-PDF software that does not try to install any extra software on your computer. Trap: Bloatware\n\n\n\n5.5 Codeblocks\nClicking on the clipboard in the upper-right corner of the codeblock (Figure 5) will copy the code to the clipboard. You can then paste the code into RStudio (or any other text editor)\n\n\n\n# the next two lines should be at the top of all your scripts\nrm(list=ls());\noptions(show.error.locations = TRUE);\n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;\nt = 20;\nv = d/t;\n\n\nFigure 5: Clicking on clipboard in upper-right corner selects all the text and copies it to the clipboard\n\n\n\n\n\n5.6 Special note about images in the lessons for this class\nRStudio is a rapidly evolving program, and it would be too much work to maintain all the lesson images in order to reflect the visual likeness of the newest version of RStudio.  Some of the images in this class still reflect the 2019 version of RStudio (when R was still at version 3.5). There are also minor changes that I have made to the code that I did not believe warrants putting in new images.  For instance, my RStudio Project name might change between images and some of the RStudio buttons and tabs will look slightly different (think of it as a check on how observant you are!).  I have tried to make sure these differences change nothing functionally.  Inevitably, something will fall through the cracks – so please, contact the instructor if there is something causing a problem!",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#personal-statement-from-charlie",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#personal-statement-from-charlie",
    "title": "Introduction and Syllabus",
    "section": "6 Personal statement from Charlie",
    "text": "6 Personal statement from Charlie\nThe biggest thing that is lost when you move a class from a face-to-face environment to an online environment is the daily interaction between the instructor and the students.  These interactions provide invaluable informal feedback for the instructor and, I would argue, are the main tool that an instructor uses to make improvements to their class.  It is impossible to replicate this in an online class but I ask that you help me out and make an effort to communicate to me the little things.  This could mean technical nags like content not appearing properly or pages loading too slowly, lesson content that is unclear, grammar and spelling issues, or scripts that does not work or work in a way that you do not understand.\n \nThank you for reading and taking this into consideration.  In the end, it is the interactions between an instructor and the students that make a class great.\n \nNow on to the stuff I have to put in a syllabus…",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#disclaimers-and-loose-ends",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#disclaimers-and-loose-ends",
    "title": "Introduction and Syllabus",
    "section": "7 Disclaimers and Loose Ends",
    "text": "7 Disclaimers and Loose Ends\n\n7.1 Student Responsibilities\n\nStudents are expected to regularly check the home page for the class and their email for new information regarding the class.\nStudents are expected to ask questions if they are having problems with the course material or application.\nStudents are expected to maintain their progress in order to complete the course work on time.\nStudents are expected to contact either the instructor or MSU regarding technical issues that are interfering with the class.\nStudents are expected to follow the MSU’s academic integrity policy.\nPlease notify the instructor regarding issues with the class website and lessons.\n\n\n\n7.2 Academic Integrity (summarized)\nWritten or other work which a student submits in a course, shall be the product of his/her own efforts. Plagiarism, cheating, and all other forms of academic dishonesty are prohibited. Students are expected to adhere to the ethical and professional standards associated with their programs and academic courses. All applicable portions of Michigan State’s Policy on Academic Integrity apply to non-credit courses.\n\n\n7.3 Instructor Responsibilities\n\nInstructor will be available for assistance for requested virtual office hours (through Zoom).\nInstructor will respond to emails from students within 1 business day.  Potential for delayed responses (e.g., instructor is on vacation) will be posted on the home page of the course.\nChanges to the course will be posted on the home page for the class.\n\n\n\n7.4 Attendance\nYou are expected to log in to the class at least once a week. Logging in allows you to stay updated and see new announcements.\n\n\n7.5 Participation\nPlease note that not all course lessons are the same length and the later ones tend to involve more work. Our goals with regard to participation/progress are to (a) keep you engaged in the course, (b) enhance the overall learning environment by promoting student-teacher communication, and (c) avoid a last minute time crunch for everyone involved. We will not be sympathetic or make allowances for your failure on course tasks or deadlines that result from not seeing announcements because you had not accessed the course for an extended period, and had not told us you would be away from the internet.\n\n\n7.6 ADA Statement\n\nMSU provides students with disabilities reasonable accommodations to participate in educational programs, activities, or services. Students with disabilities requiring accommodations to participate in class activities or meet course requirements should contact the instructor as early as possible.\nFor students needing accommodations for disabilities, please contact your instructor and The Resource Center for Persons with Disabilities at Michigan State University at 517-353-9642.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#trap-bloatware",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#trap-bloatware",
    "title": "Introduction and Syllabus",
    "section": "8 Trap: Bloatware",
    "text": "8 Trap: Bloatware\nAdobe Acrobat, like most free software you download, attempts to bundle itself with software you most likely do not need nor want (i.e., bloatware).  Make sure you take some time to read the optional offers whenever you download software. This author would argue that the main reason computers “slow” down over time is because of extra software that users unwittingly install.\n \n\n\n\n\n\n\nFigure 6: Adobe tries to get you to install McAffee – I highly recommend you uncheck that box.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/0-01-IntroductionAndSyllabus.html#extension-testing-the-extension-link",
    "href": "lessons/0-01-IntroductionAndSyllabus.html#extension-testing-the-extension-link",
    "title": "Introduction and Syllabus",
    "section": "9 Extension: Testing the extension link",
    "text": "9 Extension: Testing the extension link\nHi, and welcome to the test Extension.  If you clicked on the Extension link to get here then you can return to your previous location by long-clicking on this page and choosing Go to Previous Location.\n \nIf you just scrolled down to this point then, congratulations, you have reached the end of the document.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Introduction and Syllabus"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#purpose",
    "href": "lessons/1-02-Variables.html#purpose",
    "title": "1-02: Variables",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nDiscuss what a programming variable is and how it compares to an algebraic variable.\nDiscuss naming conventions for variables.\nAssign and reassign values to variables\nIntroduce in-line and whole-line comments.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#questions-about-the-material",
    "href": "lessons/1-02-Variables.html#questions-about-the-material",
    "title": "1-02: Variables",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#programming-structures",
    "href": "lessons/1-02-Variables.html#programming-structures",
    "title": "1-02: Variables",
    "section": "3 Programming structures",
    "text": "3 Programming structures\nIn all programming languages there are basically 4 main structures that cover almost every aspect of programming:\n\nVariables: named storage area for values used in the script\nIf-Else Statements: conditional execution of code\nFor Loops: execution of code a fixed number of times\nFunctions: place to store commonly used code\n\n \nWe will go through all 4 of these in the class and in the lesson we will cover the first, Variables.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#different-types-of-variables",
    "href": "lessons/1-02-Variables.html#different-types-of-variables",
    "title": "1-02: Variables",
    "section": "4 Different types of variables",
    "text": "4 Different types of variables\nVariables is a widely used term found in many different fields, and its definition is not consistent across the fields.  In this class, when I say variable I am referring to a programming variable. When I am referring to a variable in another field, I will add the field to the term variable (e.g., algebraic variable, experimental variable, statistical variable).\n\n4.1 Algebraic variables\nIn Physics, we use algebraic variables to describe the relationship between physical properties.  For example, velocity can be expressed algebraically as  v=d/t where v, d, and t are symbols representing the physical properties of velocity, distance, and time.  The formula states that the relationship v=d/t is always maintained even as the individual values change.\n \nIn this case, v, d, and t are all algebraic variables that have the following properties:\n\nName: v, d, t (name is synonymous with symbol)\nType: numeric (v, d, and t are all numbers)\nValue: given by situation – the value can be known or unknown\n\n\n\n4.2 Variables in programming\nIn programming, variables work in a similar way. Variables in programming are named storage locations in memory that hold information.\n \nThis information could be\n\na runner’s distance, time, and velocity\nthe number of fish caught in a day\nthe name of the lake the fish were caught in\nweather information such as temperature, humidity, or wind speed\n\n \nLike algebraic variables, variables in programming have a name, type, and value.\n\n4.2.1 Name\nThe name corresponds to the symbol in our physics example above – it is how the variable is represented in the script.  The name is used to reference the storage location in memory that holds the value.  For our initial example, we will use v, d, and t as the variable names.  Later in this lesson, I will talk about variable naming conventions.\n\n\n4.2.2 Value \nThe value is the information that is stored in the location pointed to by the name, so when v = 10 , that means there is a storage location in memory named v, and in that location, there is the number 10. Note: we will worry about units later.\n \nTrap: Constant variables in R\n\n\n4.2.3 Type\nThe type describes what kind of value is being stored in memory which, in turn, tells R what kind of operations can be performed on the variable. Distance, velocity, and time all have numeric values, and mathematical operations can be performed on them.\n \nNumeric is one type of value a variable can have, some of the other types of values are:\n\nstrings (also called characters): a text value (e.g., a lake name)\ncategorical: a limited set of text values (e.g., the four seasons or the five Great Lakes)\nBoolean: a TRUE/FALSE statement\nDate: a date in day-month-year format\n\n \nWe will talk more about the non-numeric variable types in future lessons, for now, we will stick with numeric variables.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#using-variables-in-a-script",
    "href": "lessons/1-02-Variables.html#using-variables-in-a-script",
    "title": "1-02: Variables",
    "section": "5 Using variables in a script",
    "text": "5 Using variables in a script\nWe are going to create a simple script that calculates velocity given distance and time.\n \nThere are three variables in this script: d, v, and t\n \nThe steps for making this script are:\n\nOpen Your RStudio Project (or create one if you do not have one)\nOpen a new script file\nAdd code to the script\nExecute (Source) the code\n\n\n5.1 Open your RStudio Project\nIt would be best to use the same RStudio Project for the whole class and you can use the one you created in the last lesson.\n \nThere are multiple ways to open an RStudio Project:\n\nOpen your Project Folder in a file manager and double-click the *.proj file, where * is the name of your project\nIn RStudio, click File -&gt; Open Project… -&gt; navigate to your Project Folder and click the *.proj file\nIn RStudio, click File -&gt; Recent Projects -&gt; choose the RStudio Project\nUse the Projects dropdown menu in the top-right corner of RStudio (Figure 1)\n\n\n\n\n\n\n\nFigure 1: The Project dropdown menu in RStudio – something I use all the time!\n\n\n\n\n\n5.2 Open a new script file\nInside your RStudio Project, click on File -&gt; New File -&gt; R Script (Figure 2) .  An empty file named Untitled1 will appear as a tab in the File Editor window.  Save the file as lesson1-02.r in your script folder.\n \nNote: you should always name and save a script file before editing it. Do not leave it as Untitled1\n\n\n\n\n\n\nFigure 2: Opening a new R file in RStudio\n\n\n\n\n\n5.3 Add code to the script\nCopy and paste the following lines into the code window and click the Source button in the bar above the code (or click Code -&gt; Source):\nrm(list=ls());    # Clear out the Environment     \n  \n# create two variables: d and t and give them values\nd = 100;\nt = 20;\n# create a variable v that is calculated using d and t\nv = d/t;\nLines 1 cleans out the Environment tab (top-right corner) each time the script is executed.  This provides you with a clean slate each time you run a script and I put this line at the top of most of my scripts.\nExtension: Why clear the Environment tab?\n \nLine 1 also has an inline comment that starts with #. Everything after the # is informational and does not get executed.\n \nLines 3 and 6 are full comment lines – again, they are informational and there to make the script easier to understand.  You can take them out and the script will produce the same result.\n \nLines 4, 5, and 7 are where the real action occurs and each line contains a variable assignment:\n\nLine 4 assigns the value 100 to the variable named d\nLine 5 assigns the value 20 to the variable named t\nLine 7 assigns the value of the calculation d/t to the variable named v.\n\n \nLines 1, 4, 5, and 7 all have semicolons ( ; ) at the end.  The semicolon designates the end of a programming command just like the period designates the end of a sentence.  The semicolon is optional in R and is often not used, but I highly recommend the use of semicolons in all of your scripts. Semicolons allow for more flexibility (e.g., you can put multiple “sentences” on one line), help you think about the flow of your code, and are required in many programming languages.\n \nTrap: Assignment vs. Equality Operations\nExtension: alternate assignment operator\n\n\n5.4 Execute your code – the Environment tab\nClick Source to execute your R code ( Figure 3 ).  Your RStudio window should look similar to this:\n\n\n\n\n\n\nFigure 3: Executing (sourcing) the velocity-distance-time script\n\n\n\nNotice that the Environment tab displays the values for the variables v, d, and t. The Environment tab displays every variable in your script and is a very useful tool for viewing the results of your script and for debugging when things go wrong..\n \nTry changing the values for d and t (lines 7 and 8) and click Source again to see how the values in the Environment tab change.\n\n5.4.1 The Unexpected end of document error\nIn Figure 3 there is a red x on the last line indicating an error. The error says unexpected end of document. This is not a real problem, it will not cause any issues with your script. It is a bug in how RStudio deals with semicolons. You can remove the last semicolon if you want to get rid of the error.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#re-assigning-values-to-variables",
    "href": "lessons/1-02-Variables.html#re-assigning-values-to-variables",
    "title": "1-02: Variables",
    "section": "6 Re-assigning values to variables",
    "text": "6 Re-assigning values to variables\nVariables get their namesake from the fact that their values can change.\n \nIn the code below:\n\nd is assigned the value 100 in line 5\nd to used to calculate v in line 7\nd is assigned a new value of 400 in line 8\n\n \nSource the code below to see what happens\nrm(list=ls());    # Clear out the Environment    \n  \n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;   # assign d the value 100\nt = 20;\nv = d/t;   # use d to calculate v\n\nd = 400;   # re-assigns d to 400\nIn the Environment tab the value of v remains 5 even though d changes. \n\n\n\n\n\n\nFigure 4: Changing d in the script does not retroactively change v\n\n\n\nThe value of v remains 5 because line 7 assigns the current valueof d/t to v. But, as of line 9, d is still equal to 100. v does not get updated because one of the variables used to calculate it (in this case, d) changes afterwards. The script runs in order, and variables are not updated retroactively.\n \nIn other words, v will remain 5 until it is explicitly assigned another value.\n \nTrap: Assigning nonexistent variables\n\n6.1 Reassigning values to a variable\nWhat happens if you add the line v=d/t at the end of the script? Try the following code and click Source\nrm(list=ls());    # Clear out the Environment    \n  \n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100; # assign d the value 100\nt = 20;\nv = d/t; # use d to calculate v\n\nd = 400; # re-assigns d to 400\nv = d/t; # re-assign v using the new value of d\nNotice that now the value of v has changed.  This is because line 10 assigns a new value to v calculated using the value of d from line 9.\n\n\n\n\n\n\nFigure 5: Assign a new value to v after assigning the new value to d",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#in-line-and-whole-line-comments",
    "href": "lessons/1-02-Variables.html#in-line-and-whole-line-comments",
    "title": "1-02: Variables",
    "section": "7 In-line and whole-line comments",
    "text": "7 In-line and whole-line comments\nThe code in the previous script (Figure 5) has examples of whole-line comments (lines 3 and 4) and in-line comments (lines 5, 7, 9, and 10 ).  R ignores everything after the ( # ) but still executes everything on the line before the ( # ).  In-line comments are a nice way to give a quick description of the code on a line, whereas whole-line comments are better for more robust descriptions – especially when code get complicated.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#naming-variables",
    "href": "lessons/1-02-Variables.html#naming-variables",
    "title": "1-02: Variables",
    "section": "8 Naming variables",
    "text": "8 Naming variables\nThe problem with variable names like v, d, and t is that they are not very descriptive.  It is good programming practice to give names that are descriptive so that people reading your code can more easily understand what is going on. \n \nThe first step would be to spell the variable names out, for example: velocity, distance, and time.\n \nHowever, a script solving for velocity will probably be calculating multiple velocities.  Perhaps the script is calculating the velocity of both a runner and a car – the variable names should reflect this. \n\n8.1 Naming Rules\nThere are a few rules for naming a variable:\n\nIt must start with a letter\nIt can only contain letters, numbers, or the underscore ( _ )\n\ndots ( . ) are also accepted in R but dots are not accepted in most programming languages\nthis means no spaces!\n\nThere are system reserved words you cannot use as variable names (e.g., if, else, for, while, TRUE, FALSE, function, next…).  We will learn what these reserved words mean in future lessons.\n\n\n\n8.2 Naming Conventions\nThere are two common programming conventions for variables names:\n\nCapitalize the first letter of every word except the first: runnerVelocity, runnerDistance, runnerTime\nPut an underscore ( _ ) between each word:  runner_velocity, runner_distance, runner_time\n\n \nTrap: Case counts in variable names\n \nFor all your class work, you need to use these two conventions.  I will use the first convention in most of my examples.\n \nNote: R programmers often use dots in variable names: runner.velocity, runner.distance.  I do not recommend this as this method will not work in most other programming languages.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#application",
    "href": "lessons/1-02-Variables.html#application",
    "title": "1-02: Variables",
    "section": "9 Application",
    "text": "9 Application\nTwo runners run a 400 meter race. \nThe first runner takes 127 seconds, the second runner takes 140 seconds.\n \nWrite a script that:\n\nCalculates each runner’s speed in meters/second\nCalculates each runner’s speed in miles/hour\n\n3600 seconds = 1 hour\n1609 meters = 1 mile\n\n\nSo, the script will calculate 4 velocities in all.\n \nMake sure you use variables for all values and follow proper variable naming convention.\n \nAfter your Source the script, make sure you can see all of the variables, with the correct answer, in the Environment tab.\n \nSave the script as app1-02.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n9.2 Challenge\nUse random values for the times instead of 127 and 140.  The easiest way to get a random number in R is to use the sample() function:\n \nExamples:\nrandomNum1 = sample(x=10:20, size=1);  # number between 10 and 20 (inclusive)\nrandomNum2 = sample(x=-5:5, size=1);   # number between -5 and 5 (inclusive)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-assignment-vs.-equality-operations",
    "href": "lessons/1-02-Variables.html#trap-assignment-vs.-equality-operations",
    "title": "1-02: Variables",
    "section": "10 Trap: Assignment vs. Equality Operations",
    "text": "10 Trap: Assignment vs. Equality Operations\nThe equal sign ( = ) plays a different role in programming than in Algebra.\n \nIn algebra, the equal sign is an equality operator saying that the two sides are equivalent to each other.\n\nSo, in algebra, v = d/t says that v is equivalent to d divided by t\nThe algebraic variable v will change if d or t changes\n\n \nIn programming, the equals sign is an assignment operator and it says that the variable on the left side will be assigned the value calculated on the right side.\n\nSo, in programming, v = d/t says that v will be assigned the calculation of  d divided by t\nIn this case, v will not change if d or t changes (unless v is explicitly reassigned after d or t changes).  Once assigned, the value of v is independent of the variables used in the calculations.\n\n\n10.1 Treating the equal sign as an equality operation\nA very common error in programming is to treat the assignment operator ( =) as an equality operator.\n \nThe following statements make sense in algebra as equality statements but will cause errors in R.\n# d/2 is not a valid variable, you cannot \"assign\" a value to \"d/2\"\n# d = 100*2 is valid\nd/2 = 100; \n\n# 20 cannot be assigned the value of 't' \n# t = 20 is valid\n20 = t;  \n\n# d/t is not a valid variable \n# v = d/t is valid\nd/t = v;\nPut the above lines of code in your script individually.  You will notice an error message gets displayed in the Console tab.  The error messages are often unintuitive.\n \nIn the following example (Figure 6), line 9 contains an error and the lines below it never gets executed:\nrm(list=ls());\n# this code sometimes gives the line number of an error\noptions(show.error.locations = TRUE);  \n\n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;\n20 = t;   # error!\nv = d/t;  # this line will not be executed\n\n\n\n\n\n\nFigure 6: Assignment error in the R Script\n\n\n\nNotice that the execution of the script stops as soon as an error occurs – so, in this case, line 10, which calculates v, never gets executed.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-constant-variables-in-r",
    "href": "lessons/1-02-Variables.html#trap-constant-variables-in-r",
    "title": "1-02: Variables",
    "section": "11 Trap: Constant variables in R",
    "text": "11 Trap: Constant variables in R\nThere are mathematical constants like π that should never change, and R has a predefined variable named pi that is equal to 3.1415.  In other words, there is a storage location in R referred to as pi that contains the numeric value 3.1415. The problem is that pi is technically a variable in R and can be changed.\n \nSource the following code in a new script file:\nrm(list=ls());\n\na = pi;  # pi is a predefined constant in R\npi = 3;  # But, R let's you reassign a value to pi\nb = pi;  # And now there is going to be a problem\nAnd you will see that you can reassign the value of pi in R. Most programming langauges will give an error if you tried to do this.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-assigning-nonexistent-variables",
    "href": "lessons/1-02-Variables.html#trap-assigning-nonexistent-variables",
    "title": "1-02: Variables",
    "section": "12 Trap: Assigning nonexistent variables",
    "text": "12 Trap: Assigning nonexistent variables\nThe first time you assign a value to a variable, a storage container is created in memory and a value is put in it.  We call this a declaration (more about declarations later). After a variable has been declared, it can be used in calculations and re-assigned values.  Before a variable is declared, R knows nothing about the variable.\n \nHere is an example of using a variable before it is declared. Note: the only change in this script was moving the line v=d/t before the declaration of d and t:\nrm(list=ls());             \n# gives the line number of the error\noptions(show.error.locations = TRUE);\n  \n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nv = d/t;   # error, d and t have not been declared\nd = 100; \nt = 20;\nIf you Source this code in a new script file, you will get an error in the Console tab that says object ‘d’ not found. The reason for this error is that, on line 7, the script is asked to assign the calculation d/t to the variable v but d and t do not exist yet.\n \nTry the following code and see how the error changes. Notice in this code v=d/t is after the declaration of d but before the declaration of t.\nrm(list=ls());             \n# gives the line number of the error\noptions(show.error.locations = TRUE);\n\n# create three variables: d, t, and v\n# give d and t values and use them to calculate v\nd = 100;\nv = d/t;  # error\nt = 20;",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#trap-case-counts-in-variable-names",
    "href": "lessons/1-02-Variables.html#trap-case-counts-in-variable-names",
    "title": "1-02: Variables",
    "section": "13 Trap: Case counts in variable names",
    "text": "13 Trap: Case counts in variable names\nIn R, as in most scripting languages, uppercase and lowercase letters are seen as different.  So, runnersTime and runnerstime are seen by R as two different variable names.  If the case is not correct, then you will receive an Object not found error just like you would if you spelled the variable name wrong.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#extension-alternate-assignment-operator",
    "href": "lessons/1-02-Variables.html#extension-alternate-assignment-operator",
    "title": "1-02: Variables",
    "section": "14 Extension: alternate assignment operator",
    "text": "14 Extension: alternate assignment operator\nIn R, there are two assignment operators, the equal sign ( = ) and the arrow ( &lt;- ). \nrm(list=ls());    # Clear out the Environment  \n  \nd &lt;- 100;   # same as d = 100\nt &lt;- 20;    # same as t = 20\nv &lt;- d/t;   # same = d/t\nYou will see a lot of R programs written using the arrow.  In this class, I will use the equal sign because that is the standard for most other programming languages (including JavaScript and C) and it is easier to type.  You can use either operator in your scripts in this class.\n \nFor assigning values to a variable, ( &lt;- ) and ( = ) are functionally equivalent. There is a difference between the two operators when working with functions, which we will cover when we get to function.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-02-Variables.html#extension-why-clear-the-environment-tab",
    "href": "lessons/1-02-Variables.html#extension-why-clear-the-environment-tab",
    "title": "1-02: Variables",
    "section": "15 Extension: Why clear the Environment tab?",
    "text": "15 Extension: Why clear the Environment tab?\nThis is kind of an advanced topic but there are many people who come to this class having already done some R programming and it is most likely they never clear the Environment when running scripts. This means that variables are persistent and will still be around when another script is executed.\n \nThis, in general, is a bad programming practice, which I will talk more about in future lessons. If a script needs a variable from another script then you want the first script to call the second script. This kind of explicit programming makes sharing and debugging your scripts a lot easier.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-02: Variables"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html",
    "title": "1-04: Vectors and Data Frames",
    "section": "",
    "text": "extension about why I added arguments when reading the CSV file\nadd some more images for early examples?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#purpose",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#purpose",
    "title": "1-04: Vectors and Data Frames",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nIntroducing vectors\nOpening a CSV file and saving data to a data frame\nPulling columns from a data frame\nPulling individual values from a column\nPulling multiple values for a column\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.\n\n1.1 Files for this lesson\nFrom this point on most lessons will have script and/or data files to download.\n \nThe script for this lesson is here\n\nSave the linked script file to the scripts folder in your Class Project\nThe script file contains the code in this lesson in the order it appears in this lesson. Source the script to see the results from this lesson.\n\n \nThe data used in this lesson, twoWeekWeatherData.csv\n\nSave the linked data file to the data folder in your Class Project\n\nIf you save the data file to the wrong folder, the script file will not be able to read it.\n\nTrap: Opening CSV files in Excel",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#standalone-scripts-vs.-scripts-within-a-project",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#standalone-scripts-vs.-scripts-within-a-project",
    "title": "1-04: Vectors and Data Frames",
    "section": "2 Standalone scripts vs. scripts within a Project",
    "text": "2 Standalone scripts vs. scripts within a Project\nIn the last two lessons, everything we did was contained to one script file – no outside file was needed.  The scripts in those lessons were standalone scripts and could be executed inside or outside your RStudio Project with the same results.\n \nStandalone scripts are rare and are generally only created for testing purposes.\n \nThe script for this lesson will not execute correctly if it is treated as a standalone script (e.g., it is executed outside of the RStudio Project). This is because the file looks for a data file and it needs to know where to look for the data file.\n\n2.1 Set Working Directory (a cautionary statement)\nMany people still treat all R scripts as standalone scripts (i.e., they do not use RStudio Project). This causes all sorts of problems when script file look for other files.  The old way to get around this is to set the Working Directories using setwd().  This is a mess because Working Directories change when file are moved between computers or even within a computer.  Scripts that set working directories are much harder to share and maintain.  This author strongly suggests that you use RStudio Projects and avoid the working directory mess.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#vector-variables",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#vector-variables",
    "title": "1-04: Vectors and Data Frames",
    "section": "3 Vector Variables",
    "text": "3 Vector Variables\nVector variables, or vector for short, are variables that hold multiple related values.  For instance if we have temperature values for 5 days, we could create 5 variables and assign each one a temperature value:\ntempHigh1 = 65;\ntempHigh2 = 57;\ntempHigh3 = 61;\ntempHigh4 = 64;\ntempHigh5 = 59;\nAnd, in the last lesson’s application, we averaged the 5 values like this:\ntempAvg = (tempHigh1 + tempHigh2 + tempHigh3 +\n           tempHigh4 + tempHigh5) / 5;\n\n3.1 Grouping values\nBut, in programming we want to group related values together.  So, instead of creating 5 different variables, we create one vector that has 5 values:\ntempHigh = c(65, 57, 61, 64, 59);\nOne of the main reasons to create a vector is that the values in the vector are all associated and we can perform mathematical operations on the whole vector.  For instance, the vector might consist of multiple temperatures in Fahrenheit and want to convert all the temperatures to Celsius:\ntempHighCel = (5/9) * (tempHigh - 32)\nOr, we can use one of R’s many, many statistical functions, mean(), on the vector:\ntempMean = mean(tempHigh); \nAfter executing the code in this section, we can see in the Environment tab that tempHighCel has 5 converted temperatures and that tempMean is the same as tempAvg:\ntempAvg:     61.2\ntempHigh:    num [1:5] 65 57 61 64 59\ntempHighCel: num [1:5] 18.3 139 16.1 17.5 15\ntempMean:    61.2\n\n\n\n\n\n\nFigure 1: View of temperature values in Environment\n\n\n\nExtension: Statistical functions on vectors\n\n\n3.2 Indexing values in a vector\nPutting values into vectors also allows us to associate values between vectors.  If we have a vector of high temperature values, then we could also have a vector of low temperature values.\ntempLow = c(45, 40, 55, 37, 42);\nWe can directly subtract tempLow values from tempHigh to get the difference in temperature for all values:\ntempDiff = tempHigh - tempLow;\nWe can index individual values.  You could think of the vector as 5 days.  And if you want, you can find the change in temperature for any day using the index 1 through 5:\ntempDiff_3 = tempHigh[3] - tempLow[3];\ntempDiff_5 = tempHigh[5] - tempLow[5];\nThe Environment shows:\ntempHigh:    num [1:5] 65 57 61 64 59\ntempLow:     num [1:5] 45 40 55 37 42\ntempDiff:    num [1:5] 20 17 6 27 17\ntempDiff_3:  6\ntempDiff_5:  17\n\n\n3.3 Vectors and columns in a data frame\nData frames are made up of vectors that all have the same length.  The vectors are the columns in the data frame and the number of values in the vector is determined by the number of rows in the data frame.\n \nIn Figure 2 there is a weather data frame (note: we are using this data frame in future lessons, not this one) where each column has a measured daily weather value (e.g., minTemp, maxTemp, relHum).  Each row gives the measured weather values for a specific day (e.g., row 1 is Jan 1, row 2 is Jan 2).\n\n\n\n\n\n\nFigure 2: A data frame viewed in RStudio with 23 variables (i.e., the 23 columns, which are vector variables)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#csv-files",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#csv-files",
    "title": "1-04: Vectors and Data Frames",
    "section": "4 CSV files",
    "text": "4 CSV files\nIn the first couple of lessons we were using data from inside the script but most of the data you will use will come from outside the script – often from a data frame. The data frames themselves often come from a CSV file. CSV stands for Comma Separated Values, meaning that the values in the file are separated by commas.\n \nNote: CSV is really just a text file that can be read in any text editor and CSV file do not have to use commas as separators.\n \nLet’s look at a small data set we downloaded in the Section 1.1 section called twoWeekWeatherData.csv, which contains two weeks of weather data from Lansing, Michigan. \n\n4.1 Opening a CSV file\nNote: CSV files are often opened by default in Excel and this can problematic: Trap: Opening CSV files in Excel\n \nCSV files are just text files and CSV files can be opened in any text editor (e.g., notepad, notepad++, textEdit).\n \nRStudio is also a text editor so we can open and edit twoWeekWeatherData.csv in RStudio by either:\n\nClicking File -&gt; Open File… and navigate to twoWeekWeatherData.csv and press OK.\nUsing the Files tab: navigate to the data folder, click on twoWeekWeatherData.csv, choose View File (Figure 3)\n\n\n\n\n\n\n\nFigure 3: The twoWeekWeatherData.csv file opened in RStudio\n\n\n\n \nThe CSV file has 15 lines (rows).  The first row contains the 5 column headers and the other 14 rows contain the 5 values for each date – all separated by a comma.\n\n\n4.2 Reading in a CSV file\nWe can see that the CSV file has a header row and each row has five values representing: date, highTemp, lowTemp, precipitation, noonCondition.\n \nTo use the data in a script we need to read the data into a script file – and for that we will use the read.csv() function.\n# Get the data from the twoWeekWeatherData CSV file\nweatherData = «read.csv»(file=\"data/twoWeekWeatherData.csv\", \n                       sep=\",\",\n                       header=TRUE);\nread.csv() reads in the data from the CSV file – and saves the data to a variable called weatherData.\n \nweatherData is a data frame variable and it appears in the Environment tab under Data as 14 obs. of 5 variables. (i.e., 14 rows and 5 columns), which matches what we saw in the CSV file (Figure 3). \n\nDouble-clicking on weatherData opens the data frame in the File Viewer window.  This is a convenient way to visualize the data frame.\nClicking on the blue arrow to the left of weatherData provides information about each of the columns\n\n\n\n\n\n\n\nFigure 4: Viewing the data frame in the File Viewer\n\n\n\n\n\n4.3 Column value type\nIn the Environment, when you click on the arrow next to the left of weatherData (Figure 2) you see some information about the columns in the data frame. The first piece of information is the name of the column (i.e., the header – date, highTemp, etc.).  The second is the type of value the column contains.\n \nIn weatherData there are three types of values:\n\nint (e.g., highTemp and lowTemp): integer – or non-decimal numbers\nnum (e.g., precipitation): numeric, or numbers with decimals\nchr: (e.g, noonCoondition) this stands for character, and character is really short for string of characters, and this in turn is typically shortened to string.  Whatever you call it, it is the catch-all category for values R cannot recognize as anything else. \n\n \nNote: the date column has date values but it is not formatted properly so R does not recognize it as a Date – something we will cover much later.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#functions-and-arguments",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#functions-and-arguments",
    "title": "1-04: Vectors and Data Frames",
    "section": "5 Functions and arguments",
    "text": "5 Functions and arguments\nread.csv() is a function that tells R to open a file and treat it like a CSV file. A function is a set of code separate from your main script that performs a common task (e.g., plotting values, finding a standard deviation, reading in a file).\n \nThere is a lot going on in our first line of code and that is because there are a lot of options, called arguments, when opening up a CSV file!  We will talk a little bit about these arguments here and save the rest of the discussion for the next lesson.\n \nInside the function read.csv(), I included three arguments (file, sep, and header).  Arguments are like the knobs and dials for a function.  The function reads a CSV file and the arguments tweak how the CSV file is read.\n\n5.1 file\nfile = “data/twoWeekWeatherData.csv” means that the script opens the file called twoWeekWeatherData.csv located in the data folder of your RStudio Project\n \nThis only works if you are in the RStudio Project because the RStudio Project sets the Working Directory to your Project Folder.\n \nIf you execute the script file outside your RStudio Project (Figure 5), you will get a cannot open file error in the Console because the script does not know to find the CSV file.\n\n\n\n\n\n\nFigure 5: You get a cannot open file error if you try to execute the script outside of your RStudio Project\n\n\n\n\n\n5.2 sep\nsep = “,” means that the values in the file are separated by commas.  This is not always true – even for CSV files.\n \nThe most common alternate separator values are spaces ( sep = ” “ ) and dots ( sep = “.” )\n\n\n5.3 header\nheader = TRUE means the first row contains header information. In this case the header information is the column names (date, highTemp, lowTemp, and precipitation)\n \nheader = FALSE would mean that the first row contains data (i.e., there are no column names).  If you set header=FALSE in this example then R will think that the column names are the first data point.  So, you will have 15 values in each vector and the first value will not make sense.\n\n\n5.4 Default values for arguments\nBy default, read.csv() assumes sep=“,” and header=TRUE. For the data in this example, sep and header are not needed and this code would work:\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\");\nBut I like to keep sep and header in my code because you often do need to change them (e.g., you have data without a header or spaces between values instead of commas) and it is easier to deal with if you already have sep and header when copying code from one script to another.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#getting-data",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#getting-data",
    "title": "1-04: Vectors and Data Frames",
    "section": "6 Getting data",
    "text": "6 Getting data\nWe now have a data frame with weather information stored in a variable called weatherData.  But, we usually do not want to deal with the whole data frame at once.  So, our next trick will be to extract parts of the data from the data frame.  We might want to work with one column in the data frame (e.g., highTemp or precipitation).  We can see all the columns in the data frame by expanding the data frame in the Environment or looking at the headers in the File Viewer (both views are in Figure 4). \n\n6.1 Pulling out a column\nColumns in a data frame are vectors (i.e., a variable with multiple values) and we can save the columns to a vector.  We can access the columns from a data frame using the $ operator.\n \nWe start with weatherData and, use the dollar sign operator ( $ ) to access the highTemp column, and save the results to the vector called highTemps:\nhighTemps = weatherData$highTemp;\nIn the Environment square brackets ([ ] ) indicates the variable is a vector.  highTemps appears in the Environment as a vector.  highTemps has 14 ( [1:14] ) integer (int) values, representing the temperature for each of the 14 days. \n\n\n\n\n\n\nFigure 6: The highTemps vector variable in the Environment tab\n\n\n\n\n\n6.2 Pulling out (subsetting) individual values\nPerhaps we want just one value – specifically, we want to know the high temperature on April 2 (the seventh day in weatherData).\n \nThere are multiple ways to access that individual value.  I will present three, but for the rest of this lesson, we are going to use the first method.\n \nWe could subset using the subset operator ( [ ] ) the 7th value from highTemps:\nhighTempDay7a = highTemps[7];\nWe could go back to the original data frame (weatherData) and subset the 7th value from the column highTemp:\nhighTempDay7b = weatherData$highTemp[7];\nOr, we can use a row/column (e.g., X/Y) operation on weatherData to get the value:\nhighTempDay7c = weatherData[7, \"highTemp\"];  # think of this as [X,Y] notation\nThe last method is functionally the same as the previous two – but the X,Y notation is the most robust as it can best handle more complex subsetting situations (e.g., subsetting multiple rows and columns), which will be discussed in a future lesson.\n\n\n6.3 The Environment and the L value\nI will be referring quite often to the Environment tab as it looks after the script has been sourced (as in Figure 6) .  Instead of taking a screenshot of the Environment tab (which is hard to maintain), I will display the variables I am focused on like this:\nhighTemp7a:  60L\nhighTemp7b:  60L\nhighTemp7c:  60L\nThe Environment tab shows that highTemp7a, highTemp7b, and highTemp7c are all equal to 60L\n \nThe L indicates that the number is explicitly an integer, not just a numeric values that happens to have all zeros in its decimal.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#pulling-out-multiple-values",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#pulling-out-multiple-values",
    "title": "1-04: Vectors and Data Frames",
    "section": "7 Pulling out multiple values",
    "text": "7 Pulling out multiple values\nWe have pulled out a column from a data frame and we have pulled out individual values.  In this section, we will show different ways to pull out multiple values with:\n\nAn index vector created using c()\nA regular (or, simple) sequence using the colon ( : ) operator\nA more complex sequence using the seq() function\n\n\n7.1 Using a numeric vector to pull multiple values\nhighTemps is a vector with 14 values and each of these values can be accessed by their numeric placement:\nval_01 = highTemps[1];\nval_05 = highTemps[5];\nval_12 = highTemps[12];\nOr, we might want to combine the temperatures from these three days into one variable.  c() creates a vector of the three values (1, 5, and 12) and that vector is used to subset highTemps:\nvalComb = highTemps[c(1,5,12)];  # a vector with 3 values\nvalComb is a vector with 3 values, the high temperature for days 1, 5, and 12:\n\n\n\nval_01:    57L\nval_05:    39L\nval_12:    54L\nvalComb:   int [1:3] 57 39 54\n\n\nFigure 7: The three values we pulled from highTemps individually saved and combined (valComb)\n\n\n\n\n\n7.2 Pulling out consecutive values\nIf we want to get the high temperature for consecutive days, we can use the simple sequencing ( : ) operator – simple refers to the fact that we are sequencing by 1:\nconsecVals = highTemps[3:11];  # same as highTemps[c(3,4,5,6,7,8,9,10,11)]\nconsecVals is a vector with 9 values – the high temperatures from days 3 through 11.  Note: 9 values, not 8 – we include both the 3 and the 11.\n \nThe ( : ) operator also works in reverse\nconsecValsRev = highTemps[11:3];\nconsecValsRev is a vector with 9 values – the high temperatures from days 11 down to 3.\n\n\n\nconsecVals:     int [1:9] 54 40 39 ...\nconsecValsRev:  int [1:9] 39 44 55 ...\n\n\nFigure 8: int [1:9] means 9 values are in each vector – the first few values are shown\n\n\n\n\n\n7.3 Using the Console to view values in a vector\nThe Environment tab is good for quickly looking at values, but it only shows a few values from each vector.  If you want to see all the values then you can use the Console tab (bottom-left corner).  In the Console tab, type in the variable you want to see and press Enter:\n\n\n\n\n\n\nFigure 9: Using the Console tab to view variables\n\n\n\n \nThese two values, consecVals and consecValRev, are shown in the Console window in Figure 9. In the future I will present the Console like this:\n&gt; consecVals \n[1] 54 40 39 58 60 53 55 44 39 \n&gt; consecValsRev \n[1] 39 44 55 53 60 58 39 40 54\n\n\n7.4 Using a sequence to get values\nWe can use the seq() to create a more complex sequence to subset a vector.\n \nThis is a two step process:\n\nCreate a sequence. \nUse the sequence to subset the vector. \n\n\n7.4.1 Creating a sequence\nseq() is a function with three arguments:\n\nfrom: the starting point\nto: the ending point\nby: the iteration\n\n \nWe can create a sequence that lists every other number from 1-14\nseq1 = seq(from=1, to=14, by=2);\nWe can reverse the sequence by switching the to and from and inverting the by\nseq2 = seq(from=14, to=1, by=-2);\nWe can get every 3rd number for the first 10 numbers:\nseq3 = seq(from=1, to=10, by=3);\nThe 3 sequences we created are just vectors of numbers:\nseq1:   1 3 5 7 9 11 13\nseq2:   14 12 10 8 6 4 2\nseq3:   1 4 7 10\n\n\n7.4.2 Using the sequences as indexes\nWe can use the 3 sequences above as index vectors to index the highTemps vector:\n \nGet every other high temperature:\nhighTempSeq1 = highTemps[seq1];\nGet every other high temperature in reverse:\nhighTempSeq2 = highTemps[seq2];\nGet every 3rd high temperature value in the first 10 values:\nhighTempSeq3 = highTemps[seq3];\n\n\n\nhighTempSeq1:  int [1:7] 57 54 39 60 ...\nhighTempSeq2:  int [1:7] 75 54 44 53 ...\nhighTempSeq3:  int [1:4] 57 40 60 44\n\n\nFigure 10: There are 7 values in the first two sequences and 4 in the third\n\n\n\n\n\n7.4.3 Combining the above 2 steps\nYou can combine the above two steps in 1 command.\n \nThe following command will give you the same high temperature values:\nhighTempSeq1b = highTemps[seq(from=1, to=14, by=2)];  \nhighTempSeq2b = highTemps[seq(from=14, to=1, by=-2)];  \nhighTempSeq3b = highTemps[seq(from=1, to=10, by=3)];\nExtension: Square brackets [ ] vs. Round Brackets ( )\n\n\n7.4.4 Note about combining steps in R\nWhile it might seem like combining steps is a good idea because it reduces the amount of code, this needs to be balanced with the fact that combining code usually makes it harder to read.  One of the big problems I see when looking at people’s code is that they cram too much code into one command and it becomes really difficult to debug if anything goes wrong.  If you are going to err on one side then this author recommends you err on the side of breaking up code rather than combining it.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#application",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#application",
    "title": "1-04: Vectors and Data Frames",
    "section": "8 Application",
    "text": "8 Application\nA) Create a file named app1-04.r in your scripts folder inside your RStudio Project and save the information from twoWeekWeatherData.csv to a variable named weatherData (just like in this lesson).\n \nB) Sequencing\nUse the seq() function to create this sequence: (13, 9, 5, 1, -3, -7). \nNote: this sequence could not be used to index a vector because it mixes positive and negative numbers. \n\nC) Subsetting:\n\nPull out two columns precipitation and lowTemp from weatherData and save each to a variable\nSave the 4th value of precipitation to a variable\n\nRepeat the previous step for the other two methods given in Section 6.2\n\nSave the 9th, 12th, 5th, and 1st values of lowTemp to one variable (in that order)\nCreate a variable that holds the precipitation for the last 5 days (of the 14 days).\nCreate a variable that holds the lowTemp for the days 12 down to 6.\nCreate a variable that holds the first 3 days and last 3 days of precipitation\n\n \nD) Negative subsetting:\nSubset precipitation using the sequence c(-1,-3,-5). Explain in comments what happened.\n \nE) Vector Math:\n\nConvert the precipitation column from inches to centimeters (2.54cm = 1in).\n\n \nF) Opening Data Frames:\n\nSave the file DowJones1980_2012.csv to the data folder in your RStudio Project\n\nTo save: right-click on link and choose Save link as…\n\nUsing read.csv(), save the data in DowJones1980_2012.csv to a data frame named dowJonesData\n\n there is no header in this file and the separator is a space\n\nPlot the data using the line: plot(dowJonesData$V2)\n\nIf you opened the file correctly the plot will be in the Plots tab and look like this:\n\n\n\n\n\n\nFigure 11: Plot of the Dow Jones data\n\n\n\n\n\n \n \nSave the script as app1-04.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#trap-opening-csv-files-in-excel",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#trap-opening-csv-files-in-excel",
    "title": "1-04: Vectors and Data Frames",
    "section": "9 Trap: Opening CSV files in Excel",
    "text": "9 Trap: Opening CSV files in Excel\nIf you have Excel on your computer, then it is probable that Excel is the default program for opening CSV files.  This means double-clicking on a CSV file will open it in Excel.  The danger with opening CSV files in Excel is that Excel will sometimes reformat the data (especially date and money columns) and then give a message saying how the data needs to be saved to be preserved.  Do not save the file – it will change the format of your data.  If you are editing a CSV file in Excel then I would save the results to a test file first to make sure Excel did not do anything untoward.\n\n\n\n\n\n\nFigure 12: Opening a CSV file in Excel – the possible data loss warning is not something you want to heed",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#extension-long-and-short-integers",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#extension-long-and-short-integers",
    "title": "1-04: Vectors and Data Frames",
    "section": "10 Extension: Long and Short Integers",
    "text": "10 Extension: Long and Short Integers\nL stands for Long integer – long meaning that this variable can hold a number larger than 256.  In the old days, when space on computers was VERY expensive, programmers would save space by having a short integer and long integer designation.  So, if a programmer knew a number was small, they would assign it to a short integer to take up less space on the computer.  Since temperatures in Lansing are generally going to be less than 256 (unless you are using the Kelvin system), it is safe to assign temperatures to short integers.\n \nNowadays, space is so cheap that we rarely care that we are using a tiny bit more memory than we need – so L has become mostly a relic of the past.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#extension-statistical-functions-on-vectors",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#extension-statistical-functions-on-vectors",
    "title": "1-04: Vectors and Data Frames",
    "section": "11 Extension: Statistical functions on vectors",
    "text": "11 Extension: Statistical functions on vectors\nOne huge advantage to using vectors is that most statistical function take vectors.  So, you can easily perform statistical functions on a vector:\ntempHigh = c(65, 57, 61, 64, 59);\n\ntempMean = mean(tempHigh);\ntempSD = sd(tempHigh);\ntempVar = var(tempHigh);\ntempMean:   61.2\ntempSD:     3.346...\ntempVar:    11.2\nWe will be doing more with this in later lessons…",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-04_Vectors_And_Data_Frames.html#extension-square-brackets-vs.-round-brackets",
    "href": "lessons/1-04_Vectors_And_Data_Frames.html#extension-square-brackets-vs.-round-brackets",
    "title": "1-04: Vectors and Data Frames",
    "section": "12 Extension: Square brackets [ ] vs. Round Brackets ( )",
    "text": "12 Extension: Square brackets [ ] vs. Round Brackets ( )\nSquare brackets are used when you are subsetting or indexing a variable.\nRound brackets are used when you are calling a function and contain the arguments for that function.\n… and the two types of brackets are often used in the same command\nlowTemps [seq(from=12, to=2, by=-2)]\nsays you are going to subset lowTemps using the function seq(). \n&gt; lowTemps [seq(from=12, to=2, by=-2)]\n[1] 43 40 50 45 38 43\nseq() is a function and produces a vector of numbers:\n&gt; seq(from=12, to=2, by=-2)\n[1] 12 10 8 6 4 2\nc() is also a function – c stands, unintuitively, for concatenate and will also produce a vector of numbers:\n&gt; c(12,10,8,6,4,2)\n[1] 12 10 8 6 4 2\nlowTemps [c(12,10,8,6,4,2)] and lowTemps [seq(from=12, to=2, by=-2)] produce the same results.\n \nYou can also subset lowTemps without calling a function:\n&gt; lowTemps[5]\n[1] 36\n&gt; lowTemps[4:8]\n[1] 38 36 45 32 50\nTechnically, 4:8 still calls the sequence seq(from=4, to=8, by=1) in the background – but that is really getting into the weeds!\n \nread.csv(), ggplot(), plot(), rm() are all functions.  There will be a lot more about functions in this class starting with next lesson.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-04: Vectors and Data Frames"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html",
    "href": "lessons/1-06_Run_and_Source.html",
    "title": "1-06: Run and Source",
    "section": "",
    "text": "add/remove other things to set in RStudio like matching parentheses (or keep to 1st lesson)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#purpose",
    "href": "lessons/1-06_Run_and_Source.html#purpose",
    "title": "1-06: Run and Source",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nlook at some of the features of R and RStudio\nexplore the differences between Run and Source\n\n\n1.1 Files for the lesson\nThe script for the lesson is here\nThe data for this lesson is here\n \nIn this lesson we will focus more on features in R and RStudio.  In the next lesson we will talk more about the content of the script.\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#output-to-console",
    "href": "lessons/1-06_Run_and_Source.html#output-to-console",
    "title": "1-06: Run and Source",
    "section": "2 Output to console",
    "text": "2 Output to console\nIn the next couple of lesson we are going to make extensive use of the Console tab, which can be used to execute code and as output for your script file.  Like the Environment tab, it is difficult to maintain images so I will use text instead.\n \nFor example:\n\nopen the script for this lesson in your RStudio Project\nclick on line 4 (i.e., put the cursor on line 4)\nclick Run\n\n \nThe RStudio window looks like this:\n\n\n\n\n\n\nFigure 1: Output to the Console tab after executing line 6\n\n\n\n \nInstead of displying the RStudio image, I will display the output to the Console tab like this:\n\n\n\n«&gt;»   ### Output a text message\n«&gt;»   cat(\"Hello\"); \nHello\n\n\nFigure 2: Output to the Console tab after executing line 4",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#run-vs.-source",
    "href": "lessons/1-06_Run_and_Source.html#run-vs.-source",
    "title": "1-06: Run and Source",
    "section": "3 Run vs. Source",
    "text": "3 Run vs. Source\nThe Source button is used to execute the whole script (i.e., every command in the script) while the Run button is used to selectively execute commands.  Run is a great tool for debugging and testing your code and we are going to almost exclusively use Run for the next two lessons.\n \nThe next two lessons are more about showing off features in R and RStudio and not about creating a full script.  However, your goal with most scripts is to be able to execute the file using Source.  It takes longer to develop you script using Source but it forces you to automate your script which makes your script both easier to debug and share.\n\n3.1 Executing one line\nWe already have an example of using Run to execute one line in Figure 2.  When we put the cursor on line 4 and clicked Run, R executed the cat() command on line 4.  We will talk much more about cat() next lesson but cat() outputs to the Console whatever is in the parentheses.\n \nActually, clicking Run does not just execute the line, but everything associate with the command on the line.  When you look at the Console output, you see that lines 3 and 4 were both executed – but line 3 was just a comment line so it does not do anything.\n\n\n\n&gt;   ### Output a text message  \n&gt;   cat(\"Hello\");             \nHello                          \n\n\nFigure 3: Lines in Console that start with a ( &gt; ) are command lines\n\n\n\n\n\n3.2 Executing multiple commands on one line\nYou can put as many command as you want on one line as long as use semicolons between them.\n \nThe following line has three commands that\n\ncreate two variables (a and b)\noutput the addition of them to the Console. \n\na=3; b=7; cat(\"a+b=\", a+b);\nClicking Run on the line will add a and b to the Environment:\na:   3\nb:   7\nAnd the addition of a and b is displayed in the Console:\n&gt;   ### Multiple commands on one line\n&gt;   a=3; b=7; cat(\"a+b=\", a+b);\na+b= 10\nIf you remove the semicolons then you will get the error: unexpected symbol in ”  a=3 b”\nBasically, R is saying the it does not understand what the symbol b means because R thinks that b is a continuation of the a=3 command.\n\n\n3.3 Executing highlighted script\nYou can also highlight parts of your script and Run will executed exactly what is highlighted.\n \nIf you completely highlight lines 10, 11, and 12:\n  cat(\"Hello, World.\\n\");\n  cat(\"How are you?\\n\");\n  cat(\"I am fine?\\n\");\nand click Run, the output to the Console is:\n\n\n\n&gt;   cat(\"Hello, World.\\n\");\nHello, World.\n&gt;   cat(\"How are you?\\n\");\nHow are you?\n&gt;   cat(\"I am fine?\\n\");\nI am fine?\n\n\nFigure 4: Three commands sent to Console by clicking Run\n\n\n\nWhen you highlight code and click Run, Run will execute exactly what you highlight.  So, if you accidentally highlight a bit of line 9 along with lines 10-12:\n  ### Outputting multiple text messages «(\\n means go to next line)»\n  «cat(\"Hello, World.\\n\");»\n  «cat(\"How are you?\\n\");»\n  «cat(\"I am fine?\\n\");»\nThen in the Console you will get the error:\n&gt; (\\n means go to next line)\nError: unexpected symbol in \"(\\n\"\nR is trying to execute the last part of line 9 and R does not know that this is supposed to be part of a comment because you did not highlight the ### part of the line.\n \nTo recap, when you click Run and…:\n\n…the cursor is in a line: R will execute all commands on that line.\n…part of your code is highlighted: R will execute exactly what is highlighted\n\n\n\n3.4 Executing one command on multiple lines\nLines 15-17 contain the command to open the twoWeekWeatherData.csv file and save the data to a data frame named weatherData.\n  ### read in data from  twoWeekWeatherData.csv\n  weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                         sep=\",\",\n                         header=TRUE);\nIf we put the cursor on any line from 15-17 and click Run, R will execute all 3 lines.  When you click Run, R will execute whatever command the cursor is in the middle of.  In this case, the command starts on line 15 with weatherData = and ends on line 17 with header=TRUE);.\n \nWhen we Run line 15, the Console output shows lines 14-17 (14 is a comment) were executed – the ( + ) at the beginning of the lines in the Console says that this line is a continuation of the command from the previous line.\n\n\n\n&gt;   ### read in data from  twoWeekWeatherData.csv\n&gt;   weatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n«+»                         sep=\",\",\n«+»                          header=TRUE);\n\n\nFigure 5: Console output when executing the multi-line command to open the csv file\n\n\n\nExecuting lines 14-17 means that you have a new variable named weatherData and this variable is put in the Environment tab:\n\n\n\nweatherData   14 obs. of 5 variables\n\n\nFigure 6: The Environment tab after the read.csv() command was executed",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#entering-commands-directly-into-console",
    "href": "lessons/1-06_Run_and_Source.html#entering-commands-directly-into-console",
    "title": "1-06: Run and Source",
    "section": "4 Entering commands directly into Console",
    "text": "4 Entering commands directly into Console\nWhen you click Run you are sending commands to the Console, but you can directly type commands in the Console – and it will produce the same results.\n \nSo, if you type cat(“Hello”) into the Console you will get:\n&gt; cat(\"Hello\")\nHello\nA common issue for people using the Console is that they will not complete commands.  For example, type cat(“He in the Console and press enter:\n&gt; cat(\"He\n+\nA ( + ) appears on the next line.  The ( + ) means that R sees the beginning of an unfinished command and is waiting for you to finish it. This will also happen if you highlight only part of a command in the script and press Run.  You can finish it by typing llo”) in the Console but the results will still be a bit off:\n&gt; cat(\"He\n+llo\")\nHe\nllo\nIf you see a ( + ) in the Console and have no idea what to do, you can press the esc key to get out of it.\n\n4.1 Quick view of variables\nAnother use for the Console is to quickly view some value.  If you want to see the highTemp column in weatherData you can type in the Console:\n&gt; weatherData$highTemp\n [1] 57 50 54 40 39 58 60 53 55 44 39 54 61 75\nNote: after you type $ in weatherData$, RStudio will start offering you column suggestions – a very conveinent feature when you have large dataframes.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#duplicating-lines-of-code",
    "href": "lessons/1-06_Run_and_Source.html#duplicating-lines-of-code",
    "title": "1-06: Run and Source",
    "section": "5 Duplicating lines of code",
    "text": "5 Duplicating lines of code\nQuite often in programming, you are producing multiple lines that are very similar.  For instance, you might have multiple lines that start with a cat() command.  In RStudio you can duplicate a line by putting your cursor on the line and clicking Control-Shift-D (Windows) or Command-Shift-D (Mac).\n \nIf you click Control/Command-Shift-D on line 12, you will get:\n\n\n\n  ### Outputting multiple text messages\n  cat(\"Hello, World.\");\n  cat(\"How are you?\");\n  cat(\"I am fine?\"); \n  «cat(\"I am fine?\");»\n\n\nFigure 7: Duplicating a line in RStudio using Control/Command-Shift-D\n\n\n\nIf you highlight text within your script and click Control/Command-Shift-D, then the highlighted text will be duplicated.  In this case, I highlighted the first Hello, World. and then clicked Control/Command-Shift-D:\n\n\n\n  ### Outputting multiple text messages\n  cat(\"Hello, World.«Hello, World.»\");\n  cat(\"How are you?\");\n  cat(\"I am fine?\"); \n\n\nFigure 8: Duplicating highlighted text in RStudio.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#block-comments",
    "href": "lessons/1-06_Run_and_Source.html#block-comments",
    "title": "1-06: Run and Source",
    "section": "6 Block Comments",
    "text": "6 Block Comments\nOften when you are testing code you want to comment lines so they do not execute.  In RStudio you can comment a bunch of lines at once by highlighting the lines you want commented and clicking Control-Shift-C on Windows and Command-Shift-C on a Mac.\n \nIf you highlight lines 11-14 and press Control/Command-Shift-C, a ( #) will appear at the beginning of each line:\n\n\n\n«#» ### Outputting multiple text messages\n«#» cat(\"Hello, World\");\n«#» cat(\"How are you?\");\n«#» cat(\"I am fine?\");\n\n\nFigure 9: Commenting multiple line by using Control/Command-Shift-C\n\n\n\nNote: A ( # ) is added to all highlighted lines – even those that were already commented like line 11\n\n6.1 Uncommenting a block\nIf all the lines highlighted already have a ( # ) then pressing Control/Command-Shift-C will uncomment all the lines (i.e., remove a #).  Uncommenting only removed the first # – so if you uncomment the lines from Figure 9, then the lines will revert back to:\n\n\n\n### Outputting multiple text messages\ncat(\"Hello, World\");\ncat(\"How are you?\");\ncat(\"I am fine?\");\n\n\nFigure 10: Uncommenting lines – only 1 # is removed so the first line is still commented",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#keyboard-shortcuts-in-rstudio",
    "href": "lessons/1-06_Run_and_Source.html#keyboard-shortcuts-in-rstudio",
    "title": "1-06: Run and Source",
    "section": "7 Keyboard shortcuts in RStudio",
    "text": "7 Keyboard shortcuts in RStudio\nControl/Command-Shift-C and Control/Command-Shift-D are the RStudio shortcuts I find the most useful. You can view all the keyboard shortcuts (and there are a lot) in RStudio by clicking Tools -&gt; Keyboard Shortcuts Help.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#breaking-up-long-lines-of-code",
    "href": "lessons/1-06_Run_and_Source.html#breaking-up-long-lines-of-code",
    "title": "1-06: Run and Source",
    "section": "8 Breaking up long lines of code",
    "text": "8 Breaking up long lines of code\nLine 15-17 is one command stretched over multiple lines:\nJust like a period ends a sentence,a semicolon designates the end of a statement.  In this case, the read.csv() statement is three lines long so the semicolon goes at the end of the third line.  As a reminder, R does not enforce semicolon usage, but it is a good idea to put them in.\n \nWe could put the whole command on one line and it would execute exactly the same:\n  ### same command as above -- this is a little harder to read\n  weatherData2 = read.csv(file=\"data/twoWeekWeatherData.csv\", sep=\",\", header=TRUE); \nweatherData2 appears in the Environment alongside weatherData, and it is exactly the same as weatherData:\nweatherData     14 obs. of 5 variables\nweatherData2    14 obs. of 5 variables\nBut, it is easier to read the multiple-line code.  As a general rule,you should try to avoid horizontal scrolling of your script (anything beyond 85 characters) as this makes the script much harder to read.\n \nIn R, you can break most lines of code into multiple lines with a few exceptions (one exception being long file-paths). You just need to be judicious about how you break up the line – the best places to break up a line of code are after a comma or where a space occurs.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#putting-margin-lines-in-your-script",
    "href": "lessons/1-06_Run_and_Source.html#putting-margin-lines-in-your-script",
    "title": "1-06: Run and Source",
    "section": "9 Putting margin lines in your script",
    "text": "9 Putting margin lines in your script\nThe generally accepted standard in R for the maximum number of characters in a line of code is 80.  This is not a hard-and-fast rule, but keeping your lines 85 characters or less makes it a lot easier to read your code especially on smaller monitors (e.g., laptops).  You can put a margin line at 85 characters in RStudio by clicking Tools -&gt; Global Options -&gt; Code. On the Display tab check Show margin and set Margin column to 85. One of the requirements of this class is that, when possible, you keep your script lines to 85 characters or less.\n\n\n\n\n\n\nFigure 11: setting a reminder line margin in RStudio\n\n\n\nNow you will see a grey vertical line at 85 characters (Figure 12) . The line is there as a guide – you can still type beyond this line. There are times when it is not possible to keep a line to 85 characters – the most common reason is a long file-path name because file-path names cannot be broken up.\n\n\n\n\n\n\nFigure 12: The grey line acts as a margin guide.\n\n\n\nNote: You can also see the cursor’s character position is on in the lower-left corner of Figure 12 – in this case, line 9, character 85.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-06_Run_and_Source.html#application",
    "href": "lessons/1-06_Run_and_Source.html#application",
    "title": "1-06: Run and Source",
    "section": "10 Application",
    "text": "10 Application\n\nHighlight lines 15 and 16 in the lesson script and click Run.  In comments explain what happens and why.\nHighlight lines 16 and 17 in the lesson script and click Run.  In comments explain what happens and why.\nCombine the lines 10, 11, and 12 into one line – don’t change the cat() commands.\nIn comments answer the following questions:\n\nHow many commands are there in the script file for this lesson?\nAssuming there is no limit for line length (i.e., you can go as far beyond 85 characters as you want): If you rewrote the script, what is the minimum number of lines you would need to execute every command?\n\n\n \nSave the script as app1-06.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-06: Run and Source"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html",
    "href": "lessons/1-08_Conditional_Operations.html",
    "title": "1-08: Conditional Operations",
    "section": "",
    "text": "figure out how to merge cells in tables",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#purpose",
    "href": "lessons/1-08_Conditional_Operations.html#purpose",
    "title": "1-08: Conditional Operations",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreating “decision points” in a script using if-statements\nIntroduce the six different conditional operators\nCode conditional statements on strings and numbers",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#material",
    "href": "lessons/1-08_Conditional_Operations.html#material",
    "title": "1-08: Conditional Operations",
    "section": "2 Material",
    "text": "2 Material\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#four-structures-in-programming",
    "href": "lessons/1-08_Conditional_Operations.html#four-structures-in-programming",
    "title": "1-08: Conditional Operations",
    "section": "3 Four structures in programming",
    "text": "3 Four structures in programming\nAs mentioned in the second lesson on variables, there are basically 4 main structures that cover almost every aspect of programming:\n\nVariables\nIf-Else Statements\nFor Loops\nFunctions\n\n \nIn the next two lessons we cover If-Else statements",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#non-linear-scripts",
    "href": "lessons/1-08_Conditional_Operations.html#non-linear-scripts",
    "title": "1-08: Conditional Operations",
    "section": "4 Non-linear scripts",
    "text": "4 Non-linear scripts\nSo far all of our scripts have been linear – in other words, the execution of the script goes line-by-line, or command-by-command, until the end of the script.  However, most scripts do not work like this – most scripts have multiple points where the execution of code is:\n\nmoved to another location (i.e., functions – future lesson)\ndone multiple times (i.e., for loops – future lesson)\ndependent on some condition (i.e., if-else statements – this lesson)\n\n \nAnd you will often find combinations of the above.  When dealing with data frames, if-else statements are often found within for loops.  For example, a for loop goes through every value in a temperature column and an embedded if-else statement executes code if the temperature is above a certain amount.\n \nFor the next couple of lessons we are just going to focus on if-else statements.  After that, we will introduce for loops with embedded if-else statements.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#questions-and-statements",
    "href": "lessons/1-08_Conditional_Operations.html#questions-and-statements",
    "title": "1-08: Conditional Operations",
    "section": "5 Questions and Statements",
    "text": "5 Questions and Statements\nThe if() statement can almost be thought of as a question with a yes/no answer:\n\nIs the fish’s weight below 100 grams?  (yes/no)\nIs the first runner’s speed greater than the second runner’s speed? (yes/no)\nIs the location Silver Lake? (yes/no)\nIs the temperature less than or equal to 30? (yes/no)\n\n \nExcept, instead of questions with yes/no answer, if() contains statements with TRUE/FALSE conditions:\n\nThe fish’s weight is below 100 grams. (TRUE/FALSE)\nThe first runner’s speed is greater than the second runner’s speed. (TRUE/FALSE)\nThe location is Silver Lake. (TRUE/FALSE)\nThe temperature is less than or equal to 30. (TRUE/FALSE)\n\n\n5.1 Structure of an if() statement\nThe basic structure of an if() statement is:\n\n\n\nif (some conditional statement is TRUE)\n{ \n   # Execute the code in this codeblock\n   # if the conditional statement is TRUE.\n   # note: All command within the codeblock are indented\n}\n# next lesson we will cover what happens if the conditional statement is FALSE.\n\n\nFigure 1: Structure of an if() statement\n\n\n\nInside the curly brackets ( {  } ) attached to the if() is a codeblock, or a series of commands, that gets executed if the statement is TRUE.  If the statement is FALSE, the codeblock is skipped.\n \nLet’s do a simple example where a random number is picked and an if() statement checks the random number:\n\n\n\nrandomTemp = sample(30:80, size=1);  # pick a random number between 30 and 80\n\nif (randomTemp &gt; 50)  # if randomTemp is greater than 50...\n{ \n  # ...execute the commands in this codeblock\n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\n# next lesson we will cover what happens if the conditional statement is FALSE.\n\n\nFigure 2: An example of an if() statement\n\n\n\n\n\n5.2 Alternate codeblock format\nThe curly brackets ( {  } ) designate the beginning and the end of the codeblock.  There are many ways to space the curly brackets but only two methods that are generally accepted in the programming world:\n\nFigure 2 where the curly brackets are on their own line and lined up at the same level as the if() and all code inside is indented\nFigure 3 where the start bracket is on the same line as the if() statement – everything else is the same as the first example\n\n\n\n\nif (randomTemp &gt; 50)  { # if randomTemp is greater than 50...\n  # ...execute the commands in this codeblock\n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\n# next lesson we will cover what happens if the conditional statement is FALSE.\n\n\nFigure 3: Alternate structure of an if() statement\n\n\n\nI prefer the first method because it makes it easier for me to visualize the hierarchy of the codeblocks and easier to comment. You are required to use one of these two methods in this class.\n \nExtension: Curly bracket placement",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#if-statements",
    "href": "lessons/1-08_Conditional_Operations.html#if-statements",
    "title": "1-08: Conditional Operations",
    "section": "6 If() statements",
    "text": "6 If() statements\nThe conditional statement inside the parentheses of the if() contains at least two values being compared with a conditional operation:\nif( fishWeight «&lt;» 100 )                # is greater than\nif( runner1Speed «&gt;» runner2Speed)      # is less than\nif( location «==» \"Silver Lake\" )       # is equal to\nif( temperature «&lt;=» 30 )               # is less than or equal to\nA conditional operator does two things:\n1) It compares the two values on both sides of the operator. \n2) It outputs either TRUE or FALSE based on results of the comparison.\nNote: TRUE/ FALSE statements are often called Boolean statements\n\n6.1 Conditional Operators in R\nThere are six conditional operators in programming:\n\n\n\n\n\n\n\nOperator\nMeaning\n\n\n\n\n==\nequal to\n(easily confused with the assignment operator, =)\n\n\n!=\nnot equal to\n(reverses the logic of ==)\n\n\n&gt;=\ngreater than or equal to\n\n\n&lt;=\nless than or equal to\n\n\n&gt;\ngreater then (only)\n\n\n&lt;\nless than (only)\n\n\n\nNote: &gt;=, &lt;=, &gt;, and &lt; operators are usually used to compare two numeric values. However they can be used to compare string values.\nExtension: Greater than and less than on strings\n\n\n6.2 Set up conditional operators\nThe following if statements all compare two values using a conditional operator:\nif( fishWeight «&lt;» 100 )\n{\n  # code that gets executed if fishWeight &lt; 100\n}\nif( runner1Speed «&gt;» runner2Speed )\n{\n  # code that gets executed if runner1Speed &gt; runner2Speed\n}\nif( location «==» \"Silver Lake\" )\n{\n  # code that gets executed if location == \"Silver Lake\"\n}\nif( temperature «&lt;=» 30)\n{\n  # code that gets executed if temperature &lt;= 30\n}\nNote: A single Conditional Operators compares two values (e.g., location == “Silver Lake”).  In a future lesson, we will learn how to deal with more complex conditions (e.g., how to check if location is “Silver Lake” or “Round Lake”).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#using-if-statements",
    "href": "lessons/1-08_Conditional_Operations.html#using-if-statements",
    "title": "1-08: Conditional Operations",
    "section": "7 Using if() statements",
    "text": "7 Using if() statements\nTo set up the script to use if() statements we will:\n\nread in the data from twoWeekWeatherData.csv\nsave the highTemp and noonCondition columns to vectors\n\n### read in data from twoWeekWeatherData.csv\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\", \n                       sep=\",\",\n                       header=TRUE, \n                       stringsAsFactors = FALSE);  \n  \n### Extract the highTemps column from the data frame -- save it to a variable\nhighTemps = weatherData$highTemp;\nnoonCond = weatherData$noonCondition;\nOur first example will check three value in highTemps (3rd, 4th, and 5th) and see which of them are greater than 50. \ncat(\"---------\\nChecking highTemps 3, 4, and 5 to see which are &gt; 50:\\n\");\n\nif(highTemps[3] &gt; 50)\n{\n  cat(\"  high temp 3 is greater than 50\\n\");\n}\nif(highTemps[4] &gt; 50)\n{\n  cat(\"  high temp 4 is greater than 50\\n\");\n} \nif(highTemps[5] &gt; 50)\n{\n  cat(\"  high temp 5 is greater than 50\\n\");\n}\nOnly the cat() in the first codeblock (highTemps[3] &gt; 50) was executed because highTemps[3] was the only value greater than 50. The second and third codeblocks were ignored.\nChecking highTemps 3, 4, and 5 to see which are &gt; 50:\n  high temp 3 is greater than 50\nNote: This is an efficient way to check multiple values. The more efficient way is using for().Extension: Checking all values in a vector (for loops)\n \nExtension: Removing curly brackets in if() statements\n\n7.1 Using all 6 conditional operators\nThe above example used ( &gt; ) to compare the values in highTemps to the value 50.\n \nLet’s use all six conditional operator to compare highTemp[2], which is 50, to the value 50:\ncat(\"\\n---------\\nChecking high temp 2 using all 6 conditional operators:\\n\");\n\nif(highTemps[2] &gt;= 50)\n{\n  cat(\"  high temp is greater than or equal to 50\\n\")\n}\nif(highTemps[2] &lt;= 50)\n{\n  cat(\"  high temp is less than or equal to 50\\n\")\n}\nif(highTemps[2] &gt; 50)\n{\n  cat(\"  high temp is greater than 50\\n\")\n}\nif(highTemps[2] &lt; 50)\n{\n  cat(\"  high temp is less than 50\\n\")\n}\nif(highTemps[2] == 50)\n{\n  cat(\"  high temp is equal to 50\\n\")\n}\nif(highTemps[2] != 50)\n{\n  cat(\"  high temp is not equal to 50\\n\")\n}\nIn the Console, we see that three of the conditional statement passed because highTemps[2] is &gt;=, &lt;=, and == 50:\nChecking high temp 2 using all 6 conditional operators:\n  high temp is greater than or equal to 50\n  high temp is less than or equal to 50\n  high temp is equal to 50",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#conditional-operators-with-charactersstrings",
    "href": "lessons/1-08_Conditional_Operations.html#conditional-operators-with-charactersstrings",
    "title": "1-08: Conditional Operations",
    "section": "8 Conditional Operators with characters/strings",
    "text": "8 Conditional Operators with characters/strings\nWe are going to use conditional operators on the values in the noonCondition vector.  The noonCondition vector consists of character values, or, as they are more commonly called, string values (labelled chr in the Environment tab).  Since the value is a string/chr, we need to compare it to a value in quotes\n \nThe following code will check the second value in noonCond using the equal ( == ) condition and the not equal to ( != ) condition:\ncat(\"\\n---------\\nCheck to see the noon condition on the day 2:\\n\");\n\n# checking the second noonCond, which is \"Cloudy\"\nif(noonCond[2] == \"Cloudy\")  # noonCond[2] is \"Cloudy\"\n{\n  cat(\"  Day was cloudy\\n\");\n}\nif(noonCond[2] != \"Sunny\")   # noonCond[2] is not \"Sunny\"\n{\n  cat(\"  Day was not Sunny\\n\")\n}\nIn the Console, we see that noonCond[2] was equal to “Cloudy” and not equal to “Sunny”:\nCheck to see the noon condition on the day 2:\n  Day was Cloudy\n  Day was not Sunny\nWe can use all same six conditional operators to compare characters/strings – but only ( == ) and ( != ) are commonly used.  Extension: Greater than and less than on strings\n\n8.1 Quotes around numeric and string values\nWhen we compared a numeric value within a vector to a number we do not use quotes:\nif(highTemps[2] &gt;= 50)\nBut, when we compare a string/character value within a vector to a string we need quotes around the latter:\nif(noonCond[2] == \"Cloudy\")\nIf we do not use quotes then R thinks there is some variable named Cloudy and you will get an object ‘Cloudy’ not found error:\nif(noonCond[2] == Cloudy)  # error because there is no variable (Object) named Cloudy\nRemember that, in R, a variable name cannot start with a number. This means that a number is unambiguously not a variable.\n \nHowever, you can put quotes around a number:\n  if(highTemps[2] &gt;= \"50\")  # this will often give a wrong answer...\nThis change the number 50 to the two characters: “5” and “0”.  Coincidentally, the if() statement above is also TRUE, but for the wrong reason.  Extension: Numbers as Characters\n\n\n8.2 Case counts with strings\nWhen comparing two strings, any difference between the two strings means they are not equal (so, == is FALSE and != is TRUE).  This includes capital and lowercase letters.\n \nnoonCond[2] is “Cloudy” but “Cloudy” is not the same as “cloudy”:\ncat(\"\\n---------\\nChecking same condition but changed 'Cloudy' to 'cloudy':\\n\");\n\nif(noonCond[2] == \"cloudy\") # This is FALSE because of the lowercase c\n{\n  cat(\"  Day was cloudy\\n\");\n}\nif(noonCond[2] != \"cloudy\") # This is TRUE\n{\n  cat(\"  Day was NOT cloudy\\n\"); \n}\nAnd in the Console we see that “Cloudy” does not equal “cloudy”:\nChecking same condition but changed 'Cloudy' to 'cloudy':\n  Day was NOT cloudy",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#checking-other-columns",
    "href": "lessons/1-08_Conditional_Operations.html#checking-other-columns",
    "title": "1-08: Conditional Operations",
    "section": "9 Checking other columns",
    "text": "9 Checking other columns\nMany times, when we are checking values within a data frame, we want to know more about other values within that row.  In the case of the weatherData data frame, these are the weather readings that occurred on the same day:\ncat(\"\\n---------\\nOutputting information from another column:\\n\");\nif(noonCond[2] == \"Cloudy\")   # checking if the day was cloudy\n{\n  cat(\"  Day was Cloudy\");\n  cat(\" and the high temperature that day was\", highTemps[2], \"\\n\");\n}\nOutputting information from another column:\n  Day was Cloudy and the high temperature that day was 50",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#sec-embedded-if",
    "href": "lessons/1-08_Conditional_Operations.html#sec-embedded-if",
    "title": "1-08: Conditional Operations",
    "section": "10 if() within if()",
    "text": "10 if() within if()\nWe often want to check multiple conditions and one way to do this is to embed an if() statement within an if() statement.\n \nFor instance, if the condition is cloudy, we might want to make a second check on the temperature for that day:\nif(noonCond[2] == \"Cloudy\")   # checking if the day was cloudy\n{\n  # the following if statements are only checked if conditions are cloudy\n  if( highTemps[2] &gt; 60 )\n  {\n    cat(\"Still nice enough to go out!\");\n  }\n  if( highTemps[2] &lt; 60 )\n  {\n    cat(\"Best to stay indoors\");\n  }\n}\nThe two inner if() statements (checking highTemps) are inside a codeblock that is only checked if the outer if() statement (checking noonCond) is TRUE.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#application",
    "href": "lessons/1-08_Conditional_Operations.html#application",
    "title": "1-08: Conditional Operations",
    "section": "11 Application",
    "text": "11 Application\nAll of the following code should be in one script file.\nA) Using if(), find which of the first five days had at least 1 inch of rain.  For those days, output to the Console the high and low temperature.\nNote: this is an inefficient way to do the problem – the more efficient way is for loops, which we will do in a couple lessons.\n \nB) Using if(), find which of the last five days had a low temperature that was 40 degrees or less.  For those days output date to the Console. \n\nC) Use sample() to pick a random temperature from 40-80 (make sure you save the value to a variable)\n \nD) Use sample() to pick a random weather condition from these four choices: “Cloudy”, “Sunny”, “Rainy”, “Foggy”\nsample(x=c('a', 'b', 'c'), size=1) # randomly picks a, b, or c\nE) Using if() with embedded if() (Section 10) output a single message to the Console for each of these four scenarios:\n\nrandom temperature (part C) is more than or equal to 60 and the weather condition (part D) is sunny\nrandom temperature (part C) is less than 60 and the weather condition (part D) is sunny\nrandom temperature (part C) is more than or equal to 60 and the weather condition (part D) is not sunny\nrandom temperature (part C) is less than 60 and the weather condition (part D) is not sunny\n\n \nThe four scenario are mutually exclusive (do not overlap each other) and complete (cover every possible scenario). \nIf you do this right, then exactly one of the four messages will appear every time you run your script.\n \n \nSave the script as app1-08.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n11.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-curly-bracket-placement",
    "href": "lessons/1-08_Conditional_Operations.html#extension-curly-bracket-placement",
    "title": "1-08: Conditional Operations",
    "section": "12 Extension: Curly bracket placement",
    "text": "12 Extension: Curly bracket placement\nThe curly brackets attached to a if() statement are used to encapsulate the codeblock that gets executed when the conditional statement is TRUE. All the curly brackets have to do is begin and end the codeblock, so there are many ways you could place the curly brackets.\n \nHere are three bad ways that work:\nif (randomTemp &gt; 50) «{» cat(\"The temperature is\", randomTemp);\ncat(\"warm enough to go outside\\n\");  «}»\nif (randomTemp &gt; 50)\n      «{» \ncat(\"The temperature is\", randomTemp);\ncat(\"warm enough to go outside\\n\");\n      «}»\nif (randomTemp &gt; 50)             «{»\n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");    \n  \n                     «}»\nThe three if() statement above would all execute correctly because the codeblock is in between the curly brackets.  But, in programming there are standards to how curly brackets get placed.  The two main standards are below, and you need to use one of these two in this class:\n# standard 1\nif (randomTemp &gt; 50)\n{ \n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\n\n# standard 2\nif (randomTemp &gt; 50)  { \n  cat(\"The temperature is\", randomTemp);\n  cat(\"warm enough to go outside\\n\");\n}\nIn both these standards, the commands inside the codeblock are also indented – this makes it easier to see that the code that is attached to the if() statement.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-removing-curly-brackets-in-if-statements",
    "href": "lessons/1-08_Conditional_Operations.html#extension-removing-curly-brackets-in-if-statements",
    "title": "1-08: Conditional Operations",
    "section": "13 Extension: Removing curly brackets in if() statements",
    "text": "13 Extension: Removing curly brackets in if() statements\nThe three if() statements below have only one command in the codeblock: \nif(highTemps[3] &gt; 50)\n{\n  cat(\"  high temp 3 is greater than 50\\n\");\n}\nif(highTemps[4] &gt; 50)\n{\n  cat(\"  high temp 4 is greater than 50\\n\");\n} \nif(highTemps[5] &gt; 50)\n{\n  cat(\"  high temp 5 is greater than 50\\n\");\n}\nThe curly brackets are not needed when there is only one command in a codeblock. The following code will execute correctly:\nif(highTemps[3] &gt; 50)\n  cat(\"  high temp 3 is greater than 50\\n\");\nif(highTemps[4] &gt; 50)\n  cat(\"  high temp 4 is greater than 50\\n\");\nif(highTemps[5] &gt; 50)\n  cat(\"  high temp 5 is greater than 50\\n\");\nBut, that is because there is only one command attached to each if() statement.  The curly brackets are always needed if there is more than one command. This author would not recommend removing brackets if you are a beginning, it can lead to problems down the road.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-greater-than-and-less-than-on-strings",
    "href": "lessons/1-08_Conditional_Operations.html#extension-greater-than-and-less-than-on-strings",
    "title": "1-08: Conditional Operations",
    "section": "14 Extension: Greater than and less than on strings",
    "text": "14 Extension: Greater than and less than on strings\nGreater than and less than conditional operator do work on strings.  If the strings only have letters from the English alphabet, then &gt; and &lt; will do an alphabetical comparison between the values.  In this case, &gt; means “later in the alphabet”.  So, “C” &gt; “B”, “D” &gt; “C”…\n&gt; \"Frank\" &gt; \"Charlie\"\n[1] TRUE\n&gt; \"Bob\" &gt; \"Charlie\"\n[1] FALSE\n&gt; \"Bob\" &gt; \"Barb\"\n[1] TRUE\nIf you use characters that are not in the English alphabet then R will look at the Unicode character code.  Unicode character codes are unique numbers assigned to every imaginable character.  The English letters start at 65 in the Unicode chart.  The main use for Unicode character codes is that they allow someone to use and output characters that are not on your keyboard like the ζ , which is character number 950. \nEven though &gt; and &lt; works on all characters, it has limited usefulness.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-numbers-as-characters",
    "href": "lessons/1-08_Conditional_Operations.html#extension-numbers-as-characters",
    "title": "1-08: Conditional Operations",
    "section": "15 Extension: Numbers as Characters",
    "text": "15 Extension: Numbers as Characters\nA common problem in R is that variables that look like numbers can really be a string/character.\n \nIf you add these variables to your script:\nnum1 = 50;\nnum2 = \"50\";\nThen num1 is an integer but num2 is a string/character.\nIn other words, num1 is 50 and num2 is the character “5” followed by the character “0”.\n \nThis means the mathematical and conditional operators will not work on num2 as you would expect:\n\n\n\n&gt; num2 &gt; 30\n[1] TRUE\n&gt; num2 &gt; 70\n[1] FALSE\n&gt; num2 &gt; 300\n[1] TRUE\n&gt; num2 &gt; 7\n[1] FALSE\n\n\nFigure 4: Conditional operators on numbers that are really string/characters: num2 = “50”\n\n\n\nSince num2 is “50”, the first two seem correct, “50” is greater than 30 and not greater than 70.\n \nBut adding or taking away “0” does not change the result of the conditional operator so “50” is still greater than 300 and not greater than 7.\n \nThis happens because R does not think of “50” as a number but as two characters, a “5” and a “0”.  And since R sees “50” as two character, R is making an alphabetical comparison of the “numbers”:\n\n\n\n&gt; num2 &gt; \"30\"\n[1] TRUE\n&gt; num2 &gt; \"70\"\n[1] FALSE\n&gt; num2 &gt; \"300\"\n[1] TRUE\n&gt; num2 &gt; \"7\"\n[1] FALSE\n\n\nFigure 5: Conditional operators on strings that have numbers in them\n\n\n\nAlphabetic comparisons start with the leftmost character so “Frank” is greater than “Charlie” and not greater than “Harry”. Using this logic, R sees “5” as greater than “3” and not greater than “7”.  It does not matter what, or how many, “numbers” come afterwards\n \nWhen doing an alphabetical comparison, if the first character is different then you do not need to look beyond the first character when doing a conditional operator.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-08_Conditional_Operations.html#extension-checking-all-values-in-a-vector-for-loops",
    "href": "lessons/1-08_Conditional_Operations.html#extension-checking-all-values-in-a-vector-for-loops",
    "title": "1-08: Conditional Operations",
    "section": "16 Extension: Checking all values in a vector (for loops)",
    "text": "16 Extension: Checking all values in a vector (for loops)\nThis is a preview of things to come.  It is a pain to code an if() statement for every value in a vector – especially if there are hundreds or thousands of values.  For this reason if() statements are often found embedded within for loops.  The for loop’s job is to cycle through a set of values with just one command:\n# This for loop will execute 14 times with i=1:14\nfor(i in 1:14) \n{\n  # only one if() is needed to check all 14 values in the vector\n  if(highTemps[i] &gt; 50)\n  {\n    cat(\"  high temp\", i, \"is greater than 50\\n\");\n  }\n}\nAnd the if() statement does the check on all 14 values, with 9 of the 14 values bring greater than 50:\nhigh temp 1 is greater than 50   \nhigh temp 3 is greater than 50   \nhigh temp 6 is greater than 50   \nhigh temp 7 is greater than 50  \nhigh temp 8 is greater than 50   \nhigh temp 9 is greater than 50   \nhigh temp 12 is greater than 50   \nhigh temp 13 is greater than 50   \nhigh temp 14 is greater than 50",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-08: Conditional Operations"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html",
    "href": "lessons/1-10_For_Loops.html",
    "title": "1-10: For Loops",
    "section": "",
    "text": "Console in R format or no code format??\nPut find difference in vector values application here.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#purpose",
    "href": "lessons/1-10_For_Loops.html#purpose",
    "title": "1-10: For Loops",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nShow how to perform if-else statements on multiple values in a vector using for loops",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#questions-about-the-material",
    "href": "lessons/1-10_For_Loops.html#questions-about-the-material",
    "title": "1-10: For Loops",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#four-structures-in-programming",
    "href": "lessons/1-10_For_Loops.html#four-structures-in-programming",
    "title": "1-10: For Loops",
    "section": "3 Four structures in programming",
    "text": "3 Four structures in programming\nAs mentioned in the second lesson on variables, there are basically 4 main structures that cover almost every aspect of programming:\n\nVariables\nIf-Else Statements\nFor Loops\nFunctions\n\nIn the next three lessons we cover for loops.  One of the main benefits of for loops (and functions) in programming is they it generalize code.  for loops allow you to write code once and execute the code on multiple values.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#conditional-statements-on-multiple-values",
    "href": "lessons/1-10_For_Loops.html#conditional-statements-on-multiple-values",
    "title": "1-10: For Loops",
    "section": "4 Conditional statements on multiple values",
    "text": "4 Conditional statements on multiple values\nIn the last couple of lessons, we used conditional statements on values in a vector (e.g., asking about the weather conditions or the high temperatures on a specific day) and then output a message to the Console based on the results of the conditional statement.\n \nBut, when working with data, we rarely look at just one value – usually, we are looking at a vector of values (e.g., 365 high temperatures for a year) and we want to perform the same conditional statement on each of the values. In this lesson and the next lesson, we will learn to use conditional statements on multiple values – using for loops with embedded if-else statements.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#repeating-commands",
    "href": "lessons/1-10_For_Loops.html#repeating-commands",
    "title": "1-10: For Loops",
    "section": "5 Repeating commands",
    "text": "5 Repeating commands\nA for loop is used whenever you want to execute a codeblock multiple times.  The most basic example is repeating the exact same output a certain number of times:\n\n\n\nfor(i in 1:5)  # repeat 5 times\n{\n  cat(\"Hello, World\\n\");\n}\n\n\nFigure 1: The most basic for loop – repeating an output command multiple times\n\n\n\nAnd the Console tab will show 5 Hellos:\nRepeating the same code multiple times:\nHello, World\nHello, World\nHello, World\nHello, World\nHello, World\n\n5.1 The codeblock attached to the for loop\nJust like if-else statements, for loops have an attached codeblock, designated by curly brackets ( {  } ).  If-else statements execute the codeblock conditionally based on the conditional statement in the parentheses and for loops executes a codeblock multiple times.  The number of times for loops execute their attached codeblocks is dependent upon the sequence inside the parentheses.  In Figure 1, the sequence is 1:5, and since the sequence has 5 values, the codeblock attached will execute 5 times. \n \nNote: if the sequence was 15:19, which has 5 values, the attached codeblock will execute 5 times.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#repeated-code-on-values",
    "href": "lessons/1-10_For_Loops.html#repeated-code-on-values",
    "title": "1-10: For Loops",
    "section": "6 Repeated code on values",
    "text": "6 Repeated code on values\nFigure 1 repeats the exact same code 5 times. However, you rarely want to repeat the exact same code – usually, you want to repeat similar code.  For instance, you might want to say hello to 5 different people given by a vector:\nhelloVector = c(\"Ann\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\");\nTo do this we cycle through every value in the vector,  which is helloVector[1], helloVector[2], helloVector[3], helloVector[4], and helloVector[5].\n \nTo cycle through the values we set the variable (often called i) in the for loop to the values 1 through 5 and then use that variable inside the codeblock for the for loop. i, in this example, indexes helloVector each type the for loop cycles.\n\n\n\nfor(i in 1:5)\n{\n  # i takes on the values 1 through 5 through the 5 cycles of the for loop\n  cat(\"Hello,\" helloVector[i], \"\\n\");\n}\n\n\nFigure 2\n\n\n\nHello, Ann \nHello, Bob \nHello, Charlie \nHello, Dave \nHello, Eve",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#the-index-variable-in-a-for-loop",
    "href": "lessons/1-10_For_Loops.html#the-index-variable-in-a-for-loop",
    "title": "1-10: For Loops",
    "section": "7 The index variable in a for loop",
    "text": "7 The index variable in a for loop\nThe true power of the for loops lies in the indexing variable, which is often named i.  Note: the indexing variable can be given any name – it’s just common to call it i.  The indexing variable cycles through the sequence each time the for loop executes. This means the indexing variable can be used to modify the code every time the codeblock is executed.\n\n7.1 The index variable as a counter\nLet’s look at the simplest of examples – using the indexing variable, i, as a counter:\n# Using the indexing variable i as a counter\nfor(i in 1:5) # repeat 5 times\n{\n  cat(\"The count is:\", i, \"\\n\");\n}\nThis outputs:\nUsing the indexing variable as a counter:\nThe count is: 1\nThe count is: 2\nThe count is: 3\nThe count is: 4\nThe count is: 5\nThe number of times the for loop cycles is the same as the number of values in the sequence. So, we can use a different sequence of 5 values…\ncat(\"---------\\nAny sequence of 5 number cycles the for loop 5 times:\\n\");\nfor(i in 15:19) # repeat 5 times\n{\n  cat(\"The count is:\", i, \"\\n\");\n}\n…and the for loop will still cycle 5 time.\nUsing the indexing variable as a counter:\nThe count is: 15\nThe count is: 16\nThe count is: 17\nThe count is: 18\nThe count is: 19\n\n\n7.2 Taking a step back: How a for loop cycles\nA for loops always consists of 3 things:\n\nAn indexing variable:  for(i in 1:5) \nA sequence of values: for(i in 1:5)\nA codeblock to execute: encapsulated by the { }\n\n \nThe sequence of values determines how many times the codeblock will cycle.  If there are 12 values in the sequence, then the for loop will cycle 12 times.\n \nFor each cycle, the indexing variable is set to a different value in the sequence.  The value of the indexing variable take will go in the same order as the sequence.\n \nSo, if the sequence is 12:8 (a backwards sequence with 5 values), then:\n\ni will be set to 12 the first time the codeblock cycles\ni will be set to 11 the first time the codeblock cycles\ni will be set to 10 the first time the codeblock cycles\ni will be set to 9 the first time the codeblock cycles\ni will be set to 8 the first time the codeblock cycles\n\n\n\n7.3 Changing the sequence\nThe for loop executes for every value in the sequence, and the index variable takes on the values in order.\n\n\n\n# Using a sequence that does not start with 1\nfor(i in 12:8) # 12, 11, 10, 9 ,8 (there are five values in the sequence)\n{\n  cat(\"The count is:\", i, \"\\n\");\n}\n\n\nFigure 3: Using a sequence that does not start with 1 in a for loop\n\n\n\nIn this case, the for loop will still execute 5 times, but i will take on values 12 down to 8:\nChanging the sequence numbers -- length is still 5:\nThe count is: 12\nThe count is: 11\nThe count is: 10\nThe count is: 9\nThe count is: 8\n\n\n7.4 Indexing variables and more complicated sequence\nYou do not have to name the index i, you can name it whatever you want.  For instance, we will be working with weather so day might be a more appropriate name for the indexing variable.\n \nIn this example we we use a more complicated sequence and change the name of the index variable to day:\n\n\n\nfor(day in seq(from=20, to=2, by=-3))  # 20, 17, 14, 11, 8, 5, 2 (seven values)\n{\n  cat(\"The count is:\", day, \"\\n\");\n}\n\n\nFigure 4: Using a more complicated sequence in a for loop\n\n\n\nUsing a more complicated sequence with seven values:\nThe count is: 20\nThe count is: 17\nThe count is: 14\nThe count is: 11\nThe count is: 8\nThe count is: 5\nThe count is: 2\nSo, in Figure 4, the codeblock cycles 7 times because there are 7 values in the sequence (20, 17, 14, 11, 8, 5, and 2).  Each time the codeblock cycles,  day is set to a different value in the sequence (going from the first value in the sequence to the last).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#indexing-values-inside-a-for-loop",
    "href": "lessons/1-10_For_Loops.html#indexing-values-inside-a-for-loop",
    "title": "1-10: For Loops",
    "section": "8 Indexing values inside a for loop",
    "text": "8 Indexing values inside a for loop\nMost examples so far use the index variable as a counter. The real power comes when you use the indexing variable to index values in a vector as we did in Figure 2. This is how we perform an if-else statement on every value in a vector.\n \nLet’s use the same data we have been using in the previous lessons:\n### read in data from twoWeekWeatherData.csv\nweatherData = read.csv(file=\"data/twoWeekWeatherData.csv\",\n                       sep=\",\",\n                       header=TRUE);\n\n### Extract the highTemps column from the data frame -- save it to a variable\nhighTemps = weatherData$highTemp;\nnoonCond = weatherData$noonCondition;\nSince we want to go through every value in the vector, we need to know the size of the vector.  The easiest way to find the size of a vector is to use the function length():\nnumDays = length(highTemps);  # numDays is 14 (the number of values in highTemps)\nNow let’s use a for loop to output all of the highTemp values.  To do this we use the indexing variable, day, as the index for highTemp:\n\n\n\nfor(day in 1:numDays)  # numDays, in this case, is 14 (sequence is 1:14)\n{\n  cat(highTemp[day], \"\\n\");  # day will take the values 1-14\n}\n\n\nFigure 5: Using the indexing variable as an index for highTemp\n\n\n\nThe 14 values in the vector highTemps in order:\n57\n50\n54\n40\n39\n58\n60\n53\n55\n44\n39\n54\n61\n75\nIn the following example, we use the indexing variable day as both a counter and an index for noonCond:\n\n\n\nfor(day in 1:numDays)\n{\n  cat(day, \") \", noonCond[day], \"\\n\", sep=\"\");\n}\n\n\nFigure 6: Using indexing variable as a counter and an index for noonCond\n\n\n\nUsing indexing variable as a counter and an index for noonCond:\n1) Cloudy\n2) Cloudy\n3) Sunny\n4) Rain\n5) Fog\n6) Sunny\n7) Sunny\n8) Cloudy\n9) Rain\n10) Rain\n11) Snow\n12) Sunny\n13) Sunny\n14) Sunny\n\n8.1 Making code more extensible\nIn the code in Figure 5 and Figure 6,  we already know that the number of values in the vector is 14 so we could just write:\nfor(day in 1:14)\n{\n  cat(highTemp[day], \"\\n\");\n}\nBut this code will only work if the data frame does not change size.  In general, you want to make your code as generic as possible, which means using variables instead of fixed numbers. When you make your code generic, you do not have to change the code when your data changes.  In Figure 5, numDays will automatically adjust to the size of the vector.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#if-else-within-a-for-loop",
    "href": "lessons/1-10_For_Loops.html#if-else-within-a-for-loop",
    "title": "1-10: For Loops",
    "section": "9 If-else within a for loop",
    "text": "9 If-else within a for loop\nWe usually have a lot of questions that we want to ask of the values we are looking at. In other words, we want to use if-else statements within the for loops.  Let’s first ask if each day was sunny or not and output the answer to the Console.\n\n\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    cat(\"day \", i, \" was sunny\\n\", sep=\"\");\n  }else\n  {\n    cat(\"day \", i, \" was not sunny\\n\", sep=\"\");\n  }\n}\n\n\nFigure 7: Using if-else statements in a for loop\n\n\n\nUsing if-else statements within a for loop:\nday 1 was not sunny\nday 2 was not sunny\nday 3 was sunny\nday 4 was not sunny\nday 5 was not sunny\nday 6 was sunny\nday 7 was sunny\nday 8 was not sunny\nday 9 was not sunny\nday 10 was not sunny\nday 11 was not sunny\nday 12 was sunny\nday 13 was sunny\nday 14 was sunny",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#checking-a-subset-of-values",
    "href": "lessons/1-10_For_Loops.html#checking-a-subset-of-values",
    "title": "1-10: For Loops",
    "section": "10 Checking a subset of values",
    "text": "10 Checking a subset of values\nWe can use any type of sequence in the for loop so that we are only checking some of the values in the vector:\n\n\n\nfor(i in c(8,2,13))\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    cat(\"day \", i, \" was sunny\\n\", sep=\"\");\n  }else\n  {\n    cat(\"day \", i, \" was not sunny\\n\", sep=\"\");\n  }\n}\n\n\nFigure 8: Using the sequence to subset the values\n\n\n\nUsing a sequence to subset the values:\nday 8 was not sunny\nday 2 was not sunny\nday 13 was sunny",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#state-variables-and-for-loops",
    "href": "lessons/1-10_For_Loops.html#state-variables-and-for-loops",
    "title": "1-10: For Loops",
    "section": "11 State variables and for loops",
    "text": "11 State variables and for loops\nThe code in Figure 7 is displaying specific information about each value in a vector.  This would get quickly out of hand if there are thousands of values!  We usually want more general information about a vector – for instance, we might want to know how many days were sunny?\n \nFinding more general information about the values in a vector requires the introduction of the last component of most for loops: the state variable.  The state variable is a variable that maintains a running tab of some value through each cycle of the for loop.\n \nLet’s count the number of sunny days using a for loop.  To do this we need to:\n\ncreate a state variable that holds the number of sunny days (this will start at 0)\nhave a for loop that cycles through every value in the noonCond vector\ninclude an if() statement asking if the day is sunny\nhave a command to increase the state variable by 1 if it is sunny\n\n \nNote: The state variable must be declared outside of the for loop.  Think about why this is true – it is the first question in the Application.\n \n\n\n\nsunnyDays = 0; # state variable -- will hold the count of cloudy days\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")  # was the day sunny\n  {\n    sunnyDays = sunnyDays +1;   # it was -- increase sunnyDays by 1\n  }\n  # there is no else here -- we don't care about non-sunny days\n}\n\n\nFigure 9: Using a state variable to calculate how many sunny days there was in noonCond\n\n\n\nAnd we can look in the Environment tab to see what the final value of sunnyDays was:\nsunnyDays:   6\nAnd if we look at the noonCond vector, we see there are 6 sunny days:\n&gt; noonCond\n [1] \"Cloudy\" \"Cloudy\" \"Sunny\"  \"Rain\"   \"Fog\"    \"Sunny\"  \"Sunny\"  \"Cloudy\"\n [9] \"Rain\"   \"Rain\"   \"Snow\"   \"Sunny\"  \"Sunny\"  \"Sunny\"\n\n11.1 The state variable\nsunnyDays does a lot of heavy lifting in Figure 9.  We initially set sunnyDays to 0 because 0 is the default value, or the value if the condition (noonCond[i] == \"Sunny\") fails every time.\n \nWhenever the value in noonCond is “Sunny” the following code is executed:\n   sunnyDays = sunnyDays +1;\nThis code works because the right side of the equation is always evaluated first.\n \nSo, R will first calculate: sunnyDays +1\n\nIf sunnyDays is 0, then sunnyDays +1 evaluates to 1\n\n \nThen R assigns the value on the right-side to the variable on the left, which is sunnyDays. \n\nsunnyDays is assigned the value of 1.\n\n \nIf sunnyDays is 4, then sunnyDays +1 evaluates to 5, and sunnyDays is assigned the value of 5.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-10_For_Loops.html#application",
    "href": "lessons/1-10_For_Loops.html#application",
    "title": "1-10: For Loops",
    "section": "12 Application:",
    "text": "12 Application:\n1) In Comments: Why must the state variable be declared outside the for loop as opposed to inside the for loop?  Think about what happens to the state variable every time the for loop cycles if it is declared inside the for loop.  Put the answer in comments at the top of your script.\n \n2) Create one for loop that outputs the (a) square (2nd power), cube (3rd power), and cube root (1/3rd power) for the numbers 1 through 10.\n \n3) Using a for loop, find out how many days had high temperatures less than 50.\n \n4) Using a for loop, find out how many even days were cloudy\n \n5) Using a for loop, find out how many of the last 8 days were cloudy.\n \n6) In comments: If you are using a for loop to add up all values in a vector then what value should your state variable start with? Why?\n \n7) Challenge: Using for loops, find the total precipitation (i.e., add up all the precipitation values).  Hint: you keep adding each new precipitation value to the total precipitation.\n \n \nSave the script as app1-10.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n12.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-10: For Loops"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#purpose",
    "href": "lessons/1-12_MultipleConditions.html#purpose",
    "title": "1-12: Multiple Conditions",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCheck for multiple conditions on variables",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#questions-about-the-material",
    "href": "lessons/1-12_MultipleConditions.html#questions-about-the-material",
    "title": "1-12: Multiple Conditions",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nData: download the data file here\n\n \nThis lesson data has two new columns in it compared to the previous lesson’s data – so 14 obs. of 7 variables (instead of 5).  The new columns (noonCondMessy and precipBad) are copies of the previous columns with some issues added that are addressed in this lesson.\n\n\n\n\n\n\nFigure 1: The new weatherData data frame with two new columns\n\n\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#logical-operators-and-or",
    "href": "lessons/1-12_MultipleConditions.html#logical-operators-and-or",
    "title": "1-12: Multiple Conditions",
    "section": "3 Logical Operators: AND (&), OR (|)",
    "text": "3 Logical Operators: AND (&), OR (|)\nIn this lesson we are going to learn how to combine conditional statements in if() statements using two new operators: AND, OR.  The symbol for the AND operator is the ampersand ( & ) and the symbol for the OR operator is the vertical pipe ( | ).  For situations where you are checking one value at a time, the single and double operators have the same functionality.  We will cover the other situation later in this lesson.\n \nExtension: & vs && and | vs ||\n \nThe AND operator combines two conditional statements into one conditional statement with the rule:\n\nif both of the conditional statements are TRUE then the whole conditional statement is TRUE\n\nif (condition1 & condition2)\n{\n   # Execute the code between these curly brackets\n   #   if both condition1 and condition2 are TRUE\n}\nThe OR operator combines two conditional statements into one conditional statement with the rule:\n\nif either of the conditional statements are TRUE then the whole conditional statement is TRUE\n\nif (condition1 | condition2)\n{\n   # Execute the code between these curly brackets\n   #   if either condition1 or condition2 is TRUE\n}\n\n3.1 Operators we have learned so far\n\n\n\nTable 1: All of the operators taught in the class so far\n\n\n\n\n\n\n\n\n\n\nOperator Type\nPurpose\nR Symbols\n\n\n\n\nAssignment\nassign a value to a variable\n=, &lt;-, -&gt;\n\n\nMathematical\nPerform a mathematical operation on a numeric value\n+, -, *, /, ^\n\n\nSubset\nSubset a vector\n[ ], $\n\n\nConditional\nCompare two values\n==, !=, &gt;, &lt;, &gt;=, &lt;=\n\n\nLogical\nCombine conditions\n&, &&, |, ||",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#combining-conditional-statements-logical-operators",
    "href": "lessons/1-12_MultipleConditions.html#combining-conditional-statements-logical-operators",
    "title": "1-12: Multiple Conditions",
    "section": "4 Combining conditional statements (logical operators)",
    "text": "4 Combining conditional statements (logical operators)\nIn the last lesson we started by asking two questions about noonCond that both had one condition: \n\nIs the day sunny? \nIs the day rainy?\n\n#### From last lesson\nsunnyDays = 0; # state variable -- will hold the count of sunny days\nrainyDays = 0; # state variable -- will hold the count of rainy days\n\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\")\n  {\n    sunnyDays = sunnyDays +1; # increases sunnyDays by 1\n  # We use else if here because we know \"Sunny\" and \"Rain\" are mutually exclusive\n  }else if(noonCond[i] == \"Rain\")\n  {\n    rainyDays = rainyDays +1; # increases rainyDays by 1\n  }\n}\nAnd the answer was:\nsunnyDays:   6\nrainyDays:   3\n\n4.1 Using the OR operator\nWe can also combine the two conditional statements and ask: Is the day sunny OR  rainy?\n \nJust replace OR with the symbol that represents OR, which is |:\n  if(noonCond[i] == \"Sunny\" | noonCond[i] == \"Rain\")\nPut this in the script and it will count days both sunny and rainy days:\n\n\n\nsunnyOrRainyDays = 0\nfor(i in 1:numDays)\n{\n  if(noonCond[i] == \"Sunny\" | noonCond[i] == \"Rainy\")\n  {\n    sunnyOrRainyDays = sunnyOrRainyDays +1;\n  }\n}\n\n\nFigure 2: Using logical operator | to test two conditions\n\n\n\nsunnyOrRainyDays is the addition of sunny (6) and rainy (3) days\nsunnyOrRainyDays:   9\n\n\n4.2 Conditions must be explicit\nIn programming we need to be explicit when using multiple conditional statement:\n  if(noonCond[i] == \"Sunny\" | noonCond[i] == \"Rainy\")  # this is correct\nIn English, it makes sense to ask: Is the day sunny or rainy?\n \nAnd, naively, the code for this sentence would look like this:\n  if(noonCond[i] == \"Sunny\" | \"Rain\")  # this in incorrect\nIf you do this, you will get the error:\nError in noonCond[i] == “Sunny” | “Rain” : invalid ‘y’ type in ‘x | y’\nwhere x represent noonCond[i] == \"Sunny\" and y represents \"Rain\"\n \nThe error is telling you that “Rain” (the invalid ‘y’) is not a conditional statement.  Both conditions (‘x | y’) must be explicitly written out (i.e., both must have a conditional operator with a value on both sides).\n\n\n4.3 More than 2 conditions\nYou can also use the OR operator to string together multiple conditional statements.\n \nWe will use the new column in our data, called noonCondMessy in which the weather conditions are not consistently spelled – as often happens when people are manually inputting data:\nnoonCondMess = weatherData$noonCondMessy;\nLooking at the value in noonCondMess show that there are multiple versions of “sunny”:\n&gt; noonCondMess\n[1] \"clouds\" \"Cloudy\" \"sun\" \"rainy\" \" fog\" \"Sunny\" \"sunny\"\n[8] \"cloudy\" \"Rain\" \"RAIN\" \"Snow\" \"SUNNY\" \"Sun\" \"sun\"\nWe will use multiple OR operators to check for four different versions of “sunny”:\n\n\n\nsunnyDaysMess = 0; # state variable -- will hold the count of sunny days\n\nfor(i in 1:numDays)\n{\n  # check for different spellings\n  if(noonCondMess[i] == \"Sunny\" | noonCondMess[i] == \"sunny\" |\n     noonCondMess[i] == \"sun\" | noonCondMess[i] == \"SUN\")\n  {\n    sunnyDaysMess = sunnyDaysMess +1;\n  }\n}\n\n\nFigure 3: Using OR operator to check for multiple spellings\n\n\n\nAnd, once again we get six:\nsunnyDays1:  6\nNote: This is a brute force method for finding multiple spellings. There are more robust way to check for different spelling using substrings and pattern recognition (i.e., substr() and grep()), topics we will touch on later in this class.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#the-and-operator",
    "href": "lessons/1-12_MultipleConditions.html#the-and-operator",
    "title": "1-12: Multiple Conditions",
    "section": "5 The AND operator",
    "text": "5 The AND operator\nThe OR operator says: if one condition is TRUE then the whole condition is TRUE\nThe AND operator says that ALL conditions need to be TRUE for the whole condition to be TRUE.\n \nThe AND operator can be used to check conditions in two different weather columns.\n \nFor example, you might want to know which days were warmer than 60 AND Sunny.\n\n\n\ngoOutDay = 0;\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &gt; 60 & noonCond[i] == \"Sunny\") \n  {\n    goOutDay = goOutDay +1;\n  }\n}\n\n\nFigure 4: Using AND operator to check conditions in two different columns\n\n\n\nThere were 2 days that were both over 60 and sunny:\ngoOutDays:   2\nNote: day 7 is 60 degrees and sunny but not counted here because the condition ( &gt; ) is greater than (but not equal to) 60\n\n5.1 The NOT EQUAL operator\nWe can reverse the conditions and check for non-sunny days that were colder than (or equal to) 50.\n \nIn other words we want highTemps &lt;= 50 AND noonCond != “Sunny”:\n\n\n\nstayInDay = 0;\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &lt;= 50 & noonCond[i] != \"Sunny\") \n  {\n    stayInDay = stayInDay +1;\n  }\n}\n\n\nFigure 5: Reversing the conditional statements from the last loop\n\n\n\nThere were 5 days that were below (or equal to) 50 and not sunny:\nstayInDays:    5\n\n\n5.2 Mutually exclusive if() statement\nSince the two if() statements above (Figure 4 and Figure 5) have mutually exclusive conditions (i.e., there are no situations where both can be TRUE), we can (and should) combine them into one if-else-if statement.  The following code is functionally the same but more efficient (i.e., faster):\n\n\n\nfor(i in 1:numDays)\n{\n  if(highTemps[i] &gt; 60 & noonCond[i] == \"Sunny\")\n  {\n    cat(\"day\", i, \" good day to go out\\n\");\n  }else if(highTemps[i] &lt;= 50 & noonCond[i] == \"Rain\")\n  {\n    cat(\"day\", i, \" good day to stay in\\n\");\n  }\n}\n\n\nFigure 6: Checking mutually exclusive multiple conditions with an if-else-if structure\n\n\n\nThe 2 days that are good to go out and 5 that are not:\nday 2 good day to stay in\nday 4 good day to stay in\nday 5 good day to stay in\nday 10 good day to stay in\nday 11 good day to stay in\nday 13 good day to go out\nday 14 good day to go out",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#finding-ranges-of-numbers",
    "href": "lessons/1-12_MultipleConditions.html#finding-ranges-of-numbers",
    "title": "1-12: Multiple Conditions",
    "section": "6 Finding Ranges of numbers",
    "text": "6 Finding Ranges of numbers\nSo far when we has used conditional operators on numbers that are bounded on one side but go off to infinity of the other.\n\nhighTemp &gt; 60 means anything from 60 up to positive infinity\nhighTemp &lt; 50 means anything from 50 down to negative infinity\n\n \nBut, we often want to limit the range we are checking to something less than infinity!\n \nFor instance we might want all values between 50 and 60 (in this case, we will include 50 but not 60).\n \nIn other words, we want:\n\nvalues greater than or equal to 50 (highTemps &gt;= 50)\nAND values less than 60 (highTemps &lt; 60)\n\n \nIn order for the value to be between 50 and 60 both of the above conditional statements must be TRUE, so we use AND to combine the conditional statements:\n\n\n\nfor(i in 1:numDays)\n{\n  # the number is both greater than (or equal to) 50 and less than 60\n  if(highTemps[i] &gt;= 50 & highTemps[i] &lt; 60)\n  {\n    cat(\"It was \", highTemps[i], \"degrees on day \", i, \"\\n\");\n  }\n}\n\n\nFigure 7: Using AND operator to limit the range to values between two numbers\n\n\n\nThe 7 days between 50 and 60 (includes 50 but not 60):\nIt was 57 degrees on day 1\nIt was 50 degrees on day 2\nIt was 54 degrees on day 3\nIt was 58 degrees on day 6\nIt was 53 degrees on day 8\nIt was 55 degrees on day 9\nIt was 54 degrees on day 12\n\n6.1 Values outside a range\nSometimes we want to check for values outside an expected range – often to check for errors.  For instance, precipBad has some values that seem to be in error:\n&gt; precipBad\n[1] 0.010 0.005 0.040 1.110 0.120 0.000 «-0.005» «49.000» 0.450 0.300\n[11] 1.130 0.004 0.000 0.000\nSince rain is in inches, we are going to assume that any negative value (less than 0) or value above 10 is in error.\n \nIn this case we are looking for  precipBad values that are less than 0 OR greater than 10:\n\n\n\nprecipBad = weatherData$precipBad;\nfor(i in 1:numDays)\n{\n  # precipBad values less than 0 or greater than 10\n  if(precipBad[i] &lt; 0 | precipBad[i] &gt; 10)\n  {\n    cat(\"Day\", i, \"has a value of\" , precipBad[i], \"\\n\");\n  }\n}\n\n\nFigure 8: Checking for values beyond the expected range\n\n\n\nAnd we see the two days in precipBad that are in error:\nDay 7 has a value of -0.005\nDay 8 has a value of 49",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#sec-booleanVec",
    "href": "lessons/1-12_MultipleConditions.html#sec-booleanVec",
    "title": "1-12: Multiple Conditions",
    "section": "7 Boolean vectors",
    "text": "7 Boolean vectors\nUp until this point. we have been using conditional operators to check values individually.  We can also use conditional operators to check every value in a vector at once and create a TRUE/FALSE (Boolean) vector from the result.\n \nFor instance, we only might care about sunny days:\nsunnyDayBool = (noonCondition == \"Sunny\");\nOr, whether the day was both sunny and warm:\nniceDayBool = (highTemps &gt; 60 & noonCondition == \"Sunny\");\nOr, whether the was rain or snow:\nprecipBool = (precipitation == \"Rain\" | precipitation == \"Snow\")\nThe result for all three of these commands is a 14-value Boolean (also called logical) vector:\nsunnyDayBool  logi [1:14] FALSE FALSE TRUE FALSE...\nniceDayBool   logi [1:14] FALSE FALSE FALSE FALSE...\nprecipBool    logi [1:14] FALSE FALSE FALSE TRUE...\nWe can look at sunnyDayBool and see that the index of the TRUE values match the index of “Sunny” days in noonCond (values 3, 6, 7, 12, 13, and 14):\n&gt; sunnyDayBool\n [1] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n[12] TRUE  TRUE  TRUE\n&gt; noonCond\n [1] \"Cloudy\" \"Cloudy\" \"Sunny\"  \"Rain\"   \"Fog\"    \"Sunny\"  \"Sunny\"  \"Cloudy\"\n [9] \"Rain\"   \"Rain\"   \"Snow\"  \"Sunny\"  \"Sunny\"  \"Sunny\" \nOr, that only the last two days were both Sunny and over 60 degrees:\n&gt; niceDayBool\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[12] FALSE  TRUE  TRUE\nOr, that 4 of the 14 days had some precipitation (rain or snow):\n&gt; precipBool\n [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n[12] FALSE FALSE FALSE\n\n7.1 Masking a dataframe\nA common use for a Boolean vector is to reduce (or mask) a dataframe to rows that meet a condition. We can create a dataframe that contains only the rows with sunny days using the Boolean vector sunnyDayBool.\n\n\n\n### Using a Boolean vector to \"mask\" a dataframe \nsunnyDayWD = weatherData[sunnyDayBool,];\n\n\nFigure 9: Masking a dataframe using [X,Y] subset notation\n\n\n\nIn Figure 9, we use [X,Y] notation to subset the dataframe with:\n\nsunnyDayBool subsets X (the rows) – so only rows where sunnyDayBool is TRUE will be in the subsetted dataframe\nnothing subsets Y (the columns) – so all columns will be in the subsetted dataframe\n\n \nThe subsetted dataframe, sunnyDayWD has 6 rows, representing the 6 of the 14 rows (rows 3, 6, 7, 12, 13, and 14) from the original dataframe where noonCondition was Sunny:\n&gt; sunnyDayWD\n    date highTemp lowTemp precipitation «noonCondition» noonCondMessy precipBad\n3  Mar29       54      46         0.040         Sunny           sun     0.040\n6   Apr1       58      45         0.000         Sunny         Sunny     0.000\n7   Apr2       60      32         0.005         Sunny         sunny    -0.005\n12  Apr7       54      43         0.004         Sunny         SUNNY     0.004\n13  Apr8       61      45         0.000         Sunny           Sun     0.000\n14  Apr9       75      63         0.000         Sunny           sun     0.000 \n\n\n7.2 Masking rows and columns\nWe can use the [X,Y] notation to subset columns. The following code will also remove the precipitation column, which is column 4.\n### Masking rows and columns\nsunnyDayWD2 = weatherData[sunnyDayBool, c(-4)];  # remove precipitation column (4)\nAnd in the Console, we see the same data with the precipitation column removed:\nsunnyDayWD2                                                          \")\n    date highTemp lowTemp noonCondition noonCondMessy precipBad\n3  Mar29       54      46         Sunny           sun     0.040\n6   Apr1       58      45         Sunny         Sunny     0.000\n7   Apr2       60      32         Sunny         sunny    -0.005\n12  Apr7       54      43         Sunny         SUNNY     0.004\n13  Apr8       61      45         Sunny           Sun     0.000\n14  Apr9       75      63         Sunny           sun     0.000",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#application",
    "href": "lessons/1-12_MultipleConditions.html#application",
    "title": "1-12: Multiple Conditions",
    "section": "8 Application",
    "text": "8 Application\nA) Create one if-else-if structure that checks for:\n\nSunny days greater than 54\nNon-Sunny less than or equal to 54\nSunny days less than or equal to 54\nNon-Sunny greater than 54\n\nIn comments answer: Why do this as one if-else-if structure instead of 4 separate if statements?\n \nB) Create a Boolean (logical) vector that finds all cloudy days in noonCondMessy (note different spellings)\n \nC) Create a cloudyDays dataframe that:\n\nOnly has the rows from weatherData where weather conditions were cloudy\nRemoves the last 2 columns from weatherData (noonCondMessy and precipBad)\n\n \nD) Create an if() that combines all rainy, cloudy, and snowy days from noonCondition.\n \nE) Find which days meet all three of these conditions:\n\nlowTemps &gt; 40\nhighTemps &lt; 60\nSunny\n\n \nF) Use the following random number generator:\nrandomTemp = sample(0:100, size=1);  # pick 1 random from 0 to 100\nand create one if-else-if structure that outputs:\n\n“error” if randomTemp is less than 20 or greater than 80\n“very cold” if randomTemp is 20-30\n“cold” if randomTemp is 30-45\n“nice” if randomTemp is 45-60\n“unusually warm” if randomTemp 60-80\n\n \nSave the script as app1-12.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-12_MultipleConditions.html#extension-vs-and-vs",
    "href": "lessons/1-12_MultipleConditions.html#extension-vs-and-vs",
    "title": "1-12: Multiple Conditions",
    "section": "9 Extension: & vs && and | vs ||",
    "text": "9 Extension: & vs && and | vs ||\nR has two AND operators (& and &&) and two OR operators (| and ||), which I will refer to as the singlesand doublesoperators.\n \nThe big difference is that singles work on one or multiple values, whereas doubles only work on one vaule. In other words, you can replace singles with doubles for the whole lesson except in Section 7, where we are working with a vector of values. In Section 7, switching the singles with doubles will cause an error.\n \nAt this point it seems there is no reason to use doubles if singles do everything and more. And for a beginner, this is enough information. However, as you get into more advanced programming, there are benefits to using doubles.\n\n9.1 doubles are more efficient\nIn the following code, & will always check both if highTemps &gt; 50 and noonCond is Sunny:\n  if(highTemps &gt; 50 «&» noonCond == \"Sunny\") \nBut if highTemps is less than 50 then there is no point to checking noonCond because the condition is already FALSE.\n \n&& will only check what is necessary to get the condition:\nif(highTemps &gt; 50 «&&» noonCond == \"Sunny\")\nif highTemps is less than 50, && will not bother to check noonCond.\n\n\n9.2 doubles can used to avoid errors\nAnother common usage of doubles is to check if a variable exists before checking the value of the variable. Here we are checking first to see if highTemps exists, then we will check if the value is greater than 50:\nif( exists(highTemps) «&&» highTemps &gt; 50 )  # will avoid errors\nBecause we are using &&, if exists(highTemps) is FALSE, the value of highTemps will not be checked.\n \nIf we use &, then the value of highTemps will be checked even if highTemps does not exist, causing an error in your script.\n if( exists(highTemps) «&» highTemps &gt; 50 ) # error if highTemps does not exist\n\n\n9.3 singles and double in other programming languages\nIn a lot of language, the doubles have a similar meaning to the singles in R. Just remember where you use singles in R, you are likely using doubles in other languages.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-12: Multiple Conditions"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html",
    "href": "lessons/1-14_Functions2.html",
    "title": "1-14: Functions 2",
    "section": "",
    "text": "Extension: combining all four error checks into one (or do this as an application?)\nCreate a function with a count value",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#purpose",
    "href": "lessons/1-14_Functions2.html#purpose",
    "title": "1-14: Functions 2",
    "section": "1 Purpose",
    "text": "1 Purpose\n\ncreate a separate file to hold functions\narguments in functions\nUse return values in functions",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#questions-about-the-material",
    "href": "lessons/1-14_Functions2.html#questions-about-the-material",
    "title": "1-14: Functions 2",
    "section": "2 Questions about the material…",
    "text": "2 Questions about the material…\nThe files for this lesson:\n\nScript: you can download the script here\nSecond Script: a second script containing functions can be downloaded here\n\n \nIf you have any questions about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#opening-a-script-file",
    "href": "lessons/1-14_Functions2.html#opening-a-script-file",
    "title": "1-14: Functions 2",
    "section": "3 Opening a script file",
    "text": "3 Opening a script file\nA reminder that anytime a script file is looking for some resource, (e.g., a data file, another script file), the script needs a starting point (i.e., a folder) to find the location of the resource. R calls this starting point the Working Directory. When you are in an RStudio Project, the starting folder/Working Directory is the Project Folder. This is what makes an RStudio Project easy to share – the file path used to link resources does not need to change when the Project Folder is moved.\n \nThe main script file for this lesson needs the functions within 1-14_myFunctions.R, which is in the scripts folder inside the Project Folder: scripts/1_14-myFunctions.r\n \nAnd we put the functions in the Environment by calling:\nsource(\"scripts/1-14_myFunctions.R\");\nIf the path is incorrect, either because the file name or folder path is incorrect, the line will give you the error:\ncannot open file 'wrong_path/1-14_myFunctions.R': No such file or directory\nor\ncannot open file 'script/wrong_name.R': No such file or directory\nNote: uppercase/lowercase does not matter in the file path on Windows and Mac. However, case does matter on Linux, so keep that in mind when sharing your files.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#modulus-arithmetic",
    "href": "lessons/1-14_Functions2.html#modulus-arithmetic",
    "title": "1-14: Functions 2",
    "section": "4 Modulus arithmetic",
    "text": "4 Modulus arithmetic\nAll of the functions in this lesson use the modulus operator: %%. The modulus operator divides the first number by the second number and return only the remainder.\n \nSome examples:\n&gt; 11 %% 4 \n[1] 3 \n&gt; 12 %% 4 \n[1] 0 \n&gt; 13 %% 4 \n[1] 1 \n&gt; 14 %% 4 \n[1] 2\nThe modulus operator is often used in a for loop to perform a task at a regular interval. For instance, modulus can be used to check every 100th value in a large vector (val %% 100).",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#modulus-operator-and-checking-for-divisibility",
    "href": "lessons/1-14_Functions2.html#modulus-operator-and-checking-for-divisibility",
    "title": "1-14: Functions 2",
    "section": "5 Modulus operator and checking for divisibility",
    "text": "5 Modulus operator and checking for divisibility\nWe are going to use the %% operator to check if one number (the dividend) is evenly divided by another number (the divisor). If the divisor divides the dividend evenly, then the modulus will be 0 (i.e., no remainder). The function is called isDivisible().\n \nisDivisible = function(dividend, divisor)\n{\n  ### get the remainder of the division using modulus\n  remainder = dividend %% divisor;\n  \n  ### Check if the remainder is 0\n  divBy0 = (remainder == 0);  # TRUE if 0, FALSE otherwise\n  \n  ### return whether the modulus was 0 (TRUE) or more than zero (FALSE)\n  return(divBy0);\n}\nExtension: Variable and function names do not matter… to R\n\n5.1 A function that checks divisibility\nThe first function in 1-14_myFunctions.r has two arguments: dividend and divisor.\nisDivisible = function(dividend, divisor)\nThe codeblock calculates the modulus of dividend and divisor (i.e., it divides the dividend by the divisor and returns the remainder)\nremainder = dividend %% divisor;\nThen the codeblock checks whether remainder is 0 and saves the results to divBy0:\ndivBy0 = (remainder == 0); # TRUE if 0, FALSE otherwise\nFinally, the codeblock returns divBy0 to the caller:\nreturn(divBy0);\n\n\n5.2 A Boolean return value\ndivBy0 is a Boolean value. In other words, divBy0 can only have two possible values: TRUE and FALSE.\n \nThe Boolean value is created in this line:\ndivBy0 = (remainder == 0);\n(remainder == 0) compares remainder to 0, just like it would if this were an if() statement. The results of this comparison is a Boolean TRUE/FALSE that is saved to the variable divBy0.\n \nThis line of code uses both the comparison operator ( == ) to create a Boolean value and the assignment operator ( = ) to save the Boolean value to a variable (divBy0).\n\n\n5.3 Testing isDivisible()\nWe can pass in two arguments, the first representing the divdend, and the second representing the divisor:\ndiv12_4 = isDivisible(12,4); \ndiv12_5 = isDivisible(12,5);\nAnd we get the results:\ndiv12_4:   TRUE\ndiv12_5:   FALSE\nWe can also put in the argument names to make the functions more readable:\ndiv12_4a = isDivisible(dividend=12, divisor=4); \ndiv12_5a = isDivisible(dividend=12, divisor=5);\nAnd we get the same results:\ndiv12_4a:   TRUE \ndiv12_5a:   FALSE\nAside from readability, another advantage to using argument names is that you can put the arguments in any order you want:\ndiv12_4b = isDivisible(divisor=4, dividend=12); \ndiv12_5b = isDivisible(divisor=5, dividend=12);\ndiv12_4b: TRUE \ndiv12_5b: FALSE\nWhen calling isDivisible(), it is fine to skip argument names but using argument names is a necessity for functions that have lots of arguments, such as geom_boxplot():",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#prime-function",
    "href": "lessons/1-14_Functions2.html#prime-function",
    "title": "1-14: Functions 2",
    "section": "6 Prime function",
    "text": "6 Prime function\nThe function, isDivisible(), performs the simple task of checking if one number is divisible by another number. We are going to expand that by checking whether the dividend can be evenly divided by any number. In other words, we are checking to see if the dividend is a prime number. This function, in the functions script, is called isPrime1().\n \nnote: The method we are using to check for prime works but is very inefficient!\nisPrime1 = function(dividend)\n{\n  # check all numbers between 2 and one less that dividend\n  for(i in 2:(dividend-1))\n  {\n    if(dividend %% i == 0)\n    {\n      ## number can be divided evenly by another number -- return FALSE\n      return(FALSE);\n    }\n  }\n  ## number cannot be divided evenly by another number -- return TRUE\n  return(TRUE);\n}\n\n6.1 Parts of the isPrime() function\nThe header of the function only has one argument this time: the value you want to check for prime:\nisPrime1 = function(dividend)\nTo check if dividend is prime, you need to go through all numbers smaller than dividend, starting with 2. If none of those values evenly divide dividend then dividend is prime.\n \nWe check all possible divisors with a for loop that cycles from 2 to one less than dividend:\nfor(i in 2:(dividend-1))\nInside the for loop, we takes the modulus of dividend and the divisor, which is the current for loop cycle value (i):\nif(dividend %% i == 0)\nIf any modulus is 0, then we know a number evenly divides dividend and dividend cannot be prime. At this point we do not need to check any more values and can immediately return FALSE back to the caller.\n  return(FALSE);  #dividend is not prime\nIf the for loop cycles through all of the values, and the modulus is never 0, then we know dividend is prime and return TRUE to the caller:\nreturn(TRUE);    #dividend is prime\n\n\n6.2 Two return locations\nThis function has two places where it calls return().\n\nIn the for loop if the modulus is 0. At this point we know the dividend cannot be prime because another number evenly divides it. We can immediately end the function and return FALSE to the caller (i.e., the dividend is not prime)\nAt the end of the function after the for loop. If the for loop cycles through every number and none evenly divide the dividend then we know the dividend has to be prime and return TRUE to the caller.\n\n \nNote: There is no way both return() can be executed in one function call.\n\n\n6.3 Checking for prime\nWe will call the function multiple times with different dividends. You can convince yourself that the function is correctly declaring prime numbers:\np0 = isPrime1(13);\np1 = isPrime1(14);\np2 = isPrime1(81);\np3 = isPrime1(dividend=83);\np4 = isPrime1(dividend=87);\np5 = isPrime1(dividend=89);\nNote: the first (and only) argument in isPrime1() is dividend. We can either explicitly name the one argument or have R assume the one value is for the first argument.\np0: TRUE\np1: FALSE\np2: FALSE\np3: TRUE\np4: FALSE\np5: TRUE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#error-checking",
    "href": "lessons/1-14_Functions2.html#error-checking",
    "title": "1-14: Functions 2",
    "section": "7 Error checking",
    "text": "7 Error checking\nThe assumption when someone calls isPrime1() is that the caller will send a valid integer as an argument. It is not a good strategy to assume this will be true as there are many other types of value the caller can pass in:\n\nA vector of values (i.e., multiple values)\nA non-numeric value (e.g., a string or Boolean value)\nA negative value\nA decimal value\n\n \nisPrime2() is the same as isPrime1() except that isPrime2() first does a series of checks using an if-else-if structure. If any of the statements are TRUE (i.e., the argument is an invalid value) then the function will return an error message and end:\n  ### Error checks on the argument value\n  if(length(dividend) &gt; 1)         # error check 1: too many values\n  {\n    return(\"Error: too many values\");\n  }\n  else if (!is.numeric(dividend))  # error check 2: value not numeric\n  {\n    return(\"Error: value is not numeric\");\n  }\n  else if (dividend &lt; 0)           # error check 3: value is negative\n  {\n    return(\"Error: value must be positive\");\n  }\n  else if (dividend %% 1 != 0)     # error check 4: value is a decimal\n  {\n    return(\"Error: value must be an integer\");\n  }\nA truly robust function will check to make sure arguments are valid using some sort of error checking.\n\n7.1 The error checks:\nThere are four error checks:\n1) Check to see if the argument has more than one value\nif(length(val) &gt; 1)         # error check 1: too many values\n2) Check to see if the argument is not a numeric value:\nelse if (!is.numeric(val))  # error check 2: value not numeric\n3) Check to see if the argument is a negative value:\nelse if (val &lt; 0)           # error check 3: value is negative\n4) Check to see if the number is a decimal (i.e., not an integer):\nelse if (val %% 1 != 0)     # error check 4: value is a decimal\nThe first three checks are self-explanatory. The last one is a bit trickier as R does not have a dedicated check for integers. Note: R has a function named is.integer(), but this function only checks if the number has been explicitly declared an integer, something the caller is unlikely to do.\n \nTo check is the value is an integer, we perform a modulus between the value and 1.\n\nIf the value is an integer, the modulus is 0\nIf the value is a decimal, the modulus is the decimal\n\n \nYou can convince yourself of this in the Console:\n&gt; 5.5 %% 1 \n[1] 0.5 \n&gt; 8.333 %% 1 \n[1] 0.333 \n&gt; 10 %% 1 \n[1] 0 \n&gt; 12.99 %% 1 \n[1] 0.99\n\n\n7.2 Testing the error checking\nWe will check for the four errors and test valid values to make sure we have not lost the functionality of the original isPrime1():\ne1 = isPrime2(c(10,34)); # too many values \ne2 = isPrime2(\"hello\");  # not numeric \ne3 = isPrime2(FALSE);    # not numeric \ne4 = isPrime2(-35);      # negative numeric \ne5 = isPrime2(74.24);    # decimal numeric \ne6 = isPrime1(13);       # valid -- and prime \ne7 = isPrime1(14);       # valid -- and not prime \ne8 = isPrime1(81);       # valid -- and not prime\ne1: \"Error: too many values\"\ne2: \"Error: value is not numeric\"\ne3: \"Error: value is not numeric\"\ne4: \"Error: value must be positive\"\ne5: \"Error: value must be an integer\"\ne6: TRUE\ne7: FALSE\ne8: FALSE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#multiple-return-values",
    "href": "lessons/1-14_Functions2.html#multiple-return-values",
    "title": "1-14: Functions 2",
    "section": "8 Multiple return values",
    "text": "8 Multiple return values\nAll the functions we have created so far in the past two lessons have returned one value, either a single Boolean value, or a single numeric value.\n \nWe are going to create a function that returns an undetermined number of values. Specifically, we are going to modify the isPrime1() to return all factors of the dividend supplied by the caller. For example, 12 can be divided by 2, 3, 4, and 6 so the return has 4 values: c(2,3,4,6).\n \nThe function is called findFactors():\nfindFactors = function(val)\n{\n  ### Store the factors here\n  factors = c();\n  \n  for(i in 2:(val-1))\n  {\n    if(val %% i == 0)\n    {\n      ## number can be divided evenly by another number \n      ## insert this number as a factor\n      factors = c(factors, i);\n    }\n  }\n  ## number cannot be divided evenly by another number -- return TRUE\n  return(factors);\n}\n\n8.1 Storing multiple values\nWe start the function by creating the vector that will store the values returned to the caller (i.e., the factors of the dividend):\n### Store the factors here (starts as a NULL vector)\nfactors = c();\nfactors starts as an empty, or NULL, vector. And a NULL vector will be returned to the caller if dividend is prime (i.e., dividend has no factors).\n \nThe for loop still cycles from 2 to one less than dividend and checks if the modulus is 0. Every time the modulus is 0, the value that evenly divides dividend is inserted in the factors vector:\n  for(i in 2:(dividend-1))\n  {\n    if(val %% i == 0)\n    {\n      ## number can be divided evenly by another number \n      ## insert this number as a factor\n      factors = c(factors, i);\n    }\n  }\n\n\n8.2 Adding values to a vector\nThis line says that factors is equal to a vector of itself and the i value that we just calculated to be a factor:\nfactors = c(factors, i);\nIn other words, the code above creates a new vector that is the old vector with the i value inserted at the end.\n\n\n8.3 Returning the factors\nAfter cycling through all the values in the for loop, we return the factors vector to the caller:\nreturn(factors);\nfactors will either be NULL (dividend is prime), or have a list of all factors of dividend.\n\n\n8.4 Testing findFactors()\nWe will test findFactors() with values that we know are prime (13, 83), values we know are not prime (14, 81, 87), and one value that has many factors (72):\nf0 = findFactors(dividend=13);\nf1 = findFactors(14);\nf2 = findFactors(dividend=81);\nf3 = findFactors(83);\nf4 = findFactors(dividend=87);\nf5 = findFactors(72);\nAnd we get NULL for the dividends that are prime or a list of factors for the non-prime dividends:\nf0: NULL\nf1: int [1:2] 2 7\nf2: int [1:3] 3 9 27\nf3: NULL\nf4: int [1:2] 3 29\nf5: int [1:10] 2 3 4 6 8 9 12 18 24 36",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#application",
    "href": "lessons/1-14_Functions2.html#application",
    "title": "1-14: Functions 2",
    "section": "9 Application",
    "text": "9 Application\n1) For this application you need to create two scripts:\n\na functions script named app1-14_functions.r that contains the functions created in this application\na main script named app1-14.r where you will answer questions in comments and test the functions created in app1-14_functions.r\nsource() your functions script from the main script\nMake sure you test all the functions thoroughly in your main script. I want to see the test code in app1-14.r.\n\n \n2) In comments answer: Why is factors created as an empty vector in findFactors() before it is used in the for loop? What happens if factors is not created first?\n \n3) Making modifications to isPrime1()\n\ncopy isPrime1() to your function script for this application\nFix isPrime1() so it can correctly handle the dividends 0, 1, and 2\n\n0 and 1 are not prime, 2 is prime\nThe for loop should not be executed if the dividend is 0, 1 or 2\n\nMake the function more efficient by having the for loop cycle from 2 to the square root of dividend\n\nnote: the for loop will ignore the decimal in the square loop value\n\n\n \n4) Create a function that checks a vector of numbers to see which of those numbers are divisible by 7, 11, or 13\n\nThe function has one argument: a vector of dividends\nThe function return all the dividends that can be evenly divided by at least one of 7, 11, or 13\n\n \n5) Create a function that check if the modulus of two numbers is a value given by caller:\n\nThe function has three arguments: dividend, divisor, remainder\nThe function will check to see if the modulus of dividend and divisor is equal to remainder and return TRUE if it is and FALSE if it is not\n\n \nAlso…\n\nGive default value for remainder\nHave the function return an error if:\n\nany of the three arguments numbers are zero or negative\nremainder is bigger than divisor\n\n\n \n6) Create one function that converts one temperature value between the three temperature measurements: Celsius (C), Fahrenheit (F), and Kelvin (K).\n\nThere are six possible conversions:\n\nF -&gt; C\nC -&gt; F\nC -&gt; K\nK -&gt; C\nK -&gt; F\n\nThe conversion for Celsius to Kelvin is: \\(K = C + 273\\)\nThe conversion for Celsius to Fahrenheit is: \\(F=\\frac{9}{5} C+32\\)\nYou need an argument for the temperature value.\nYou need two arguments to determine the conversion: from and to\n\nan if-else-if structure will be needed to pick the exact conversion.\n\n\n \nSave the script as app1-14.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/1-14_Functions2.html#extension-variable-and-function-names-do-not-matter-to-r",
    "href": "lessons/1-14_Functions2.html#extension-variable-and-function-names-do-not-matter-to-r",
    "title": "1-14: Functions 2",
    "section": "10 Extension: Variable and function names do not matter… to R",
    "text": "10 Extension: Variable and function names do not matter… to R\nVariable and function names are generally chosen to make it easier for the reader to understand the script.  But R could care less what names you use.  The following script executes the exact same calculation and returns the exact same TRUE/FALSE values as isDivisible() – it just uses variable and function names that are not intuitive to the user.  Do not do this in your script!\ndo_stuff = function(a_number, another_number)\n{\n  ### get the remainder of the division using modulus\n  the_answer = a_number %% another_number;\n  ### Check if the remainder is 0\n  thing_to_return = (the_answer == 0);  # TRUE if 0, FALSE otherwise\n  \n  ### return whether the modulus was 0 (TRUE) or more than zero (FALSE)\n  return(thing_to_return);\n}",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 1: Basic Programming",
      "1-14: Functions 2"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html",
    "href": "lessons/2-01_GGPlot_Intro.html",
    "title": "2-01: GGPlot Introduction",
    "section": "",
    "text": "handle Source issues (especially from plots people have to cycle through)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#purpose",
    "href": "lessons/2-01_GGPlot_Intro.html#purpose",
    "title": "2-01: GGPlot Introduction",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nCreate a scatterplot in GGPlot\nModify the scatterplot using components\nAdd a second plot\n\n\n1.1 Code for the lesson\nThe script for this lesson is here\nThe Lansing2016Noaa.csv is here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#ggplot-package",
    "href": "lessons/2-01_GGPlot_Intro.html#ggplot-package",
    "title": "2-01: GGPlot Introduction",
    "section": "2 GGPlot package",
    "text": "2 GGPlot package\nWe are going to use the GGPlot package so we need to add the ggplot2 library to the script.\nrm(list=ls());                         # clear the Environment tab\nlibrary(package=ggplot2);              # include all GGPlot2 functions\nThe second line gives your script access to all of the functions in the GGPlot2 package. Note: ggplot2 is technically the third version of GGPlot – but no one uses the first two versions (ggplot and ggplot1) anymore.\n\n2.1 R-base plots\nThe script files for lessons in this class that contain plots will have the GGPlot presented in the lesson and, in comments, the R-base plot equivalent. The plan is to eventually add a lesson about R-base plots but, until then, the R-base plots are there FYI.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#sec-components",
    "href": "lessons/2-01_GGPlot_Intro.html#sec-components",
    "title": "2-01: GGPlot Introduction",
    "section": "3 GGPlot components and subcomponents",
    "text": "3 GGPlot components and subcomponents\nFor many years, RBase was the main plotting tool in R. Rbase was loosely based on the metaphor of drawing plots on a transparency. GGPlot is based more on a building metaphor.\n \nThe full list of functions in the GGPlot package is here:\nhttps://ggplot2.tidyverse.org/reference/\n \nIn GGPlot, one way to think about the functions is that they are components of a plot.  Each time you call a GGPlot function, you are either adding a component to a plot or modifying an existing component.  For this class, I refer to the functions in GGPlot as components.\n \nThe arguments within the functions can be thought of as subcomponents of the components.\n \nA helpful R resource is the cheat sheets, which exists for many popular packages – the cheat sheet for GGPlot2 is on this page:\nhttps://rstudio.github.io/cheatsheets/html/data-visualization.html",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#create-plot-data-using-ggplot",
    "href": "lessons/2-01_GGPlot_Intro.html#create-plot-data-using-ggplot",
    "title": "2-01: GGPlot Introduction",
    "section": "4 Create plot data using GGPlot",
    "text": "4 Create plot data using GGPlot\nWe are going to create a scatterplot in GGPlot using data from Lansing2016NOAA.csv\n# read in CSV file and save the content to weatherData\nweatherData = read.csv(file=\"data/Lansing2016NOAA.csv\");\nThe scatterplot will be average temperature (avgTemp column) vs. humidity (relHum column).\n \nThe code to create a scatterplot using GGPlot is:\n#### Part 1: Create a scatterplot #### \nplot1 = ggplot( data=weatherData ) +   \n  geom_point( mapping=aes(x=avgTemp, y=relHum) ); \nplot(plot1);\nSource the script and this plot appears:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Our first plot using GGPlot – note that the x and y-axis labels match the mapped name\n\n\n\n\n4.1 Taking out argument names\nBelow, the argument names are highlighted:\n\n\n\n#### Part 1: Create a scatterplot ####\nplot1 = ggplot( «data»=weatherData ) +\n        geom_point( «mapping»=aes(«x»=avgTemp, «y»=relHum) );\nplot(plot1);\n\n\nFigure 2: Argument names used in ggplot call\n\n\n\nWe can remove the argument names and, in this case, the script will render the same plot:\n#### Part 2: Same scatterplot without argument names ####\nplot2 = ggplot( weatherData ) +\n        geom_point( aes(avgTemp, relHum) );\nplot(plot2);   # same as plot1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Taking out argument names, in this case, produces the same plot\n\n\n\n\n\n4.2 Benefits of using argument names\nYou will often see people skip the argument names and, for the example above, this works.  But it only works because we only used the default arguments for each function and used the arguments in the same order as they appeared in the function.\n \nIn this class, we will (almost always) use argument names because using argument names:\n\nmakes the code more intuitive to the reader – and making code more intuitive should (almost always) take precedence over saving space\nmeans that you can order the arguments however you want\navoids bad assumptions about the ordering of arguments and their default values\n\n \nThe one exception where we will not use argument names is:\nplot(plot1)   # no argument name used here\ninstead of\nplot(x=plot1) # x is the argument name\nThere are multiple functions in R and GGPlot where x is used as the first argument name in a function, and it often refers to the data being passed in to the function.  This is not intuitive when plotting because x is also used to refer to x-axis data.\n \nWe will use the argument name x when x refers to an axis (e.g., x=avgTemp) but not when x refers generically to data (e.g., x=plotData) as shown in Figure 2.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#components-of-a-ggplot",
    "href": "lessons/2-01_GGPlot_Intro.html#components-of-a-ggplot",
    "title": "2-01: GGPlot Introduction",
    "section": "5 Components of a GGPlot",
    "text": "5 Components of a GGPlot\nLet’s take a more detailed look at the three lines of code that created the scatterplot.\n \nThe function ggplot() creates a canvas area where all the components will be drawn.  The argument data gives the data that will be used by the components, which is set to the data frame weatherData:\nplot1 = «ggplot( data=weatherData )» +\n        geom_point( mapping=aes(x=avgTemp, y=relHum) );\nplot(plot1);\nNext, we add the scapperplot component geom_point(), and map the x and y axis to the avgTemp and relHum columns from weatherData:\nplot1 = ggplot( data=weatherData ) +\n        «geom_point( mapping=aes(x=avgTemp, y=relHum) )»;\nplot(plot1);\nThe canvas, which contains a scatterplot, is saved to a variable named plot1:\n«plot1» = ggplot( data=weatherData ) +\n        geom_point( mapping=aes(x=avgTemp, y=relHum) );\nplot(plot1);\nnote: plot1 is a List variable – List variable will be covered in a later lesson\n \nAnd then plot() is used to display the canvas saved in plot1:\nplot1 = ggplot( data=weatherData ) +\n        geom_point( mapping=aes(x=avgTemp, y=relHum) );\n«plot(plot1)»;\n\n5.1 GGPlot components\nIn GGPlot, you initialize a canvas and then add components to the canvas.  The ( + ) symbol is used to add components, and you can string multiple components together.  In the above example, there is the canvas initialization function, ggplot(), and one component, geom_point():\n \n1) ggplot() is used to initialize a GGPlot canvas with the data from weatherData:\nplotData = «ggplot( data=weatherData )» +\n           geom_point( mapping=aes(x=avgTemp, y=relHum) );\n2) geom_point() is a plotting component that creates a scatterplot\nplotData = ggplot( data=weatherData ) +\n           «geom_point( mapping=aes(x=avgTemp, y=relHum) )»;\n\n\n5.2 GGPlot mapping and aesthetics (aes)\nMost plotting components in GGPlot contain a subcomponent called mapping.  mapping describes the relationship between the data and the plot.  Or, another way to put it, mapping describes what data gets represented on the plot (in the above case, avgTemp and relHum) and how the data gets represented (avgTemp on x-axis, relHum on y-axis): \nplotData = ggplot( data=weatherData ) +\n           geom_point( mapping=«aes(x=avgTemp, y=relHum)» );\nThe mapping is set to a mapping element called an aesthetic (aes).  The concept of an aesthetic comes into play when we are generating legends and creating data categories, which is a topic we delve much deeper into in the GGPlot class.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#adding-more-components-to-the-canvas",
    "href": "lessons/2-01_GGPlot_Intro.html#adding-more-components-to-the-canvas",
    "title": "2-01: GGPlot Introduction",
    "section": "6 Adding more components to the canvas",
    "text": "6 Adding more components to the canvas\nLet’s say we want to make the three following modifications to the plot:\n\nadd a title and change the axes labels\nchange the numeric tick marks on the y-axis\nchange the direction of the x-axis labels \n\n \nTo do this we will add three new components to the canvas:\n\nlabs() – label component\nscale_x_continuous() – x-scaling component (there is a corresponding y-scaling component)\ntheme() – theme component\n\n \nWe add components using ( + ) and subcomponents are the arguments within the components:\n#### Part 3: Adding components to the plot ####\nplot3 = ggplot( data=weatherData ) «+»\n  geom_point( mapping=aes(x=avgTemp, y=relHum) ) «+»\n  labs( title=\"Humidity vs Temperature\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Average Temperatures (Fahrenheit)\",\n        y = \"Relative Humidity\") «+»\n  scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) «+»\n  theme( axis.text.x=element_text(angle=90, vjust=0.5) );\nplot(plot3);\nTrap: Putting the ( + ) on the next line\n \nAnd plot3 includes the three new components:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Scatterplot with a few added components\n\n\n\n\n6.1 The Components in detail\n  labs( title=\"Humidity vs Temperature\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Average Temperatures (Fahrenheit)\",\n        y = \"Relative Humidity\") +\nWhen we search in the Help tab for labs() (Figure 5) we see that it has many subcomponents (or arguments) including:\n\nlabel: the title\nsubtitle: a secondary title\n\n \nA couple of notes about the information in the Help:\n\nThere are many ways to add axes labels, labs() sort of merges all of these methods into one component.  Because of this, the Help section does not explicitly show the x and y arguments (although, the examples below do).  This is one area where the Help could do a better job reflecting the functionality of a function.\nwaiver() is the default value given by the plotting function.\n\n\n\n\n\n\n\nFigure 5:  Using the Help tab in RStudio to find info about GGPlot components\n\n\n\nscale_x_continuous( breaks = seq(from=10, to=80, by=10) )\nscale_x_continuous() is the component used when you want to modify an x-axis that has continuous values. There are many subcomponents (Figure 6) that can be changed in scale_x_continuous() and the corresponding scale_y_continuous().  We modified one subcomponent, breaks, by setting it to a sequence from 10 to 80 with numeric values place at intervals of 10.\n \n\n\n\n\n\n\nFigure 6: scale_x_continuous help page\n\n\n\nnote: scale_x_discrete() is used to modify an x-axis with discrete values.\ntheme( axis.text.x=element_text(angle=90, vjust=0.5) )\nIn this example we changed one subcomponent in theme() called axis.text.x and set it to an element_text() that modifies the text by rotating it to an angle of 90 degrees and centering the text (vjust=0.5).  Note: the default for vjust is 1, which means the text will be vertically justified to the bottom.  vjust=0 means the text will be vertically justified to the top.\n \nBroadly speaking, theme() is used to make modifications that are not data related to the canvas (the plots and the background).  theme() is probably the most used component in GGPlot, and we could spend many lessons going through all the subcomponents of theme(). \n\n\n\n\n\n\nFigure 7: theme() component help page (yes, there is a lot there!)\n\n\n\n\n\n6.2 For more help with components\nA good place to find more information about components in GGPlot is the Help tab in the lower-right corner of RStudio.  The Help tab provides information directly from https://ggplot2.tidyverse.org/reference/, which is the official webpage for GGPlot.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#getting-rid-of-the-grey-themes",
    "href": "lessons/2-01_GGPlot_Intro.html#getting-rid-of-the-grey-themes",
    "title": "2-01: GGPlot Introduction",
    "section": "7 Getting rid of the grey (themes)",
    "text": "7 Getting rid of the grey (themes)\nThe default GGplot theme, which uses the gray background, is not my favorite.  Luckily, GGPlot makes it easy to change the theme.  The components that do this, called complete themes, are on this page.  I will change to the black-white theme:\n#### Part 4: Changing the theme ####\nplot4 = ggplot( data=weatherData ) +\n  geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n  labs( title=\"Humidity vs Temperature\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Average Temperatures (Fahrenheit)\",\n        y = \"Relative Humidity\") +\n  scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n  «theme_bw()» +\n  theme( axis.text.x=element_text(angle=90, vjust=0.5) );\nplot(plot4);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Setting the GGPlot theme to black and white\n\n\n\n\n7.1 Complete themes must come before theme changes\nA complete theme (e.g., theme_bw()) overwrites the whole theme for the canvas.  This means it will overwrite any theme changes you previously made.  In this code, theme_bw() overwrite the theme() on the line before:\n#### Part 5: Changing the complete theme --- oops, undoes theme ####\nplot5 = ggplot( data=weatherData ) +\n  geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n  labs( title=\"Humidity vs Temperature\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Average Temperatures (Fahrenheit)\",\n        y = \"Relative Humidity\") +\n  scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n  «theme( axis.text.x=element_text(angle=90, vjust=0.5) )» +\n  «theme_bw()»;  # this complete theme change will remove the theme change above\nplot(plot5);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: The complete theme change removed the theme change above it (the axis labels are no longer at 90 degrees)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#adding-a-second-plot-a-linear-regression",
    "href": "lessons/2-01_GGPlot_Intro.html#adding-a-second-plot-a-linear-regression",
    "title": "2-01: GGPlot Introduction",
    "section": "8 Adding a second plot (a linear regression)",
    "text": "8 Adding a second plot (a linear regression)\nNext, we will add a regression line to the canvas.  This is done using the plotting component geom_smooth().\n \ngeom_smooth() adds data to the plot area so we need to use the mapping subcomponent to tell GGPlot what data is being added to the plot area and how. In this case, we are mapping relHum vs. avgTemp.\n \nWe also add the method subcomponent to geom_smooth() to set the smoothing method we will use on the data.  In this case, linear model (lm).\n#### Part 6: Adding a regression line ####\nplot6 = ggplot( data=weatherData ) +\n  geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n  «geom_smooth( mapping=aes(x=avgTemp, y=relHum),» \n               «method=\"lm\" )» +\n  labs( title=\"Humidity vs Temperature\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Average Temperatures (Fahrenheit)\",\n        y = \"Relative Humidity\") +\n  scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n  theme_bw() +\n  theme( axis.text.x=element_text(angle=90, vjust=0.5) );\nplot(plot6);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Adding a linear model component\n\n\n\n\n8.1 Overlapping plots\nWhen two plots overlap, as the linear model and the scatterplot do in Figure 10, the component that is added later to the ggplot() canvas overlaps the earlier component.  So, in the above case, the linear model overlaps the scatterplot.\n \nTo have the scatterplot overlap the linear model, just switch the two components around:\n#### Part 7: Reversing the overlapping plots ####\nplot7 = ggplot( data=weatherData ) +\n  geom_smooth( mapping=aes(x=avgTemp, y=relHum), \n               method=\"lm\" ) +\n  geom_point( mapping=aes(x=avgTemp, y=relHum) ) +\n  labs( title=\"Humidity vs Temperature\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Average Temperatures (Fahrenheit)\",\n        y = \"Relative Humidity\") +\n  scale_x_continuous( breaks = seq(from=10, to=80, by=10) ) +\n  theme_bw() +\n  theme( axis.text.x=element_text(angle=90, vjust=0.5) );\nplot(plot7);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 11: Switching the order of the components to change which plot is on top",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#application",
    "href": "lessons/2-01_GGPlot_Intro.html#application",
    "title": "2-01: GGPlot Introduction",
    "section": "9 Application",
    "text": "9 Application\nA) Create a script file names app2-01.r in your RStudio Project’s scripts folder\n \nB) Looking at the GGPlot cheat sheet (or the GGPlot functions page) from Section 3 answer the following in comments in app2-01.r:\n\nWhat component (function) would be used to create a text plot?\nWhat component would you use to change the breaks on the x-axis if the values were in date format?\n \n\nC) Create a scatterplot in GGPlot in your script:\n\nCreate a scatterplot of stnPressure vs windSpeed using the data from Lansing2016NOAA.csv\nAdd a title and labels the axes appropriately\nChange the plot theme to one of your choice\nChange the angle of the stnPressure axis labels to 45 degrees\nChange the stnPressure breaks to go up by 0.1\nHave the wind-speed axis only display three values: 3, 12, 21\nAdd a linear regression of stnPressure vs windSpeed that appears behind the scatterplot\nChallenge: Use the limits argument in scale_x_continuous and scale_y_continuous to remove the top and right parts of the plot where there are only a couple points.\n\nlimits is set equal to a vector with two values – so limits = c(0,100) would mean the axis would go from 0 to 100\n\n\n \nSave the script as app2-01.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-01_GGPlot_Intro.html#trap-putting-the-on-the-next-line",
    "href": "lessons/2-01_GGPlot_Intro.html#trap-putting-the-on-the-next-line",
    "title": "2-01: GGPlot Introduction",
    "section": "10 Trap: Putting the ( + ) on the next line",
    "text": "10 Trap: Putting the ( + ) on the next line\nThe ( + ) commands strings together the components of a GGPlot.  A common mistake is to put the ( + ) at the beginning of the following line:\n#### Trap: Putting ( + ) is the wrong place ####\nplotA = ggplot( data=weatherData )\n+ geom_point( mapping=aes(x=avgTemp, y=relHum) )\n+ labs( title=\"Humidity vs Temperature\",\n      subtitle=\"Lansing, MI -- 2016\",\n      x = \"Average Temperatures (Fahrenheit)\",\n      y = \"Relative Humidity\")\n+ scale_x_continuous( breaks = seq(from=10, to=80, by=10) )\n+ theme( axis.text.x=element_text(angle=90, vjust=0.5) );\nplot(plotA);\nThis will result in an error and a surprisingly wise assessment of the problem from the R debugger.\n\n\n\n\n\n\nFigure 12: Error when putting the ( + ) on the next line\n\n\n\nThe reason for this error is that R thinks this line:\nplotA = ggplot( data=weatherData )\nis a fully-formed and completed command\n \nAnd R does not understand why the next line starts a new command with a ( + )\n + geom_point( mapping=aes(x=avgTemp, y=relHum) )\nA ( + ) at the end of a line tells R to append the next line to the current line.  A ( + ) at the beginning of a line tells R to perform the mathematical operation addition.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-01: GGPlot Introduction"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#purpose",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#purpose",
    "title": "2-03: Data Types and Data Frames",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nManipulations of a data frames\nConverting a column’s datatype",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#material",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#material",
    "title": "2-03: Data Types and Data Frames",
    "section": "2 Material",
    "text": "2 Material\nLike last lesson we will fixing some typical issues of columns in a data frame and we will also be manipulating the data frame to reflect the changes\n \nThe script for this lesson is here\nWe will be looking at two data frames in this lesson:\n\nThe Lansing2016Noaa-2-bad.csv is here\nThe Lansing2016Noaa-2.csv is here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#extra-columns-in-data-frames",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#extra-columns-in-data-frames",
    "title": "2-03: Data Types and Data Frames",
    "section": "3 Extra columns in data frames",
    "text": "3 Extra columns in data frames\nWe are going to start this lesson by looking at a couple issues that occur when writing a data frame to a CSV file.\n \nIn the last lesson we wrote to two CSV files, the first one using all default values for write.csv():\nwrite.csv(weatherData5, file=\"data/Lansing2016Noaa-2-bad.csv\");  # from last lesson\nLet’s open up this file and see what happened:\nbadData = read.csv(file=\"data/Lansing2016NOAA-2-bad.csv\",\n              sep=\",\",\n              header=TRUE);\nAfter you double-click on badData in the Environment tab, you can see there is an extra column in the data frame at the beginning which has the row numbers in it.  This is because, by default, write.csv() will treat the row numbers as a column of data.\n\n\n\n\n\n\nFigure 1: An extra column containing row numbers was added to the data frame\n\n\n\nThis is not a big deal but each time you write to a CSV file without setting row.names = FALSE, you create another column of row numbers to the file.  If you keep writing to a CSV file without setting row.names to FALSE, you will get something like this:\n\n\n\n\n\n\nFigure 2: Multiple column containing row numbers…",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#adding-columns-with-the-wrong-number-of-values",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#adding-columns-with-the-wrong-number-of-values",
    "title": "2-03: Data Types and Data Frames",
    "section": "4 Adding columns with the wrong number of values",
    "text": "4 Adding columns with the wrong number of values\nWhile we are messing around with a throwaway data frame, let’s see what happens if you try to add/overwrite a column to the data frame that has the wrong number of values.  In this case, the data frame has 366 rows, meaning there are 366 values in each column.\n \nLet’s attempt to overwrite the column test1 with 400 values and write to a new column called test2 with 10 values:\nbadData$test1 = c(1:400);  # 400 values: 1-400\nbadData$test2 = c(1:10);   # 10 values: 1-10\nThe test1 line will output this error:\nError in `$&lt;-.data.frame`(`*tmp*`, test1, value = 1:400) : \n  replacement has 400 rows, data has 366\nand, similarly, the test2 line will output this error:\nError in `$&lt;-.data.frame`(`*tmp*`, test2, value = 1:10) : \n  replacement has 10 rows, data has 366\nBasically, R is saying that the vector you are trying to add to the data frame does not have the same number of values as the row in the data frame.\n\n4.1 Adding column with a divisible number of values\nThere is one situation is which R will let you write a column to a data frame even if the number of values is not the same as the number of rows– and that is when the number of values in the vector evenly divides the number of rows in the data frame.  In the case of weatherData that is any number that can evenly divide 366 (e.g., 1,2,3,6…)\n \nIn these cases, R will repeat the values provided until 366 values is reached.\n \nSo, if you use one value to create a column:\nbadData$test3 =10;\nThen R will create a column called test3 with the value 10 in every cell.\n \nOr, if you use 6 values (366/6 = 61):\nbadData$test4 = c(1:6);\nThen R will create a column called test4 that repeat the numbers 1-6 61times:\n&gt; badData$test3\n[1] 10 10 10 10 10 10 10 10 10 ...\n&gt; badData$test4\n[1] 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 ...\n\n\n\n\n\n\nFigure 3: Adding columns with values that repeats",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#manually-repeating-values",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#manually-repeating-values",
    "title": "2-03: Data Types and Data Frames",
    "section": "5 Manually repeating values",
    "text": "5 Manually repeating values\nYou can manually create a vector with repeated values using rep(), which has 2 arguments:\n\nthe value(s) you want to repeat\nthe number of times you want to repeat the values\n \n\nIf you want to repeat the letters A through F to fill a 366 value vector:\nvectorAF = rep(c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), times = 61);\nvectorAF repeats “A”-“F” 61 times.  Let’s look at the first 20 values:\n&gt; vectorAF[1:20]\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"A\" \"B\"\nAlternatively, you can use the argument length.out to give the length of the vector.  So, if you want to repeat the numbers 1 through 10 until you reach 366 values:\nvector1_10 = rep(1:10, length.out=366);\nIf you look at the last 20 values of vector1_10, you see that the last, or 366th, value is a 6:\n&gt; vector1_10[345:366]\n [1]  5  6  7  8  9 10  1  2  3  4  5  6  7  8  9 10  1  2  3  4  5  6\nIf you want to repeat values a certain number and then move on to another value, for instance creating a vector with the months of the years, then you can use rep() within a vector:\nfirstThreeMonths = c(rep(\"Jan\", 31), rep(\"Feb\", 29), rep(\"Mar\", 31));\nAnd firstThreeMonth will have 91 values:\n&gt; firstThreeMonths\n [1] \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\"\n[14] \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\"\n[27] \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Jan\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\"\n[40] \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\"\n[53] \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Feb\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\"\n[66] \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\"\n[79] \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\" \"Mar\"",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#numeric-and-character-columns",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#numeric-and-character-columns",
    "title": "2-03: Data Types and Data Frames",
    "section": "6 Numeric and character columns",
    "text": "6 Numeric and character columns\nNow let’s read in the “good” CSV file created in the last lesson:\n  weatherData = read.csv(file=\"data/Lansing2016Noaa-2.csv\",\n                         sep=\",\",\n                         header=TRUE);\nIf we look at the Environment (Figure 4), there are a few columns in the weatherData data frame that R categorizes as string (chr) even though they are numeric by nature.  For instance, precip, snow, and snowDepth are all labelled as chr even though they have (mostly) numeric values.\n \nThe issue is the “T” values used in these columns to indicate a trace of precipitation (less than 0.01 inches).  “T” is a chr/string values and, in R, if any value in a vector or a column is a string then every value in the vector (or column) is treated as a string.\n\n\n\n\n\n\nFigure 4: The precip column is seen as a string (chr) column by R\n\n\n\nNote: You can also use the typeof() function to find the data type for a vector:\n&gt; typeof(weatherData$precip)\n[1] \"character\"\n\n6.1 When numbers are treated as characters\nIn R, “1234” is not the same as 1234.  The former is 4 characters, a “1” followed by a “2” followed by a “3”, followed by a “4”.  The latter is the number 1234.  In R, you cannot perform mathematical operations on  characters, even if they look like numbers.\n \nIf you try to perform mathematical operations on character, even ones that look like numbers, you will get the error: non-numeric argument to binary operator.\n \nWe can see this in the Console:\n&gt; a = 9\n&gt; b = \"7\"\n&gt; a + a\n[1] 18\n&gt; a + b\nError in a + b : non-numeric argument to binary operator\n&gt; b + b\nError in b + b : non-numeric argument to binary operator\nLet’s save the precip column in weatherData to a vector called precip\nprecip = weatherData$precip;\nA similar error will occur if you try to perform mathematical functions on precip, like adding up all of the values using sum():\n&gt; totalPrecip = sum(precip);\nError in sum(precip) : invalid 'type' (character) of argument\nAnd statistical function like mean() will generally give an answer of NA:\n&gt; meanPrecip = mean(precip);\nWarning message:\nIn mean.default(precip) : argument is not numeric or logical: returning NA\n\n\n6.2 Forcing characters to become numbers\nThe solution is to change the chr (string) vector into a numeric vector using as.numeric():\n \nLet’s use as.numeric() on the precip vector as save the results to precip2:\nprecip2 = as.numeric(precip);\nIf we look at the Environment, we can see that precip2 is a numeric vector and the numbers no longer have quotes around them.  But, the non-numeric “T” values were replaced with NA:\nprecip:   chr[1:366]  \"0.04\" \"0.00\" \"T\" \"T\" \"0.00\"\nprecip2:  num[1:366]  0.04 0 NA NA 0\n\n\n6.3 Double values are numeric…\nUsing typeof()  to find out what type of vector precip2 is:\n&gt; typeof(precip2)\n[1] \"double\"\nA double value is a numeric value.  double refers to how big of a numeric value the vector can hold and meant a lot more in the days when computer memory was at a premium.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#operations-on-na-values",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#operations-on-na-values",
    "title": "2-03: Data Types and Data Frames",
    "section": "7 Operations on NA values",
    "text": "7 Operations on NA values\nTo R, NA means that the value is Not Available.  NA can be an error indicating that an operation could not be performed and therefore no value can be given.  NA could also be a placeholder for a value that is known to not exist.\n \nNULL and NA are often confused but they are functionally much different.  If NULL is used in a vector, it will remove the value from the vector:\n&gt; c(1, NULL, 3, 4, 5)\n[1] 1 3 4 5\n&gt; c(1, NA, 3, 4, 5)\n[1]  1 NA  3  4  5\nIf you try to perform mathematical or statistical operation on a vector that has numeric NA values, R will tell you the answer is NA, or NA_Real, which is just R’s way of telling you that the answer would be a real number if the NA values existed.\nmeanPrecip = mean(precip2);\ntotalPrecip = sum(precip2);\nmeanPrecip: NA_Real\ntotalPrecip: NA_Real\n\n7.1 Comparing NA to NULL\nNA values are, in a sense, placeholder values for data that should exist but is unknown. Therefore are mathematical and statistical operations on NA will result in NA:\n&gt; length(c(10, NA, NA, 20))\n[1] 4\n&gt; sum(c(10, NA, NA, 20))\n[1] NA\n&gt; mean(c(10, NA, NA, 20))\n[1] NA\nWhereas the NULL values will be treated as if it does not exist:\n&gt; length(c(10, NULL, NULL, 20))\n[1] 2\n&gt; sum(c(10, NULL, NULL, 20))\n[1] 30\n&gt; mean(c(10, NULL, NULL, 20))\n[1] 15\n\n\n7.2 Finding the number of NA values\nis.na(precip2) will go through each value in precip2 and create a TRUE/FALSE vector with 366 values:\n&gt; is.na(precip2)\n  [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  \n [14] TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE\n ...\nThe TRUE values represent NA values.  We can count the TRUE values using sum():\n&gt; sum(is.na(precip2))\n[1] 60\nSo, there are 60 NA values in precip2.\n\n\n7.3 Removing NA values\nYou can get around the NA issues by instructing R to remove the NA values from the calculation by setting the NA removal argument available in most mathematical and statistical function, na.rm, to TRUE:\nmeanPrecip2 = mean(precip2, na.rm = TRUE);\ntotalPrecip2 = sum(precip2, na.rm = TRUE);\nWithout the NA values in the vector, the results are:\nmeanPrecip2: 0.1144...\ntotalPrecip2: 35.01\nNote: na.rm=TRUE effectively changes an NA to a NULL\n\n\n7.4 Replacing the NA values\nUsing the argument na.rm=TRUE assumes that the NA values should be ignored.  However, that is not true in this case – the NA values are the old T values and represented a trace or rain.  We need to keep these values in the vector.  Since a trace of precipitation is defined as less than 0.01 inches of precipitation – so we will go halfway and change all NA values to 0.005:\n \nWe will first make another copy of precip:\nprecip3 = precip2;          # make another copy of precip\nAnd then cycle through all the values in precip3, checking for NA values and changing them to 0.005:\nfor(i in 1:length(precip3)) # go through every value in precip\n{\n  if(is.na(precip3[i]))     # if the value is NA\n  {\n    precip[i] = 0.005;      # change it to 0.005\n  }\n}\nAnd we can see that precip3 now has 0.005 in place of NA:\nprecip3 num [1:366] 0.04 0.00 «0.005» «0.005» 0.00...\n\n\n7.5 Reserved Words in R\nNA is a reserved word in R.  This means you cannot create a variable named NA in R:\n&gt; NA = 2\nError in NA = 2 : invalid (do_set) left-hand side to assignment\nNA is not the same as the string value “N” followed by “A”, so this if statement will not work:\nif(precip3[i] == \"NA\") # checking for the characters \"N\" and \"A\"\nAnd NA is not a variable name in R, so this if statement does not work:\nif(precip3[i] == NA) # checking for the variable named NA\nInstead, we must use the function is.na() to check for NA values:\nif(is.na(precip3[i])) # checking if precip[i] is an NA value\nNote: There are many other reserved words in R like NULL, TRUE, FALSE, for, if, else, function…\n\n\n7.6 Mathematical operations on the new vector\nLet’s find the mean and the sum of the precip3 vector with 0.005 in place of NA,\nmeanPrecip3 = mean(precip3);\ntotalPrecip3 = sum(precip3);\nAdding 60 days with trace precipitation increased the sum by a little bit and lowered the mean a bit:\nmeanPrecip2:   0.1144...\ntotalPrecip2:  35.01\nmeanPrecip3:   0.0964...\ntotalPrecip3:  35.31...\n\n\n7.7 Adding the numeric precip column\nWe will add the numeric precip3 column to weatherData and call the new column precipNum:\n  weatherData$precipNum = precip3;\n\n\n\n\n\n\nFigure 5: The precipNum column added to weatherData – note the 0.005 in place of NA",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#plotting-rainfall-values",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#plotting-rainfall-values",
    "title": "2-03: Data Types and Data Frames",
    "section": "8 Plotting rainfall values",
    "text": "8 Plotting rainfall values\nWe are going to do some basic plots with the rainfall values.  For all of these plots we are going to plot rainfall vs. the day number (e.g., 1 is Jan 1, 2 is Jan 2, 366 is Dec 31).  We will deal with dates in a later lesson.\n\n8.1 A scatterplot\nThe first plot will be a scatterplot with rainfall (precipNum) on the y-axis and day number on the x-axis.  Since day number is just the row number, we will map the y-axis to a sequence from 1 to the number of rows in weatherData (i.e., 366)\nplot1 = ggplot(data=weatherData ) +\n  geom_point( mapping=aes(x=1:nrow(weatherData),  # 1:366\n                          y=precipNum),\n              color = \"red\") +\n  labs( title=\"Daily Precipitation\",\n        subtitle=\"Lansing, MI -- 2016\",\n        x = \"Day Number\",\n        y = \"Precipitation (inches)\") +\n  theme_bw();\nplot(plot1);\nNote: we could have used 366 instead of nrow(weatherData) but nrow(weatherData) is more robust as it can handle changes to the size of the data frame (e.g., a year that is not a leap year)\n\n\n\n\n\n\nFigure 6: scatterplot of rainfall for every day\n\n\n\n\n\n8.2 Scatterplot with chr values\nGGPlot can also create a scatterplot from the precipitation values that are given in the precip column that is of type chr:\n  plot2 = ggplot(data=weatherData ) +\n    geom_point( mapping=aes(x=1:nrow(weatherData),  \n                            y=precip),  # chr values\n                color = \"red\") +\n    labs( title=\"Daily Precipitation\",\n          subtitle=\"Lansing, MI -- 2016\",\n          x = \"Day Number\",\n          y = \"Precipitation (inches)\") +\n    theme_bw();\n  plot(plot2);\nBut, since precip contains chr/string values (i.e., not numbers), GGPlot will output every unique precip value on the y-axis and put them in “alphabetical” order. This is why T is at the top of the y-axis – T is alphabetically greater than the numbers.\n\n\n\n\n\n\nFigure 7: A scatterplot using character values instead of numeric",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-03_DataTypesAndDateFrames.html#application",
    "href": "lessons/2-03_DataTypesAndDateFrames.html#application",
    "title": "2-03: Data Types and Data Frames",
    "section": "9 Application",
    "text": "9 Application\n1) Answer the following questions in comments at the top of your script:\n\nIn the weatherType column, there are a bunch of days without any conditions.  Would you use NULL or NA to indicate that the lack of conditions can be ignored?  Why? \nWhat happens when you try to sum, using sum(), the following two vectors?  Why?\n\nc(8, 10, 6, NULL, 4)\nc(8, 10, 6, NA, 4)\n\n\n \n2) Find the total amount of snow was for the year and save it to the variable named snowTotal\n\nthe snow column also uses T values, but trace in this case means snowfall between 0 and 0.5 inches\n\n \n3) Find the average snow depth for the year and save it to the variable snowDepthAvg\n \n4) Create a vector with 366 values called seasons and add the vector to a column in the weatherData called season\n\nMarch 21 June 21, and September 21 are approximate dates for the transition of the season – it is OK for this application to be off by a few days\nBut, you need to deal with the fact that the beginning of the year and end of the year are winter days\n \n\n5) Create a vector call daysOfTheWeek (Sun-Mon-Tues-Wed) and add it to the weatherData column\n\nNote: January 1, 2016 was a Friday\n\n \n6) Create a scatterplot with relative humidity on the y-axis and (numeric) precipitation on the x-axis. \n\nColor the points blue and add appropriate labels and titles\n\n \nSave the script as app2-03.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-03: Data Types and Data Frames"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#purpose",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#purpose",
    "title": "2-05: Which and Regular Expressions",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nuse which() on string values\nRegular Expressions to find a basic patterns within a string\nunion() and intersect() to combine conditions",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#script-and-data-for-this-lesson",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#script-and-data-for-this-lesson",
    "title": "2-05: Which and Regular Expressions",
    "section": "2 Script and data for this lesson",
    "text": "2 Script and data for this lesson\nThe script for this lesson can be downloaded here\nThe data for this lesson can be downloaded here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#which-on-string-data",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#which-on-string-data",
    "title": "2-05: Which and Regular Expressions",
    "section": "3 Which on string data",
    "text": "3 Which on string data\nLike last lesson we are going to use the the data from Lansing2016NOAA-3.csv:\nweatherData = read.csv(file=\"data/Lansing2016NOAA-3.csv\");\nIn the last lesson we used which() to find numeric values in a vector that met a specific condition:\nhighPrecip = which(precipNum &gt; 1);  # precip greater than 1\"\nAnd there were 8 days with precipitation greater than 1 inch:\n&gt; highPrecip\n[1]  73  91 225 228 229 273 290 307\n\n3.1 Identifying values using which()\nIn this lesson we will be searching for values that meet a condition within string (chr) columns.\n \nIn weatherData, the string column weatherType contains information about the type of weather that occurred during that day (e.g., Fog, Snow, Rain, etc.) :\n\n\n\n\n\n\nFigure 1: The weatherType column within the weatherData data frame\n\n\n\nWe can use which() to find which values in weatherType are equal to a specific string, for instance, which values are equal to snow, “SN”?\nsnowyDays = which(weatherData$weatherType == \"SN\");\nThe above code:\n\nCycles through each value in the weatherType column \nCheck if the value is equal to “SN”\nCreate a vector that has the index of all the values in the vector equal to “SN”\nSave that vector to snowyDays\n \n\nThe result is a vector, snowyDays, with 11 values, so 11 days exclusively had snow:\nsnowyDays: int [1:11] 3 16 17 29 ...\nThere were many more days with snow but many were not counted in the search because those days had other weather condition.  For instance, the first and fourth rows in Figure 1 had snow (SN) and breeze (BR). We will deal with those situations later in this lesson when we talk about grep() and Regular Expressions.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#using-the-indexed-value-generated-by-which",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#using-the-indexed-value-generated-by-which",
    "title": "2-05: Which and Regular Expressions",
    "section": "4 Using the indexed value generated by which()",
    "text": "4 Using the indexed value generated by which()\nWe can use the vector of indexed values (snowyDays) to index other vectors like avgTemp and avgWind.\n \nLet’s find the temperatures and wind speeds on days that it was snowy\n  snowyDayTemps = weatherData$avgTemp[snowyDays];\n  snowyDayWinds = weatherData$windSpeed[snowyDays];\nsince snowyDays = c(3, 16, 17, 29, 39, 45, 136, 351, 354, 364, 365)\n \navgTemp[snowyDays] is equivalent to avgTemp[c(3, 16, 17, 29, 39, 45, 136, 351, 354, 364, 365)];\nThis gives the temperature on the 11 days indexed in the snowyDays vector\n \navgWind[snowyDays] is equivalent to avgWind[c(3, 16, 17, 29, 39, 45, 136, 351, 354, 364, 365)];\nThis gives the winds on the 11 days indexed in the snowyDays vector\n \nThe average temperatures and average wind speeds for the 11 days with snow were:\n\n\n\n&gt; snowyDayTemps:\n [1] 29 30 18 24 34 9 40 12 11 34 28\n&gt; snowyDayWinds\n [1] 10.0 13.8 15.5 10.7  6.8  8.1 10.9  9.4 11.5 16.7 14.0\n\n\nFigure 2: the temperature and wind speeds on the 11 snowy days\n\n\n\n\n4.1 Multiple conditions on string values\nJust like with if-else conditional statements, we can create more complex conditions by using the and ( & ),  or ( | ),  not ( ! ), and not equal (!=) operators.\n \nLet’s find all days that has rain or snow using the or operator ( | ):\n  rainOrSnow = which(weatherData$weatherType == \"SN\" |\n                     weatherData$weatherType == \"RA\");\nThere were 39 days that had rain or snow.  Since we know 11 of those days had snow, the other 28 must be rain:\n&gt; rainOrSnow\n [1]   3  16  17  29  39  45  69  77  82  87  90 110 120 134 136 137 150 158 165 175\n[21] 178 193 197 211 224 258 264 271 272 281 282 294 304 313 337 351 354 364 365\nNote: these results also do not include the days that had rain along with other conditions.\n\n\n4.2 Inverting logic: the not operator\nWe can reverse the condition to look for days that did not have “RA” nor “SN” using the not ( ! ) operator.\n \nThe original condition was:\nweatherData$weatherType == \"SN\" |  weatherData$weatherType == \"RA\"\nYou can invert a condition using the not operator ( ! ) and parentheses around the original condition:\n«!(»weatherData$weatherType == \"SN\" |  weatherData$weatherType == \"RA\"«)»\nAnd then put the inverted condition into the which() statement.  Here we are saying, “which days did not have (snow or rain)”\n  noRainNorSnow = which(«!(»weatherData$weatherType == \"SN\" |\n                          weatherData$weatherType == \"RA\"«)»);\nAnd we see that noRainNorSnow has 327 values, which is 366-39:\nnoRainNorSnow: int [1:327] 1 2 4 5 6 7 ...\nrainOrSnow:    int [1:39] 3 16 17 29 39 ...\nAn equivalent way to reverse the logic is to say, “which days that did not have snow and days that did not have rain”\n noRainNorSnow2 = which(weatherData$weatherType «!=» \"SN\" «&»\n                        weatherData$weatherType «!=» \"RA\");\nThe result is the same:\nnoRainNorSnow2: int [1:327] 1 2 4 5 6 7 ...\n\n\n4.3 Incorrectly invert logic\nIn this section, we will look at two common ways people incorrectly invert logic. \n\n4.3.1 Forgetting the parenthesis:\nIf you take this condition:\nweatherData$weatherType == \"SN\" |  weatherData$weatherType == \"RA\"\nAnd put a not operator in front without parentheses:\n!weatherData$weatherType == \"SN\" |  weatherData$weatherType == \"RA\"\nThen you have the logic: not SN or rain.\n \nSo, you will get all days that:\n\ndid not have snow or\ndid have rain\n\n\n\n4.3.2 Forgetting to flip the or/and operator\nIf you choose to use the not equal operators on each component of the condition, then you need to flip the operator from or to and (or vice versa).\n \nHere we did not flip the operator and kept the conditional operator or:\nnoRainNorSnow_bad = which(weatherData$weatherType != \"SN\" |\n                          weatherData$weatherType != \"RA\");\nAnd the result is that all 366 values meet the condition:\n\n\n\nnoRainNorSnow_bad: int [1:366] 1 2 3 4 5 6 7 ...\n\n\nFigure 3: all values meet the conditnion of not rain and not snow\n\n\n\nIn the application for this lesson, I will let you explain why saying “not snow or not rain” gives you every value in the column.\n\n\n\n4.4 Conditions from different columns\nWe also can combine conditions from two different columns.  For examples, let’s get all days that were raining and 70 degrees or more:\n  rainAndHighTemps = which(weatherData$weatherType == \"RA\" &\n                           weatherData$avgTemp &gt;= 70);\nThere are 7 days where both these condition (rain and temperatures 70 or more) occurred:\n\n\n\n&gt; rainAndHighTemps\n [1] 150 178 193 197 211 224 264\n\n\nFigure 4: Days with rain and average temperatures at or above 70",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#multiple-conditions-on-multiple-variables",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#multiple-conditions-on-multiple-variables",
    "title": "2-05: Which and Regular Expressions",
    "section": "5 Multiple conditions on multiple variables",
    "text": "5 Multiple conditions on multiple variables\nSimilar to if(), we can use which() to create more complex condition.  The trick is to make sure you have the parentheses correct, because, like Algebra, parentheses determine the order of operations.\n \nSo, let’s say we want days where there was rain or snow and temperatures between 25 and 40:\ncomplexCond = which( (weatherData$weatherType == \"RA\" | \n                      weatherData$weatherType == \"SN\") &\n                     (weatherData$avgTemp &gt;= 25 &\n                      weatherData$avgTemp &lt;= 40) );\nThere were 7 days that meet all the conditions above:\n\n\n\ncomplexCond: int[1:7] 3 16 39 136 337 364 365\n\n\nFigure 5: The results of a more complex condition inside a which() statement\n\n\n\n\n5.1 Combining conditional statements\nFor the above code, we have the inner parentheses with these two conditional statements:\n(weatherData$weatherType == \"RA\" | weatherData$weatherType == \"SN\")\n(weatherData$avgTemp &gt;= 25 & weatherData$avgTemp &lt;= 40)\nAnd an outer parentheses that ands the two conditional statements together:\n«(» (weatherData$weatherType == \"RA\" | weatherData$weatherType == \"SN\") «&»\n  (weatherData$avgTemp &gt;= 25 & weatherData$avgTemp &lt;= 40) «)»\nIn the Console we can break down the steps:\n&gt; which(weatherData$weatherType == \"RA\" | weatherData$weatherType == \"SN\")\n [1]   «3»  «16»  17  29  «39»  45  69  77  82  87  90 110 120 134 «136» 137 150\n[18] 158 165 175 178 193 197 211 224 258 264 271 272 281 282 294 304 313\n[35] «337» 351 354 «364» «365»\n&gt; which(weatherData$avgTemp &gt;= 25 & weatherData$avgTemp &lt;= 40)\n [1]   1   2   «3»   6   7   8   9  10  14  15  «16»  25  26  27  28  30  32\n[18]  33  34  35  36  37  38  «39»  40  47  52  53  54  55  56  57  58  60\n[35]  65  66  78  79  80  81  83  84  85  86  88  89  93  94  95  96  97\n[52]  98  99 100 101 103 «136» 300 301 317 324 325 326 327 328 330 331 332\n[69] 336 «337» 338 339 340 341 342 343 344 346 347 356 357 358 359 360 362\n[86] 363 «364» «365» 366\nAnd see that 3, 16, 39, 136, 337, 364, and 365 are the only indexs values in both conditional statements.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#finding-patterns-within-strings",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#finding-patterns-within-strings",
    "title": "2-05: Which and Regular Expressions",
    "section": "6 Finding patterns within strings",
    "text": "6 Finding patterns within strings\nThe elephant in the room is that we are only capturing days that exclusively had snow or rain using which().\n \nBut we know from looking at the weatherType column (Figure 1) that many values in weatherType have “SN” or “RA” with other weather conditions – and these are not being captured because which() only checks for values that are exactly “SN”.\n \nWe really want every value that contains “SN”.  This cannot be easily done using which() but it can be done easily using grep().\n\n6.1 A quick grep() example\ngrep() is a very powerful tool for finding patterns within strings (the process is known as Regular Expressions, which would take many lessons to properly teach).  In this lesson, we are only using the most basic functionality in grep() which is finding a substring within a string.\n \nLet’s start with this vector:\ngrepTestVec = c(\"one fish\", \"two fish\", \"one llama\", \"two llama\",\n                \"red fish\", \"blue fish\");\ngrep() return the indices of the vectors value that contain the substring specified:\ntest1 = grep(\"two\", grepTestVec);  # values that have the substring \"two\"\ntest2 = grep(\"lla\", grepTestVec);  # values that have the substring \"lla\"\ntest3 = grep(\"fish\", grepTestVec); # values that have the substring \"fish\"\nAnd we can match the index values below with the values in grepTestVec:\ntest1: int [1:2] 2 4\ntest2: int [1:2] 3 4\ntest3: int [1:2] 1 2 5 6\n\n\n6.2 Using grep() to find patterns within a dataframe\nWe are going to use grep() to find the substring (“SN”) contained within a vector of string values (weatherType):\nsnowyDaysGrep = grep(weatherData$weatherType, pattern=\"SN\");\ngrep(),like which(), produces a vector of the index values that meets the condition (i.e., index of the weatherType values that contain “SN”).\n \nAnd we can see there were actually 65 days that had snow – a much more reasonable result for Lansing, Michigan!\nsnowyDaysGrep: int [1:65] 1 3 4 10 11 12 13 14 16 17...\n\n\n6.3 Subsetting vectors\nsnowyDaysGrep is a vector with 65 indexed values, representing the 65 days in Lansing that had snow.\n \nJust like before, we can use the results of a grep() to index another column.  We will use snowyDaysGrep to index the avgTemp and windSpeed columns in weatherData:\nsnowDaysGrepTemp = weatherData$avgTemp[snowyDaysGrep];\nsnowDaysGrepWind = weatherData$windSpeed[snowyDaysGrep];\nAnd we can see the average temperature and wind speeds for the 65 days that had snow:\n&gt; snowDaysGrepTemp\n [1] 26 29 17 27 13 18 15 26 30 18 11 13 17 19 22 36 26 30 24 38 26 26 34 28\n[25] 16 14  9 20 27 20 30 29 34 22 19 18 20 28 34 32 36 28 35 33 28 34 40 40\n[49] 34 33 28 26 23 26 28 18 15 10 12 21 14 11 36 34 28\n&gt; snowDaysGrepWind\n [1] 15.5 10.0  7.7 17.8 12.2 18.2 13.2  5.6 13.8 15.5 13.1  7.6  4.4  5.5\n[15]  6.3 18.2 13.3 14.1 10.7 13.5  7.9  7.3  6.8 12.9 13.8 14.5  8.1  6.9\n[29]  3.8  5.9 18.9 16.5 16.2 13.1  9.7  3.7  2.2  5.4 10.2 10.4 10.9 11.6\n[43] 10.7  7.9  9.4 13.8 10.9 19.2  5.9  8.6 16.7 10.2  8.6 10.3 13.8 10.8\n[57] 16.7 11.3  9.4  4.1  8.1 11.5  7.3 16.7 14.0\nnote: if you want to sort the values, you can use sort(snowDaysGrepWind)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#grep-with-the-or-condition",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#grep-with-the-or-condition",
    "title": "2-05: Which and Regular Expressions",
    "section": "7 grep() with the or condition:",
    "text": "7 grep() with the or condition:\nSimilar to which() statements, we can use the or ( | ) operator to find all values in weatherType that contain either SN or RN:\ndaysWithPrecipGrep = grep(weatherData$weatherType, pattern=\"RA|SN\");\nAnd we get a vector with 179 values in it, representing the 179 days that had rain or snow (or both):\ndaysWithPrecipGrep: int[1:179] 1 3 4 8 9 10 ...\nAn equivalent result can be obtained by getting the grep() results for RA and SN separately and then combining them using union():\nrainyDaysGrep = grep(\"RA\", weatherData$weatherType);\nsnowyDaysGrep = grep(\"SN\", weatherData$weatherType);\ndaysWithPrecipUnion = union(rainyDaysGrep, snowyDaysGrep);\nLooking at the days with rain, snow, and the combination of the two:\nrainyDaysGrep:       int[1:124] 8 9 10 15 25 26 ...\nsnowyDaysGrep:       int[1:65] 1 3 4 10 11 12 13 ...\ndaysWithPrecipUnion: int[1:179] 1 3 4 8 9 10 ...\nNote: the rainy days and snowy days adds up to 189 whereas the union has only 179 days.  This is because there were 10 days that had both rain and snow… like day 10.\n\n7.1 More complex union() scenario\nUsing union() seems more complicated than just using the or operator ( | ) in grep(), but union() allows for more complex situations.\n \nFor instance if we want to combine results from different columns like days that were hazy (HZ) or had temperatures above 85 (maxTemp &gt; 85):\nhazyDays = grep(weatherData$weatherType, pattern=\"HZ\");\nhotDays = which(weatherData$maxTemp &gt; 85);\nhazyOrHotDays = union(hazyDays, hotDays);\nAnd we see there were 44 hazy days, 40 hot days, and 82 days that were hazy or hot (note: the union of hazy and hot days is not quite the addition of the two):\n\n\n\nhazyDays int[1:44] 12 13 14 19 20...\nhotDays: int[1:40] 149 162 163 167...\nhazyOrHotDays: int[1:82] 12 13 14 19...\n\n\nFigure 6: Using union() to combine hazy and hot days\n\n\n\n\n\n7.2 An alternative to & when using grep()\nWith grep() we can find days with rain or snow using the or operator ( | ) but we cannot use grep() to return days with both rain and snow (i.e., there is no & operator in grep())\n#### the and operator does not work in grep()\n# daysWithRainAndSnow = grep(weatherData$weatherType, pattern=\"RN&SN\");\nThe reason for this requires a lengthy explanation of how grep() works (and regular expressions, in general), which is beyond the scope of this class.\n \nWhat we want is the index values that are in both rainyDaysGrep and snowyDaysGrep.\n \nThere is a function for that called intersect().  intersect() is the sibling function to union(), intersect() takes two vectors and produces a vector of values that occur in both the original vectors.\n \nIn this case we will use intersect() on the vectors rainyDaysGrep and snowDaysGrep:\ndaysWithRainAndSnow = intersect(rainyDaysGrep, snowyDaysGrep);\ndaysWithRainAndSnow has 10 values, representing the 10 values that are in both rainyDaysGrep and snowyDaysGrep\n&gt; daysWithRainAndSnow\n [1]  10  26  34  35  84  94  98 101 352 359",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#setdiff-the-closest-to-a-not-operator",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#setdiff-the-closest-to-a-not-operator",
    "title": "2-05: Which and Regular Expressions",
    "section": "8 setdiff() – the closest to a not operator",
    "text": "8 setdiff() – the closest to a not operator\nunion() is functionally similar to the or operator, intersect() is functionally similar to the and operator.\n \nThe equivalent to a not operator is a bit more complex – the function to use is setdiff().\n \nsetdiff() takes two vectors as argument:\n\na vector with all possible values (so, if there are 366 values, then a vector from 1:366)\nthe vector of values to remove from the first vector\n \n\nsetdiff() returns the the values in the first vector that are not in the second vector effectively subtracting out values from the second vector that are in the first vector.\n\n8.1 quick example\nIf the are 10 values in a vector and 4 of them (3,5,6,9) meet a condition:\nmeetsCondition = c(3,5,6,9);\ninvertCondition = setdiff(1:10, meetsCondition);\nAnd we see that invertCondition is all values from 1 to 10 not represented in meetsCondition:\ninvertCondition: int[1:6] 1 2 4 7 8 10\nnote: values in meetsCondition that are not in 1:10 (e.g., 11,12) are ignored.\n\n\n8.2 Example using a column\nIf we want to find the days without rain or snow, we can take the days with rain or snow (daysWithPrecipGrep) and use setDiff() to find the difference between that and a vector with all 366 values:\ndaysWithoutPrecip = setdiff(1:366, daysWithPrecipGrep);\nsetdiff() removes from 1:366 all the index values in daysWithPrecipGrep:\ndaysWithPrecipGrep: int [1:179] 1 3 4 8 9 10 ...\ndaysWithoutPrecip:  int [1:187] 2 5 6 7 22 24 ...\nAdding up the daysWithPrecipGrep (179) and daysWithoutPrecip (187), we get 366 days.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-05_WhichAndRegularExpressions.html#application",
    "href": "lessons/2-05_WhichAndRegularExpressions.html#application",
    "title": "2-05: Which and Regular Expressions",
    "section": "9 Application",
    "text": "9 Application\nA) In comments at the top of your script answer the following:\n\nWhy do all values in the weatherType column meet the condition of not rain or not snow (Figure 3)?\nHow many days are both hazy and hot (Figure 6)?\n\n \nB) Give two ways to change this logic (Figure 4) to rain and temperatures less than 70:\n\none by changing the conditional operator on the temperature\none by adding a not operator\n\nNote: the answer for both will have the same 21 values\n \nC) Use which() to:\n\nfind days that were RA, SN, or HZ with temperatures between 50 and 70\nfind days that were RA or SN, with temperatures between 50 and 70, and wind speed between 10 and 30\n \n\nD) Use grep() (and some of union/intersect/setdiff) to find days with snow (SN) but not blowing snow (BLSN)\n \nE) Challenge: Use grep() to on the precip column in weatherType to (note: precip is a string column):\n\nfind all precipitation values greater than or equal to 1.0 (hint: what is a unique substring for values &gt;= 1)\nfind all precipitation values greater than or equal to 0.8\nfind all days that have precipitation values greater than 0.8 and have maximum temperatures between 70-80\n\nuse which() to find the temperatures\n\n\n \nNote: if you are looking for characters that are not alphanumeric then you might need to set the argument fixed in grep() to TRUE.\n \nSave the script as app2-05.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n9.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-05: Which and Regular Expressions"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#purpose",
    "href": "lessons/2-07_Matrices.html#purpose",
    "title": "2-07: Matrices",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nUsing matrices for 2D data\nperforming math and statistic on a matrix",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#script-for-the-lesson",
    "href": "lessons/2-07_Matrices.html#script-for-the-lesson",
    "title": "2-07: Matrices",
    "section": "2 Script for the lesson",
    "text": "2 Script for the lesson\nThe script for the lesson is here\nThe LansingJanTemps.csv",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#csv-files",
    "href": "lessons/2-07_Matrices.html#csv-files",
    "title": "2-07: Matrices",
    "section": "3 CSV files",
    "text": "3 CSV files\nLet’s first look at the CSV file, LansingJanTemps.csv.  The data in the CSV file was downloaded from the NOAA/NCDC website and contains the high temperature for every day in January from 2011 to 2016.\n \nA CSV file is a text file that can be read by any text editor.  We can look at the csv file by clicking on it in the Files tab of RStudio and choosing View File.  The file will open in RStudio’s file viewer:\n\n\n\n\n\n\nFigure 1: Opening and viewing a CSV file in RStudio\n\n\n\nThe temperature values are in tenths of a Celsius degree and the columns have generic names – we will deal with both of these issues later.\n\n3.1 Saving data to a data frame\nLet’s open the CSV file and save it to a data frame, named lansingJanDF:\nlansingJanDF = read.csv(file = \"data/LansingJanTemps.csv\");\nlansingJanDF is a data frame with 6 columns of January temperatures from the years 2011-2016.  This view of lansingJanDF is just a more structured view of the data from Figure 1.\n\n\n\n\n\n\nFigure 2: Viewing the data frame from the CSV file\n\n\n\n\n\n3.2 Column name change\nLet’s create a copy of the data frame so we can maintain the original data frame while making changes:\nlansingJanDF2 = lansingJanDF;\nWe want to change the column names to something that has the years in it. We can change the name of all six columns at once to the six years 2011-2016 using the sequence 2011:2016:\ncolnames(lansingJanMat2) = 2011:2016;\nBut, it is not recommended to start a column name with a number.  Column names are essentially variable names and variable names cannot start with a number.  R does allow you to start a column name with a number, but there are problems with this that are beyond the scope of this lesson.\n \nTo avoid problems, you should always use variable naming standards for column names in a dataframe even though R does not enforce this.\n \nAs a reminder, the are that variable names :\n\ncan only start with a letter, underscore ( _ ) , or a dot ( . )\n\nremember: most programming language do not accept dots ( . ) in names\n\ncan consist of letters, numbers, underscore ( _ ), or a dot ( . )\ncannot have spaces\ncannot be reserved words (e.g., if, else, TRUE, FALSE, function, for)\n \n\nWe are going to name the columns Jan2011, Jan2012… using paste() to create the six column names:\ncolnames(lansingJanMat2) = paste(\"Jan\", 2011:2016, sep=\"\");\nNote: we needed to set sep=““, otherwise there would be a space in the name\n\n\n\n\n\n\nFigure 3: Changing the column names – make sure column names follow the same rules as variable names",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#data-frames-and-matrices-two-dimensional-data",
    "href": "lessons/2-07_Matrices.html#data-frames-and-matrices-two-dimensional-data",
    "title": "2-07: Matrices",
    "section": "4 Data frames and matrices (two-dimensional data)",
    "text": "4 Data frames and matrices (two-dimensional data)\nA data frame is a two dimensional data structure that is a collection of related vectors (i.e., columns). For instance, the weatherData data frame used in previous lessons had different types of weather data (columns) collected every day (rows).\n \nData frames, by design, have columns that hold different types of data.  The weather data from previous lessons had temperature columns, humidity columns, precipitation columns, etc..\n \nHowever, in this lesson, we have a data frame where all the columns are the same type of value (temperatures) and we will want to perform calculations across rows, columns, and the whole structure.  This cannot be done with a data frame, but it can be done with a matrix.\n \nA matrix is a two-dimensional vector that is similar to a two-dimensional data frame except that all the columns are the same type of value.\n \nWe can convert a data frame directly into a matrix using as.matrix():\nlansingJanMat = as.matrix(lansingJanDF2);\nIn the Environment tab, the matrix is placed in the Data section (like a data frame), but is presented as a two-dimensional vector (31 rows by 6 columns):\nlansingJanMat: num [1:31, 1:6] 122 -39 6 0 -50 -33 ...\nAnd, if you double-click on the matrix, it will show up in a Viewer tab and look like a data frame:\n\n\n\n\n\n\nFigure 4: Matrices and data frame in the Environment – double-clicking on a matrix opens it in a Viewer tab\n\n\n\n\n4.1 Advantages of a matrix\nA matrix has two advantages over a data frame:\n\na matrix allows you to perform calculations across rows and the whole structure\noperations are faster on a matrix than on a data frame\n \n\nIf you are dealing with large data that is all of the same type, then it is best to use a matrix.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#modifying-the-whole-matrix",
    "href": "lessons/2-07_Matrices.html#modifying-the-whole-matrix",
    "title": "2-07: Matrices",
    "section": "5 Modifying the whole matrix",
    "text": "5 Modifying the whole matrix\nThe temperature data in the lansingJanMat is in units of tenths of Celsius (this author does not know why NOAA/NCDC chose to store the data this way).  Let’s convert this to Fahrenheit.\n \nBecause this is a matrix, we can execute mathematical operations on all values at once – just like a vector (remember, a matrix is a two-dimensional vector).\n \nIn order, we will:\n\nchange the units from tenth of a Celsius to Celsius \nconvert the temperatures from Celsius to Fahrenheit\nchange values to two significant digits\n\n\n5.1 Calculations on the whole matrix\nWe are going to perform three operations on the matrix and show the results of the operations on the first 10 values of the matrix.\n \nNote: I create a new matrices to maintain the old versions of the matrix, but this is not necessary – you could keep saving the results to lansingJanMat. \n \nThe first 10 values in the matrix are:\n&gt; lansingJanMat[1:10]\n [1] 122 -39   6   0 -50 -33 -72 -56 -28 -39\n# Step 1) Divide by 10 to get units from tenths of Celsius to Celsius\nlansingJanMat2 = lansingJanMat / 10;\n&gt; lansingJanMat2[1:10]\n [1] 12.2 -3.9  0.6  0.0 -5.0 -3.3 -7.2 -5.6 -2.8 -3.9\n# Step 2)  Converting from Celsius to Fahrenheit\nlansingJanMat3 = (9/5) * lansingJanMat2 + 32;\n&gt; lansingJanMat3[1:10]\n [1] 53.96 24.98 33.08 32.00 23.00 26.06 19.04 21.92 26.96 24.98\n# Step 3) Set the number of significant digits to 2\nlansingJanMat4 = signif(x=lansingJanMat3, digits=2);\n\n\n\n&gt; lansingJanMat4[1:10]\n [1] 54 25 33 32 23 26 19 22 27 25\n\n\nFigure 5: Displaying the first ten temperature values of the 4 matrices\n\n\n\n\n\n\n\n\n\nFigure 6: The final matrix in the Viewer tab\n\n\n\n\n\n5.2 Statistical operation on the whole matrix\nWe can also apply statistical functions to the whole matrix.  For instance, we can find the mean and standard deviation of all values in the matrix:\nmeanAllTemps = mean(lansWeatherMat4);\nsdAllTemps = sd(lansingJanMat4);\n&gt; meanAllTemps\n[1] 29.68495\n&gt; sdAllTemps\n[1] 10.60749",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#subsetting-matrices",
    "href": "lessons/2-07_Matrices.html#subsetting-matrices",
    "title": "2-07: Matrices",
    "section": "6 Subsetting matrices ",
    "text": "6 Subsetting matrices \nIf we just want to work with part of the data in a matrix, then we need to subset the matrix.  Similar to the bracket notation, [x], for one-dimensional vectors, we can use two-dimensional bracket [x,y] notation to subset a matrix.\n \nIn this notation, x represents the row numbers to subset and y represents the column numbers to subset.\n\n6.1 Subset a column in a matrix\nIf x is not given, it means take all rows (i.e., do not subset the rows).  So, the following will find the mean of all rows in column 3 (i.e., all values in the year 2013):\nmeanJan2013 = mean(lansWeatherMat[ ,3]);\n\n\n\n&gt; lansingJanMat4[,3]\n [1] 25 26 29 33 35 35 35 38 45 44 55 58 40 26 29 34 33 35 45 41\n[21] 15 10 17 16 20 27 30 43 57 56 27\n&gt; meanJan2013\n[1] 34.16129\n\n\nFigure 7: Console output for the matrix subsetted by row 3 and the mean of this subset\n\n\n\n\n\n6.2 Subset a row in a matrix\nIf y is not given, it means take all columns (i.e., do not subset the columns).  So, the following will find the mean of all columns in row 17 (i.e., the Jan 17th value for every year):\nmeanJan17 = mean(lansWeatherMat[17,]);\n\n\n\n&gt; lansingJanMat4[17,]\nJan2011 Jan2012 Jan2013 Jan2014 Jan2015 Jan2016 \n     30      40      33      30      45      26 \n&gt; meanJan17\n[1] 34\n\n\nFigure 8: Console output for the matrix subsetted by column 17 and the mean of this subset\n\n\n\n\n\n6.3 Subset both rows and columns in a matrix\nAnd you can use sequences for both x and y to get a two-dimensional subset of the matrix.  The following will get the mean of the 10th through 19th (Jan 10-19) values of the first three years (2011, 2012, 2013):\nmeanJanPart = mean(lansingJanMat4[10:19, 1:3]);\n\n\n\n&gt; lansingJanMat4[10:19, 1:3]\n      Jan2011 Jan2012 Jan2013\n [1,]      25      47      44\n [2,]      26      50      55\n [3,]      27      37      58\n [4,]      25      26      40\n [5,]      23      22      26\n [6,]      26      24      29\n [7,]      18      42      34\n [8,]      30      40      33\n [9,]      34      24      35\n[10,]      22      27      45\n&gt; meanJanPart\n[1] 33.13333\n\n\nFigure 9: Console output for the matrix subsetted by rows 10-19 and columns 1-3, and the mean of this subset\n\n\n\n\n\n6.4 Non-continuous subsetting of rows and column\nFinally, you can create more complicated sequences to subset the matrix.  The following will find the mean of all even days on odd years.\n \nSince the subsetting is getting complex, it is best to first create variables that hold the subset values:\n  evenDays = seq(from=2, to=31, by=2);\n  oddYears = c(1,3,5);  \nand then use the variables in the bracket notation:\nmeanJanEvenOdd = mean(lansingJanMat4[evenDays, oddYears]);\n\n\n\n&gt; lansingJanMat4[evenDays, oddYears]\n      Jan2011 Jan2013 Jan2015\n [1,]      25      26      34\n [2,]      32      33      32\n [3,]      26      35      17\n [4,]      22      38      13\n [5,]      25      44      16\n [6,]      27      58      27\n [7,]      23      26      19\n [8,]      18      34      32\n [9,]      34      35      39\n[10,]      23      41      31\n[11,]      16      10      30\n[12,]      29      16      37\n[13,]      29      27      26\n[14,]      29      43      31\n[15,]      24      56      23\n&gt; meanJanEvenOdd\n[1] 29.13333\n\n\nFigure 10: Console output for the matrix subsetted by even rows and odd columns 1-3, and the mean of this subset",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#reversing-the-matrix-transpose",
    "href": "lessons/2-07_Matrices.html#reversing-the-matrix-transpose",
    "title": "2-07: Matrices",
    "section": "7 Reversing the matrix (transpose)",
    "text": "7 Reversing the matrix (transpose)\nIn the previous examples, the rows represent days and the columns represent years.  We could easily reverse the matrix so that the rows represent the years and the columns represent the days. We do this using the transpose, t(), function:\nlansingJanMat_T = t(lansingJanMat4);\nThe resulting matrix has 6 row and 31 columns with temperature values for the months going horizontally across the matrix instead of vertically down:\n\n\n\n\n\n\nFigure 11: The transpose matrix (reversing the rows and columns)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#statistics-across-all-rows-and-columns",
    "href": "lessons/2-07_Matrices.html#statistics-across-all-rows-and-columns",
    "title": "2-07: Matrices",
    "section": "8 Statistics across all rows and columns",
    "text": "8 Statistics across all rows and columns\nEarlier, we found the mean of a single column of temperature values (Figure 9).  Often, we want to find the mean of every column.  We could just repeat the same line 6 times, once for each column:\nmeanJan2011 = mean(lansWeatherMat[ ,1]);\nmeanJan2012 = mean(lansWeatherMat[ ,2]);\n...\nBut, this is not an efficient way to code and would become more burdensome as the number of columns increases.\n \nThere are two better ways to cycle through each column and get the means:\n\nUse for loops\nUse apply()\n\n\n8.1 For loops\nA for loop can be used to cycle through, and calculate the mean of, each column in the matrix.  Since there are multiple mean values that you are calculating, you need to save the mean values to one vector.\n \nThe vector needs to be created before the for loop and assigned values during the for loop.  After, the for loop the vector will have the same number of values as the matrix has columns (i.e., 6).\n# vector that holds the 6 yearly mean values\nyearlyMean = c();\n\n# cycle through the six column and find the mean of the temperature values\nfor(i in 1:6) \n{\n  # get the mean of all values in column i and save it to yearlyMean[i]\n  yearlyMean[i] = mean(lansingJanMat4[,i]);\n}\nThe yearlyMean vector has 6 values, representing the mean for each of the 6 years:\n&gt; yearlyMean\n[1] 25.61290 35.77419 34.16129 23.36774 27.45161 31.74194\n\n\n8.2 apply()\napply() is a useful, if somewhat archaic, function in base R that allows you to apply a statistical or mathematical function for every row or column in a matrix.\n \napply() takes three arguments:\n\nthe matrix you want to perform the function on\nMARGIN: a number indicating whether you want to perform the action on rows or columns\n\n1 means all rows, 2 means all columns\n\nFUN: the function to apply\n\n \nSo, to get the mean of all columns in the lansingJanMat4 matrix:\n  yearlyMean2 = apply(lansingJanMat4, MARGIN=2, FUN=mean);\nAnd, yearlyMean2 is a vector with 6 value, the same as yearlyMean above.\n&gt; yearlyMean2\n Jan2011  Jan2012  Jan2013  Jan2014  Jan2015  Jan2016 \n25.61290 35.77419 34.16129 23.36774 27.45161 31.74194 \nyearlyMean2 is formatted differently than yearlyMean – yearlyMean2 is a named variable.  The distinction is something we will look more into in the lesson on Objects in R.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#saving-the-matrix",
    "href": "lessons/2-07_Matrices.html#saving-the-matrix",
    "title": "2-07: Matrices",
    "section": "9 Saving the matrix",
    "text": "9 Saving the matrix\nWe are going to save lansingJanMat4 to a CSV files so we can use it in the next lesson and avoid the hassle of reformatting the original CSV file:\nwrite.csv(x=lansWeatherMat, file = \"data/LansingJanTempsFixed.csv\",    \n          row.names = FALSE);\nThis will put a CSV file named LansingJanTempsFixed.csv in the data folder of your Project Folder.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#application",
    "href": "lessons/2-07_Matrices.html#application",
    "title": "2-07: Matrices",
    "section": "10 Application",
    "text": "10 Application\n1) You are given a data frame with three columns:\n\naverage temperature\nmaximum temperature\nminimum temperature\n \n\nIs it best to convert the data frame into matrix?  In comments in your application script give 1 reason why it is best to convert and one reason why it is not.\n \n2) Find:\n\nthe minimum (min()) temperature value in January 2013\nthe maximum (max()) temperature value in January 2013\nthe minimum (min()) temperature value on January 14th\nthe maximum (min()) temperature value in January 14th\n \n\n3) Using for loops, find the mean value for each day in January (i.e., mean of the rows)\n \n4) Using apply(), find the mean value for each day in January (i.e., mean of the rows)\n \n5) Find the mean temperature of every 4th day in the years 2011, 2014, and 2016.\n \n6) Convert the temperature matrix so that it show how many degrees the temperature was above or below freezing on the Fahrenheit scale.  So, 25 would become -7,  and 60 would become 38.\n \nSave the script as app2-07.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n10.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-07_Matrices.html#extension-dataframes-and-tibbles",
    "href": "lessons/2-07_Matrices.html#extension-dataframes-and-tibbles",
    "title": "2-07: Matrices",
    "section": "11 Extension: dataframes and tibbles",
    "text": "11 Extension: dataframes and tibbles\nIn March 2019, the line of code to get a column of temperature values from the lansWeather11Data dataframe (and the other 5 years) changed from\nlansWeather11Val = lansWeather11Data [, \"value\"];\nto\nlansWeather11Val = lansWeather11Data$value;\nThe reason for this change is that the NOAA/NCDC database starting sending data in tibbles instead of dataframes.  Tibbles are designed to be a more modern take on the dataframe, basically taking the lessons from decades on dataframe usage to create a better dataframe.\n \nTibbles are essentially the tidyverse version of a data frame and they supposedly improve on the data frame.\n \nBut, one difference is that in a data frame the three following lines all function exactly the same – they each take the column value from the data frame lw11Data and save it to a vector called temps:\ntemps=lw11Data$value\ntemps=lw11Data[, \"value\"]\ntemps=lw11Data[[\"value\"]]\nHowever, in a tibble, the following line saves the column value into a new 1 column tibble called temps.\ntemps=lw11Data[,\"value\"]\nIn other words, temps is not a vector, hence the error.\n \nThese two lines work the same in tibbles and data frames:\ntemps=lw11Data$value\ntemps=lw11Data[[“value”]]",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-07: Matrices"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#purpose",
    "href": "lessons/2-09_Stacking_Mapping.html#purpose",
    "title": "2-09: Stacking and Mapping",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nstacking dataframe\ncreating line plots and box plots\nmapping values other than x and y\ncreating a List object",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#script-and-data-for-this-lesson",
    "href": "lessons/2-09_Stacking_Mapping.html#script-and-data-for-this-lesson",
    "title": "2-09: Stacking and Mapping",
    "section": "2 Script and data for this lesson",
    "text": "2 Script and data for this lesson\nThe script for the lesson is here\nData for the lesson: LansingJanTempsFixed.csv",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#ggplot-mapping",
    "href": "lessons/2-09_Stacking_Mapping.html#ggplot-mapping",
    "title": "2-09: Stacking and Mapping",
    "section": "3 GGPlot mapping",
    "text": "3 GGPlot mapping\nThis lesson is designed to give an overview of the many issues that occur when you are creating plots in GGPlot and some of the fixes. There is the huge topic of mapping in GGPlot that we use in this lesson, but do not have time to fully explain (we go into much more detail in our dedicated GGPlot class…).  Mapping is how you relate data in a data frame to a visual aspect of a plot.  We have already mapped data in a data frame to the x and y axis of a plot – but, you can map many other visual aspects to data like size, shape, and, in this lesson, color.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#reading-in-the-data-frame",
    "href": "lessons/2-09_Stacking_Mapping.html#reading-in-the-data-frame",
    "title": "2-09: Stacking and Mapping",
    "section": "4 Reading in the data frame",
    "text": "4 Reading in the data frame\nWe will be using the data from lansingJanTempsFixed.csv that has 6 years of January temperatures in Fahrenheit.  First we need to read in the file, lansJanTempsFixed.csv, and save the temperature data to a data frame:\nlansJanTempsDF = read.csv(file = \"data/lansingJanTempsFixed.csv\");",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#line-plots",
    "href": "lessons/2-09_Stacking_Mapping.html#line-plots",
    "title": "2-09: Stacking and Mapping",
    "section": "5 Line Plots",
    "text": "5 Line Plots\nWe are going to go over the multiple ways in GGPlot to make a line plot for each of the 6 temperature column in one canvas area.  The ggplot component that creates a line plot is geom_line().\n \nThe simplest way to do it is to create six geom_line() components – one for each column in the data frame:\nplot1 = ggplot( data=(lansJanTempsDF), \n                «mapping = aes(x=1:31)») + \n  geom_line( mapping=aes(y=Jan2011),\n             color = \"red\") +\n  geom_line( mapping=aes(y=Jan2012),\n             color = \"green\") +\n  geom_line( mapping=aes(y=Jan2013),\n             color = \"orange\") +\n  geom_line( mapping=aes(y=Jan2014),\n             color = \"blue\") +\n  geom_line( mapping=aes(y=Jan2015),\n             color = \"purple\") +\n  geom_line( mapping=aes(y=Jan2016),\n             color = \"black\") +\n  labs( title=\"January Temperature\",\n        subtitle=\"Lansing, MI -- 2011-2016\",\n        x = \"January Days\",\n        y = \"temperature (F)\") +\n  theme_bw();\nplot(plot1);\nSince the x-axis gets mapped to the same date values (1 to 31) for each line plot, we can place the x mapping in ggplot() call.  This makes the x mapping of 1:31 universal for all components in the canvas area.\n \nEach geom_line component is also customized with a color subcomponent.\n\n\n\n\n\n\nFigure 1: A line plot for the six temperature columns",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#adding-a-legend",
    "href": "lessons/2-09_Stacking_Mapping.html#adding-a-legend",
    "title": "2-09: Stacking and Mapping",
    "section": "6 Adding a legend",
    "text": "6 Adding a legend\nThe problem with Figure 1 is that the individual line plots are not labelled. We would like to add a legend to the plot that maps the color to the year and adding a legend in GGPlot is awkward.  Generally speaking GGPlot will put a legend on the plot when something is mapped other than x or y.  We are going to map color.  To do this, we move color from being a subcomponent of the geom_line to being a mapped element of the geom_line.\nplot2 = ggplot( data=(lansJanTempsDF), \n                mapping = aes(x=1:31)) +  \n  geom_line( mapping=aes(y=Jan2011, color = \"Jan2011\") ) +\n  geom_line( mapping=aes(y=Jan2012, color = \"Jan2012\") ) +\n  geom_line( mapping=aes(y=Jan2013, color = \"Jan2013\") ) +\n  geom_line( mapping=aes(y=Jan2014, color = \"Jan2014\") ) +\n  geom_line( mapping=aes(y=Jan2015, color = \"Jan2015\") ) +\n  geom_line( mapping=aes(y=Jan2016, color = \"Jan2016\") ) +\n  labs( title=\"January Temperature\",\n        subtitle=\"Lansing, MI -- 2011-2016\",\n        x = \"January Days\",\n        y = \"temperature (F)\") +\n  theme_bw();\nplot(plot2);\nIn this plot, we moved color to the mapping of the geom_line and set color to the text we want displayed in the legend.  This solution adds a legend with the text but the line colors are chosen by GGPlot.  Note: There is a way to customize these color but that is beyond the scope of this class.\n\n\n\n\n\n\nFigure 2: Line plots with a legend – note that the legend text matches the color mappings",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#stacking-the-data-frame",
    "href": "lessons/2-09_Stacking_Mapping.html#stacking-the-data-frame",
    "title": "2-09: Stacking and Mapping",
    "section": "7 Stacking the data frame",
    "text": "7 Stacking the data frame\nThe most common (and pretty ugly) technique used to plot multiple line plots on one canvas is to create a new data frame that has all the data you want to plot in two columns – this process is often called melting or stacking the data frame.\n \nWe can use stack() to create a stacked data frame:\nstackedDF = stack(lansJanTempsDF);\nThe stacked data frame has the same data as the original data frame but everything is put in two columns:\n\n\n\n\n\n\nFigure 3: A stacked dataframe of the six years of temperature data put into two columns\n\n\n\nThe stacked data frame has 186 rows (31 days * 6 years) and two columns:\n\ncolumn 1: combined the 6 temperature columns into one column called values\ncolumn 2: contains the names of the six temperature columns (2011 to 2016) called ind\n \n\nThe 6 years of data are now stacked on top of each-other with the first 31 rows containing values from 2011, the next 31 rows containing values from 2012, etc…  The ind columns give the year the temperatures came from.\n\n7.1 A note from the author about stacked data frame\nThis author considers stacking data frames to be a bad programming practice but this practice is widely reinforced by R.  The reason stacking a data frame is bad is you are restructuring the data frame to meet the needs of a function.  But, the data frame is an object that should remain fixed.  The better practice is to code functions that match the structure of the data frame.  This is not a difficult task, but, unfortunately, this is not how R operates and there is no good way to get around stacking data frames.\n\n\n7.2 Plotting the stacked data frame\nWith the stacked data frame, we only need one geom_line component to plot all 6 lines.  This works because of the color mapping.  The color mapping tells GGPlot to create a distinct line for each different value in the ind column – and set each to a different color.  The ind column has 6 different value – the 6 column names from the original data frame (Jan2011, Jan2012,…).\n \nThe x-axis represents the days from 1 to 31.  We have 186 rows but every 31 rows represents a new line plot (31 * 6 = 186).  So, we want to repeat the values 1 to 31 six times.\n \nThe y mapping is the temperature values from the original data frame put into one long values column.\nplot3 = ggplot( data=(stackedDF)) +  \n  geom_line( mapping=«aes(x=rep(1:31, times=6)», y=values, color=ind) ) +\n  labs( title=\"January Temperature\",\n        subtitle=\"Lansing, MI -- 2011-2016\",\n        x = \"January Days\",\n        y = \"temperature (F)\") +\n  theme_bw();\nplot(plot3);\n\n\n\n\n\n\nFigure 4: Plotting using a stacked dataframe",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#using-for-loops-to-plot-6-columns",
    "href": "lessons/2-09_Stacking_Mapping.html#using-for-loops-to-plot-6-columns",
    "title": "2-09: Stacking and Mapping",
    "section": "8 Using for loops to plot 6 columns",
    "text": "8 Using for loops to plot 6 columns\nI consider using for loops to be the most robust solution because it gives you more control over what to plot and it maintains the integrity of the original data frame.  It is also probably the most difficult method:\n  plot4 = ggplot( data=(lansJanTempsDF));  # create a canvas\n  for(i in 1:ncol(lansJanTempsDF))         # add plots to canvas one at a time\n  {\n    # replace i by with !!(i) -- avoids Lazy Evaluation\n    «plot4 = plot4» + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                             y=lansJanTempsDF[,«!!(i)»], \n                                             color=colnames(lansJanTempsDF)[«!!(i)»]) )\n  }\n  # add the labels and theme to the canvas\n  «plot4 = plot4» + labs( title=\"January Temperature\",\n          subtitle=\"Lansing, MI -- 2011-2016\",\n          x = \"January Days\",\n          y = \"temperature (F)\") +\n  theme_bw();\n  plot(plot4);\nIn this example, the for loop adds the six plot components to the plot4 canvas one at a time.  When mapping in a for loop, you need to replace the index variable, in this case i, with !!(i).  The reason is here: Extension: Lazy Evaluation\n \nAfter the plot components are added, we then add the labels and theme to plot4.\n\n\n\n\n\n\nFigure 5: Using for loops to plot 6 column – this authors believes this is the most robust solution",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#unstacking-the-data-frame",
    "href": "lessons/2-09_Stacking_Mapping.html#unstacking-the-data-frame",
    "title": "2-09: Stacking and Mapping",
    "section": "9 Unstacking the data frame",
    "text": "9 Unstacking the data frame\nYou can take a stacked data frame and return it to original state using unstack():\norigDF = unstack(stackedDF);\nAnd origDF looks just like the original lansJanTempDF\n\n\n\n\n\n\nFigure 6: Unstacking a dataframe return you to the original dataframe\n\n\n\n \nNote: The stacked version of a dataframe is often called long format and the original dataframe called wide format.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#boxplots",
    "href": "lessons/2-09_Stacking_Mapping.html#boxplots",
    "title": "2-09: Stacking and Mapping",
    "section": "10 Boxplots",
    "text": "10 Boxplots\nA good way to visually compare the six years of January temperatures is to use a boxplot.  In GGPlot, the component to use is geom_boxplot.   For our first attempt, we will just create two boxes representing the columns Jan2011 and Jan2012.\n \nLike all plotting components in GGPlot, geom_boxplot needs to be mapped.  The y-axis represents the temperatures so we can map y to the columns, Jan2011 in one box and Jan2012 in the other.\n \nWe also need to map x to something otherwise the two boxplots will appear right on top of each other (try it!). We can start by mapping the boxplot to the years they represent:\nplot5 = ggplot(data=lansJanTempsDF) +\n  geom_boxplot(mapping=aes(x=2011, y=Jan2011)) +\n  geom_boxplot(mapping=aes(x=2012, y=Jan2012)) +\n  theme_bw();\nplot(plot5);  \nThis code successfully creates two boxplots but the x-axis is a bit weird:\n\n\n\n\n\n\nFigure 7: The boxes for January temperatures in 2011 and 2012\n\n\n\n \nBecause we used numbers to map the x-axis, GGPlot assumed a continuous and numeric x-axis.  But, the x-axis in a boxplot is really a discrete axis – we are not plotting value in between 2011 and 2012.  If we want a discrete axis, then we need to put the years in quotes (i.e., make the year a string value):\n  plot6 = ggplot(data=lansJanTempsDF) +\n    geom_boxplot(mapping=aes(«x=\"2011\"», y=Jan2011)) +\n    geom_boxplot(mapping=aes(«x=\"2012\"», y=Jan2012)) +\n    theme_bw();\n  plot(plot6);\nNow, we have a discrete x-axis:\n\n\n\n\n\n\nFigure 8: The same boxplots with a discrete x-axis",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#box-plots-using-the-stacked-dataframe",
    "href": "lessons/2-09_Stacking_Mapping.html#box-plots-using-the-stacked-dataframe",
    "title": "2-09: Stacking and Mapping",
    "section": "11 Box Plots using the stacked dataframe",
    "text": "11 Box Plots using the stacked dataframe\nJust like with lines plots, there is no great way to create boxes from multiple columns in a dataframe.  We could plot all six columns by creating six geom_boxplot components, one for each year.  But, in programming, you generally do not want to repeat code – this would get messy if there were 20 columns.\n \nThe most common technique used for plotting multiple columns is to use a stacked dataframe.\n \nUsing the stacked dataframe, we can plot all 6 years using one geom_boxplot component.  The works by mapping x to the ind column (which has the years) and mapping y to the values column (which has all the temperature values).\nplot7 = ggplot(data=stackedDF) +\n  geom_boxplot(mapping=aes(x=ind, y=values)) +\n  theme_bw();\nplot(plot7);\nThe x-axis of the boxplot is labelled with the names of the columns and the y-axis has the box for each year:\n\n\n\n\n\n\nFigure 9: Boxes for all six columns using the stacked data frame",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#stacking-a-subset-of-the-columns",
    "href": "lessons/2-09_Stacking_Mapping.html#stacking-a-subset-of-the-columns",
    "title": "2-09: Stacking and Mapping",
    "section": "12 Stacking a subset of the columns",
    "text": "12 Stacking a subset of the columns\nWe might not want all of the data from the original dataframe. We can create a stacked dataframe that only has a subset of the columns from the original data frame.\n \nThis stacked dataframe only has the values from 2 columns, the3rd and 6th (2013 and 2016– 62 values in all):\nstackedDF2 = stack(lansJanTempsDF[,c(3,6)]); # 2013 and 2016\nAnd this stacked dataframe has the values from 4 columns: the1st, 2nd, 5th, and 6th (2011, 2012, 2015, & 2016 – 124 values in all):\nstackedDF3 = stack(lansJanTempsDF[,c(1,2,5,6)]); # 2011, 2012, 2015, & 2016\nIn the Environment tab we see the two new stacked dataframes, both with 2 columns (values and ind) and 62 values (for two Januaries) and 124 values (for four Januaries)\n🞃 stackedDF2:   62 obs. of 2 variables\n    $ values: num 25 26 29 33 35 35 ...\n    $ ind    :  Factor w/ 2 levels \"Jan2013\",...\n🞃 stackedDF3:   124 obs. of 4 variables\n    $ values: num 54 25 33 32 23 ...\n    $ ind    :  Factor w/ 4 levels \"Jan2011\",...\n\n12.1 Plotting the subset stacked dataframe\nWe can plot the four boxes from dataframe stackedDF3 just like we plotting all six boxes using stackedDF:\nplot8 = ggplot(data=«stackedDF3») +\n  geom_boxplot(mapping=aes(x=ind, y=values)) +\n  theme_bw();\nplot(plot8);\n\n\n\nPlotting boxes from a stacked dataframe that has been subsetted\n\n\n\n\n12.2 Plotting a subset using for loops\nAgain, this author believes the most robust way to plot the subset data is to use for loop.  Once again, this allows you to work with the original data frame – there is no need to create a stacked data frame.\nplot9 = ggplot( data=(lansJanTempsDF)); \nfor(i in «c(1,2,5,6)»)   # cycle through the four columns\n{\n  ## map the column names to x and the column values to y\n  plot9 = plot9 + geom_boxplot(mapping=aes(x=colnames(lansJanTempsDF)[!!(i)], \n                                            y=lansJanTempsDF[,!!(i)] ))\n}\nplot9 = plot9 + theme_bw();\nplot(plot9);\nIn this code,\n\nthe for loops only cycles through the four columns we want to plot c(1,2,5,6). \nx is mapped to the subsetted column name\ny is mapped to the subsetted column values\n \n\n\n\n\n\n\n\nFigure 10: Using for loops to create a boxplot of four of the columns from the temperature data frame",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#saving-data-frames-to-one-object",
    "href": "lessons/2-09_Stacking_Mapping.html#saving-data-frames-to-one-object",
    "title": "2-09: Stacking and Mapping",
    "section": "13 Saving data frames to one object",
    "text": "13 Saving data frames to one object\nIn this lesson, we created four data frames:\n\nlansJanTempsDF: the original data frame\nstackedDF: a stacked version of the full data frame\nstackedDF2: a stacked version of columns 3 and 6 only\nstackedDF3: a stacked version of columns 1, 3, 5, and 6\n \n\nWe are going to use these data frames in the next lesson.  In the next lesson, we could just reopen the lansingJanTempsFixed.csv file, save the data to a data frame and then create the stacked dataframes.  But, since we have already done that work, it would be easier to pass the data frames from this lesson to the next lesson.\n \nWe will create one object that holds all four data frame using list().  The object is a List object (we will be talking a lot more about List object in the next few lessons):\ntemperatureDFs= list(\"origDF\" = lansJanTempsDF,\n                     \"stackedDF\" = stackedDF,\n                     \"stackDF_3_6\" = stackedDF2,\n                     \"stackedDF_1_2_5_6\" = stackedDF3);\nThe value in quotes is the name of the object – you can choose the name but you should use variable naming conventions.\n \ntemperatureDFs appear in the Environment as a List object with four data frames inside it.  We can view the data frames in the list by clicking on the arrow in the Environment tab or double-clicking on temperatureDFs to see it in a viewer tab:\n\n\n\n\n\n\nFigure 11: The List object in the Environment and the viewer tab\n\n\n\n\n13.1 Saving the List object to a file\nWe want to use the List object with four data frames in the next lesson.  To do this, we need to save the List to a file – a file we will open in the next lesson:\nsave(temperatureDFs, file = \"data/tempDFs.rdata\");\nThere should now be a file named tempDFs.rdata in the data folder of your Project that contains temperatureDFs.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#application",
    "href": "lessons/2-09_Stacking_Mapping.html#application",
    "title": "2-09: Stacking and Mapping",
    "section": "14 Application",
    "text": "14 Application\nA) Open the file LansingNOAA2016.csv and save the contents of the file to a data frame named weatherData\n \nB) Create a stacked data frame named stackedWD that only contains the three temperature columns from weatherData (maxTemp, avgTemp, and minTemp). \n\nstackedWD will have 2 columns (values and ind) and 1098 rows (366 * 3).\n \n\nC) Create six GGPlot canvases, the individual canvases will contain:\n\nThree lines plots (maxTemp, avgTemp, and minTemp) using weatherData and three geom_line components – the method used in Figure 1\nThree lines plots (maxTemp, avgTemp, and minTemp) using stackedWD and one geom_line component.\nThree lines plots (maxTemp, avgTemp, and minTemp) using weatherData and a for loop.\nThree box plots (maxTemp, avgTemp, and minTemp) using weatherData and three geom_boxplot components\nThree box plots (maxTemp, avgTemp, and minTemp) using stackedWD and one geom_boxplot component.\nThree box plots (maxTemp, avgTemp, and minTemp) using weatherData and a for loop.\n \n\n \nSave the script as app2-09.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n14.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-09_Stacking_Mapping.html#extension-lazy-evaluation",
    "href": "lessons/2-09_Stacking_Mapping.html#extension-lazy-evaluation",
    "title": "2-09: Stacking and Mapping",
    "section": "15 Extension: Lazy Evaluation",
    "text": "15 Extension: Lazy Evaluation\nThis is probably the one programming topic that has caused the most agony in this authors life as it is unintuitive and happens unexpectedly in many programming languages…\n \nThere are 7 columns in lansJanTempsDF, which means the for loop will cycle 7 times. Each time with a different value for i (1, 2, 3, 4, 5, 6, and 7).\nfor(i in 1:ncol(lansJanTempsDF))         # add plots to canvas one at a time\n{\n  plot4 = plot4 + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                         y=lansJanTempsDF[,i], \n                                         color=colnames(lansJanTempsDF)[i]) )\n}\nHowever, if you execute the code above you will only see one plot – the plot for the seventh cycle (when i=7). Actually, the seventh plot got plotted seven times but they overlap each other so you only see one.\n \nThe reason this happens is that R, in the background, will first stack up the code from all seven cycles of the for loop like this:\nplot4 = plot4 + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                         y=lansJanTempsDF[,«i»], \n                                         color=colnames(lansJanTempsDF)[«i»])\nplot4 = plot4 + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                         y=lansJanTempsDF[,«i»], \n                                         color=colnames(lansJanTempsDF)[«i»])\nplot4 = plot4 + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                         y=lansJanTempsDF[,«i»], \n                                         color=colnames(lansJanTempsDF)[«i»])\n... (4 more) ...\nAnd then execute each command in the stack. This happens all the time when programming for loops and it is normally not an issue. Except, in this case, R does not realize that i is the index variable. R assumes that i=7 because that is the value of i at the end of the for loop (i.e., after the seventh cycle). So, R replaces i with 7 for every command. This is called Lazy Evaluation and I cannot explain why it happens here, but I can say that I have experienced it many times in many programming languages in my career.\n \n!!() is a function that forces R to immediately evaluate what is inside the parentheses (i.e., before R stacks the commands). This means the stacked commands will look like this and execute properly:\nplot4 = plot4 + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                         y=lansJanTempsDF[,«1»], \n                                         color=colnames(lansJanTempsDF)[«1»])\nplot4 = plot4 + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                         y=lansJanTempsDF[,«2»], \n                                         color=colnames(lansJanTempsDF)[«2»])\nplot4 = plot4 + geom_line( mapping=aes(x=1:nrow(lansJanTempsDF), \n                                         y=lansJanTempsDF[,«3»], \n                                         color=colnames(lansJanTempsDF)[«3»])\n... (4 more) ...",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-09: Stacking and Mapping"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#purpose",
    "href": "lessons/2-11_Objects_Attributes.html#purpose",
    "title": "2-11: Objects and Attributes",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nDistinguish between atomic vectors and Lists\nShow the different types of vectors\nApply attributes to a vector: names, dimensions, and class\nSubsetting a vector",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#script-for-this-lesson",
    "href": "lessons/2-11_Objects_Attributes.html#script-for-this-lesson",
    "title": "2-11: Objects and Attributes",
    "section": "2 Script for this lesson",
    "text": "2 Script for this lesson\nThe script for the lesson is here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#terminology",
    "href": "lessons/2-11_Objects_Attributes.html#terminology",
    "title": "2-11: Objects and Attributes",
    "section": "3 Terminology",
    "text": "3 Terminology\nThis lesson requires the use of terminology that has been inconsistently used in R or has morphed in meaning throughout the years, so you will find different definitions online.  In general, I will be using the terminology from the 2nd edition of Hadley Wickham’s Advanced R book and mention places where there is commonly used terminology that is different.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#objects-and-variables",
    "href": "lessons/2-11_Objects_Attributes.html#objects-and-variables",
    "title": "2-11: Objects and Attributes",
    "section": "4 Objects and Variables",
    "text": "4 Objects and Variables\nIn the programming world, anything stored in memory that has a value (or multiple values) associated with it is called a variable.  This terms gets a bit confusing because values that do not change are still called variables (sometimes called constant variables).  Also, variables has different meanings in different fields from mathematics to science to statistics.  Perhaps, for this reason, R tends to use the term object to define anything that has a name and stores values. That means that, in R, everything in the Environment tab in RStudio is an object.\n \nBroadly speaking, in R there are two types of objects: Atomic Vectors (covered in this lesson) and Lists (covered in the next lesson). \n\n4.1 Atomic vectors and Lists\nAtomic vectors are objects that hold values of the same type (e.g., numeric, string).  In other words, atomic vectors are just vectors. However, in R, you will get often get error messages that refer to an “atomic vector” (Figure 6).\n \nAnything you create with c() is an atomic vector and atomic vectors can have dimensions – a 2D atomic vector is called a matrix and a 3D atomic vector is called an array.\n\n\n4.2 Atomic vectors vs List\nWhereas atomic vectors hold values, a List is an object that holds other objects – including other Lists.\n \nA data frame is an example of a List where each column is an atomic vector – and each column has the same number of values.\n\n\n4.3 Folder and file analogy for Lists and atomic vectors\nLists and Atomic Vectors functionally play the same role as folder and files on your computer.  Folders are used to create a tree-like structure for information on your computer. Folders contain folders and files (the tree-like structure), folders do not directly contain information.  It is the files that contains the information – and files are always at the end of the tree (a file cannot contain another folder or file).\n \nLists are the folders of the R world – they create a tree-like structure for information.  Lists can contain other Lists or Atomic Vector.  The Atomic Vector are the files – they contain information and are always at the end of the tree (Atomic Vector cannot contain Lists nor other atomic vectors).\n \nA data frame is a type of List (folder) that contains multiple columns/Atomic Vectors (files) of the same size.\n \nNote: Atomic vectors are often referred to as homogeneous objects and Lists are often referred to as heterogeneous objects, but I believe these terms are not helpful as they create a false distinction between Lists and atomic vectors.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#the-simplest-object-in-r-the-vector",
    "href": "lessons/2-11_Objects_Attributes.html#the-simplest-object-in-r-the-vector",
    "title": "2-11: Objects and Attributes",
    "section": "5 The simplest object in R: the vector",
    "text": "5 The simplest object in R: the vector\nBecause R is a programming language designed to work with data, the vector represents the most basic object in R.  Note: This is different from most programming languages where a single named value is the most basic object.\n \nA vector is a named object that hold values of the same type (or class) – usually strings or numeric.\n \nEven a single value is put into a vector.  Setting a variable to one value creates a one-value vector:\ntemperature = 80; # a vector, temperature, with one value, 80\nThe fact that temperature is a vector with one value is not shown in the Environment but it is shown in the Console with the [1]:\n&gt; temperature\n[1] 80\nThis code creates a vector named JulyTemps with eight numeric values:\nJulyTemps = c(90, 88, 86, 77,81, 83, 80, 80);\nAnd, the Environment shows that it is a numeric (num) vector with eight values [1:8]:\nJulyTemps num [1:8] 90 88 86 ...\n\n5.1 Types of vector\nThere are six basic types/classes of vectors in R:\n\ncharacters (strings)\nnumeric (decimal numbers)\nintegers (numbers without decimals)\ncomplex (numbers with real and imaginary parts – these are not covered in this class)\nBoolean/logical (TRUE/FALSE values)\nraw (hold bytes – rarely used and are not covered in this class)\n \n\nWe have mentioned character and numeric vectors multiple times in previous lessons.  We are going to look a little deeper into integer and Boolean vectors.\n\n\n5.2 Integer vectors\nInteger vectors can be useful when you need counting values because integer values take up less space in memory and can be processed faster than numeric (i.e., decimal) vectors.\n \nThe issue is that, R will often coerce integer vectors to numeric vectors, effectively taking away the memory and speed advantages.\n \nLet’s create an integer vector:\nintValues = as.integer(c(3,4,5));\nAnd then add 1 :\nintValues2 = intValues + 1;\nIn the Environment we see that intValues is an integer vector but intValues2 is numeric:\nintValues:    int [1:3] 3 4 5\nintValues2:   num [1:3] 4 5 6\nIf we want the results to be an integer, then we need to declare 1 as an integer:\nintValues3 = intValues + as.integer(1);\nNow, R will see the results as integers:\nintValues3: int [1:3] 4 5 6\nExtension: rounding functions in R\n\n\n5.3 A Boolean/logical vector (TRUE/FALSE values)\nWe have not talked much about Boolean vectors but they are useful in programming because they are fast as they only have two possible values: TRUE and FALSE.  Note: It is bad programming practice (and potentially dangerous) to use T and F to represent TRUE and FALSE.\n \nThere are two general ways to create a Boolean vector: manually or with a conditional statement\n\n5.3.1 Manually create a Boolean vector\nWe can use c() to create a vector with Boolean values.  Let’s create a vector that tells whether it rained on the eight days in JulyTemps:\nrainyDaysInJuly = c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE);\nIn the Environment, rainyDaysInJuly is given as a logi, which stands for logical – which is just another name for Boolean:\nrainyDaysInJuly: logi [1:8] FALSE FALSE TRUE ...\nand we can check which values are TRUE using which():\nwhich(rainyDaysInJuly)\n[1] 3 5 6\n\n\n5.3.2 Conditional statements create a Boolean vector\nA conditional statement always creates a Boolean vector.  We typically used conditional statements in if() statements:\nfor(i in 1:length(JulyTemps))\n{\n  # Output Boolean value instead of executing the if() statement\n  #  if(JulyTemps[i] &gt; 85)\n  cat(\"day\", i, (JulyTemps[i] &gt; 85), \"\\n\");\n}    \nThe output from the above for loop is:\nday 1 TRUE \nday 2 TRUE \nday 3 TRUE \nday 4 FALSE \nday 5 FALSE \nday 6 FALSE \nday 7 FALSE \nday 8 FALSE \nThis means that the first three days in JulyTemps were more than 85, the rest were less than or equal to 85.\n \nWe could also save Boolean results to a vector.  (JulyTemps &gt; 85) instructs R to check the 8 values in JulyTemps against the number 85:\nhotterThan85 = (JulyTemps &gt; 85);\nAnd the answer is given as a Boolean vector:\n&gt; hotterThan85\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#attributes-of-a-objects",
    "href": "lessons/2-11_Objects_Attributes.html#attributes-of-a-objects",
    "title": "2-11: Objects and Attributes",
    "section": "6 Attributes of a objects",
    "text": "6 Attributes of a objects\nAttributes is a very broad term in R.  All objects can have attributes and there are two distinct types of attributes in R.\n \n1) Attributes that are properties of the object – these are defined by R and they include:\n\nnames: names for the values inside an object – not to be confused with the name of the object\nclass: the type of object is it (numeric, boolean…)\ndim: dimension – this is how you create a 2D matrix, 3D array, or higher dimension arrays\n\n \n2) Attributes that act as metadata for the object.  These attributes are defined by the user and are analogous to comments in a script.\n \nAttributes can be confusing because there is not a consistent way to apply or view them in R.  In this lesson, we will look at attributes on vectors and next lesson look at attributes on Lists.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#names-attribute",
    "href": "lessons/2-11_Objects_Attributes.html#names-attribute",
    "title": "2-11: Objects and Attributes",
    "section": "7 names attribute",
    "text": "7 names attribute\nAll objects have a name and they can be assigned an attribute called names.  The name of the object and the names attribute are two different things. The attribute names refers to names given to the values within the object and are assigned using the names() function.\n \nLet’s first create a copy of our JulyTemps vector:\nJulyTempsNamed = JulyTemps;\nAnd we will use names() to give the date to each temperature value:\nnames(JulyTempsNamed) = c(\"July22\", \"July23\", \"July24\", \"July25\",\n                          \"July26\", \"July27\", \"July28\", \"July29\");\nJulyTempsNamed is called a Named vector in the Environment and the names are given in the Console:\nJulyTempsNames:  Named num [1:8] 90 88 86 77...\nAnd in the Console, JulyTempsNamed has two rows, the first contains the names and the second contains the values:\n&gt; JulyTempsNamed\nJuly22 July23 July24 July25 July26 July27 July28 July29 \n    90     88     86     77     81     83     80     80\n\n7.1 Subsetting named values with square brackets [ ]\nThe main advantage to naming vectors is that you can use the names to subset the value within the object.\n \nTo get the second value in JulyTempsNamed, you can subset with the position (2) or the name (July23):\n\n\n\n&gt; JulyTempsNamed[2]\nJuly23 \n    88 \n&gt; JulyTempsNamed[\"July23\"]\nJuly23 \n    88 \n\n\nFigure 1: Subsetting a named vector with the position and the name – the results are the same\n\n\n\nYou can subset multiple values by position or name:\n&gt; JulyTempsNamed[c(2,4,6)]\nJuly23 July25 July27 \n    88     77     83 \n&gt; JulyTempsNamed[c(\"July23\", \"July25\", \"July27\")]\nJuly23 July25 July27 \n    88     77     83 \nFrom a functional perspective, named values and unnamed values will work exactly the same in any computation.  The difference between the two is only how they are displayed and how they can be referenced.  Here we subtract all values in JulyTempsNamed by 20:\n\n\n\n&gt; JulyTempsNamed - 20\nJuly22 July23 July24 July25 July26 July27 July28 July29 \n    70     68     66     57     61     63     60     60 \n\n\nFigure 2: You can do mathematics on named values just like unnamed values\n\n\n\n\n\n7.2 Subsetting named values with double-square brackets [[ ]]\nYou can also subset a named vector with double square brackets [[  ]] and you will just get the value (without the name):\n\n\n\n&gt; JulyTempsNamed[[2]]\n[1] 88\n&gt; JulyTempsNamed[[\"July23\"]]\n[1] 88\n\n\nFigure 3: Using double brackets to subset named vectors will give you just the value\n\n\n\nThis is generally not recommended because you cannot select multiple elements using [[ ]]\n\n\n\n&gt; JulyTempsNamed[2:4]\nJuly23 July24 July25 \n    88     86     77 \n&gt; JulyTempsNamed[[2:4]]\nError in JulyTempsNamed[[2:4]] : \n  attempt to select more than one element in vectorIndex\n\n\nFigure 4: using single brackets and double brackets to subset multiple values in a vector\n\n\n\nNote: element here means the same as values (so, the  8 elements in JulyTempsNamed are the eight values)",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#dimension-dim-attribute",
    "href": "lessons/2-11_Objects_Attributes.html#dimension-dim-attribute",
    "title": "2-11: Objects and Attributes",
    "section": "8 dimension (dim) attribute",
    "text": "8 dimension (dim) attribute\nWhen you create a vector using c(), you are creating an object that, functionally, has one dimension.  This is why you can subset values in JulyTemps using their position within the vector (Figure 1).\n \nHowever, data is sometimes best represented in multiple dimensions – for instance you might have temperatures that are stored by both location and date.\n\n8.1 Multidimensional objects\nWe can use dim() to add more dimensions to a vector.\n \nWe are going to make a two-dimensional vector (also called a matrix or a 2D array) using JulyTemps.  First, we will create a copy of JulyTemps and then set the dimensions of the copy to two values (4 and 2).  Those two dimension values (which can be thought of as 4 rows and 2 columns) must multiply to the number of values in the vector (8).\nJulyTemps2D = July Temps;\ndim(JulyTemps2D) = c(4,2);\nThe Environment and Console reflect the dimensions in JulyTemps2D:\n&gt; JulyTemps2D\n     [,1] [,2]\n[1,]   90   81\n[2,]   88   83\n[3,]   86   80\n[4,]   77   80\n\n\n\nJulyTemps2D: num [1:4, 1:2] 90 88 86 77...\n\n\nFigure 5: Displaying a 2D value in the Console and the Environment\n\n\n\nNow we have a 2D object that can be subsetted using the [ , ] operator (which can be though of as a dimensional subset operator):\n&gt; JulyTemps2D[3,2]\n[1] 80\nWe could create a three-dimensional object (called a 3D array) by setting the dimensions to three values.  The numbers still need to multiply to 8:\nJulyTemps3D = JulyTemps;\ndim(JulyTemps3D) = c(2,2,2); # each dimension has length of 2\n&gt; JulyTemps3D[1,2,2]\n[1] 80\nNote: You can declare a one-dimensional vector (also called a 1D array).  I do not know if there is a practical reason to do this since vectors functionally operate as 1D objects:\nJulyTemps1D = JulyTemps;\ndim(JulyTemps1D) = c(8);\n\n\n8.2 accessing rows and columns in matrices\nLet’s take the 2D matrix we created and add names for the rows and columns using rownames() and colnames():\nJulyTemps2DNamed = JulyTemps2D;\nrownames(JulyTemps2DNamed) = paste(\"date\", 1:4, sep=\"\");\ncolnames(JulyTemps2DNamed) = c(\"location1\", \"location2\");\nAnd we can see the names in the Console:\n&gt; JulyTemps2DNamed\n      location1 location2\ndate1        90        81\ndate2        88        83\ndate3        86        80\ndate4        77        80\nWe can now access values in the matrix by name or position using the dimensional operator:\n&gt; JulyTemps2DNamed[3,2]\n[1] 80\n&gt; JulyTemps2DNamed[\"date3\",\"location2\"]\n[1] 80\nAnd we can access whole rows or columns by leaving the other blank:\n&gt; JulyTemps2DNamed[3,]\nlocation1 location2 \n       86        80 \n&gt; JulyTemps2DNamed[,2]\ndate1 date2 date3 date4 \n   81    83    80    80 \n&gt; JulyTemps2DNamed[,\"location2\"]\ndate1 date2 date3 date4 \n   81    83    80    80 \n\n\n8.3 matrices are vectors\nThe [ , ] operator is really the same thing as the [ ] operator.  The difference is that [ , ] is used for 2D objects (matrices) whereas [ ] is used for 1D objects (vectors).\n \nYou can use the 1D operator on a matrix – [ ] will flatten the matrix to one dimensional vector:\n&gt; JulyTemps2DNamed[1:8]\n[1] 90 88 86 77 81 83 80 80\n\n&gt; JulyTemps2DNamed[5]\n[1] 81\n\n\n8.4 The $ operator\nYou cannot use $ to subset any Atomic Vector (vector, matrix, or array). You will get the $ operator is invalid for atomic vectors error:\n\n\n\n&gt; JulyTemps2DNamed$col2\nError in JulyTemps2DNamed$col2 : $ operator is invalid for atomic vectors\n\n\nFigure 6: R does not allow use of $ operator on vectors",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#class-attribute-and-typeof",
    "href": "lessons/2-11_Objects_Attributes.html#class-attribute-and-typeof",
    "title": "2-11: Objects and Attributes",
    "section": "9 class attribute and typeof()",
    "text": "9 class attribute and typeof()\nclass() is a function that allows you to either view or set the class of an object (i.e., change a numeric vector to a character vector).  You should never use class() to changes the class of an object, instead use a specialized function like as.character().\n \nUsing class() to get the class of an object will produces inconsistent results.  Using class on an object will return the value type if the vector has no dimensions set, and will return the object type if there are dimensions set:\n&gt; class(JulyTemps2D)\n[1] \"matrix\" \"array\" \n&gt; class(JulyTemps)\n[1] \"numeric\"\nInstead of class, you should use typeof(). It will always give you the class of the values:\n&gt; typeof(JulyTemps2D)\n[1] \"double\"\n&gt; typeof(JulyTemps)\n[1] \"double\"\nNote: double means the values are numeric.  In other programming languages (especially older ones), there is a corresponding single class that does not exist in R.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#other-attributes-metadata-or-comments",
    "href": "lessons/2-11_Objects_Attributes.html#other-attributes-metadata-or-comments",
    "title": "2-11: Objects and Attributes",
    "section": "10 Other attributes (metadata or comments)",
    "text": "10 Other attributes (metadata or comments)\nYou can create any attribute you want and add it an object using attr().  We are going to add two attributes using attr() to a copy of JulyTemps2DNamed.  The attributes will be named timeChecked and unit and they will be set to noon and Fahrenheit:\nJulyTemps2DNamed_2 = JulyTemps2DNamed;\nattr(JulyTemps2DNamed_2, \"timeChecked\") = \"noon\";\nattr(JulyTemps2DNamed_2, \"unit\") = \"Fahrenheit\";\nnote: while not enforced, attribute names should follow variable variable naming conventions\n \nWe can also use attr() to get the attributes of an object:\n&gt; attr(JulyTempsNamed_2, \"timeChecked\")\n[1] \"noon\"\n&gt; attr(JulyTempsNamed_2, \"unit\")\n[1] \"Fahrenheit\"\nUser-defined attributes should be treated as comments or metadata.  Attributes give information that might interest the user of your script but attributes should not be a functional part of the script. \n\n10.1 Viewing all attributes\nIf you view a object in the Console, the user-defined attributes will be displayed:\n&gt; JulyTemps2DNamed_2\n      location1 location2\ndate1        90        81\ndate2        88        83\ndate3        86        80\ndate4        77        80\nattr(,\"timeChecked\")\n[1] \"noon\"\nattr(,\"unit\")\n[1] \"Fahrenheit\"\nFor a more robust view of the attributes in an object, you can use attributes():\n&gt; attributes(JulyTemps2DNamed_2)\n$dim\n[1] 4 2\n$dimnames\n$dimnames[[1]]\n[1] \"date1\" \"date2\" \"date3\" \"date4\"\n$dimnames[[2]]\n[1] \"location1\" \"location2\"\n\n$timeChecked\n[1] \"noon\"\n$unit\n[1] \"Fahrenheit\"\nNote: dimnames is a property attribute that was set when you set the row and column names",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#application",
    "href": "lessons/2-11_Objects_Attributes.html#application",
    "title": "2-11: Objects and Attributes",
    "section": "11 Application",
    "text": "11 Application\nA) In comment at the top of your script answer:\n\nWhat happens when you create this vector:  c(1, “a”, 2, “b”)?  Why?  Explain in terms of atomic vectors and class types.\n\n \nB) Open the Lansing2016Noaa-3.csv CSV file above and save it to the dataframe weatherData\n\nAdd a logical/Boolean column to weatherData call wasPrecip that gives whether there was any precipitation for the day\nAdd a logical/Boolean column to weatherData call wasMild that gives whether a day had high temperatures between 50 and 70\nAdd a logical/Boolean column to weatherData call wasMuggy that gives whether a day had high temperatures greater than 70 and humidity greater than 80\n\n \nC) Save the windSpeed column from weatherData to a vector named windSpeed\n\nAdd two user-defined attributes to windSpeed– one that gives the unit (miles/hour), the other that gives the year (2016)\nuse variable naming conventions when naming the attributes\n\n \nD) Add a names attribute for the first five values in averageTemp that gives the day (Jan1, Jan2…)\n\nAnswer in comments: What happens to the other 361 unnamed values?\n\n \nE) Create a 4D array from this vector:  c(1:256)\n\nsubset two values in the 4D vector\n\n \nSave the script as app2-11.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n11.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-11_Objects_Attributes.html#extension-rounding-functions-in-r",
    "href": "lessons/2-11_Objects_Attributes.html#extension-rounding-functions-in-r",
    "title": "2-11: Objects and Attributes",
    "section": "12 Extension: rounding functions in R",
    "text": "12 Extension: rounding functions in R\nThere are three rounding functions in R:\n\nround()   # rounds to nearest integer (5.3 become 5 and 5.7 becomes 6)\nfloor() # drops the decimal (both 5.3 and 5.7 become 5)\nceiling()  # increase decimal number to next integer  (both 5.3 and 5.7 become 6)\n \n\nEven though these function create integer-like values, R will still see the values as numeric:\n&gt; a = c(2.5, 3.6, -1.3)\n&gt; b = round(a)\n&gt; b\n[1]  2  4 -1\n&gt; class(b)\n[1] \"numeric\"\nIf you actually want integer values, then you need to to convert the vector to an integer:\n&gt; b = as.integer(b)\n&gt; b\n[1]  2  4 -1\n&gt; class(b)\n[1] \"integer\"\nInteger values have a speed advantage over numeric values, which you will notice if you are processing 100,000 values.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-11: Objects and Attributes"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html",
    "href": "lessons/2-13_Breakpoints.html",
    "title": "2-13: Breakpoints",
    "section": "",
    "text": "mention: cannot add/remove breakpoints while in debug mode (they do not take effect until you Source the script\nmention remove all breakpoints (debug -&gt; Remove all)\nfind a functional way to show what the number in &gt; Browse[#] does",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#purpose",
    "href": "lessons/2-13_Breakpoints.html#purpose",
    "title": "2-13: Breakpoints",
    "section": "1 Purpose",
    "text": "1 Purpose",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#material",
    "href": "lessons/2-13_Breakpoints.html#material",
    "title": "2-13: Breakpoints",
    "section": "2 Material",
    "text": "2 Material\nThe script for the lesson is here\nA second script that contains a function to debug\nThe data used for the lesson is here",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#debugging-your-code",
    "href": "lessons/2-13_Breakpoints.html#debugging-your-code",
    "title": "2-13: Breakpoints",
    "section": "3 Debugging your code",
    "text": "3 Debugging your code\nOne of the most powerful debugging tools in any programming language, and a staple of all professional programmers, is the breakpoint.  Breakpoints allows you to pause the execution of your script at a specific line or command.  While paused, you can look at the Environment, enter commands in the Console, or move through your script one command at a time. This is a very useful tool when debugging for loop that and cycling thousands of times.\n \nThe implementation of breakpoints in R is far less robust than most programming languages. Even with this limitation, breakpoints are still a useful debugging tool in R.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#setting-up-a-breakpoint",
    "href": "lessons/2-13_Breakpoints.html#setting-up-a-breakpoint",
    "title": "2-13: Breakpoints",
    "section": "4 Setting up a breakpoint",
    "text": "4 Setting up a breakpoint\nA breakpoint is like a pause button in the execution your script and there are multiple ways to set a breakpoint. In this lesson we will focus on using the Rstudio interface to set a breakpoint. In RStudio, you set a breakpoint by clicking to the left of the line number – this is called the gutter area.  A red dot representing the breakpoint appears in the gutter area.  Clicking again will get rid of the breakpoint.\n\n\n\n\n\n\nFigure 1: Breakpoint (red dot) set on line 8\n\n\n\nWhen you Source your code, the script will execute up to, but not including, the line with the breakpoint.  Your script is now paused at the line with a breakpoint, and you are in debug mode, which R calls Browse mode (Figure 2).\n \nNote: A breakpoint only works when you Source your script.  It will not work if you use Run to execute lines of code.\n\n4.1 Debug Mode\nThere are 4 things in RStudio that will indicate you are in debug mode:\n\nA green arrow will appear at the code line the script is paused at – the green arrow shows you the line that will be executed next\nBreakpoint controls will appear in the Console tab\nThe Console will indicate it is in browse mode  with &gt; Browse\n\nThe number (in this case, 1) is telling you how many levels deep you are.  The functionality of this number has changed in recent versions of RStudio and this author is still not quite sure what it represents.\n\nA traceback window will appear at the bottom of the Environment tab\n\ntraceback is a more advanced debugging tool that we will not get into in this lesson\n\n\n \n\n\n\n\n\n\nFigure 2: Sourcing a script with a breakpoint puts it into debug mode",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#using-the-browse-in-breakpoint",
    "href": "lessons/2-13_Breakpoints.html#using-the-browse-in-breakpoint",
    "title": "2-13: Breakpoints",
    "section": "5 Using the Browse in breakpoint",
    "text": "5 Using the Browse in breakpoint\nIn this lesson I will put breakpoint instructions in comments like this so you can follow along:\n## In the lesson script:\n##    Place a breakpoint at line 8 in the lesson’s script and click Source\n8 diffTemp = highTemps - lowTemps;\nIn Figure 2, the script is currently paused at line 8, this means all commands in lines 1-7 have been executed.  In the Environment you can see weatherData, highTemps, and lowTemps, which were added between lines 1-7.\nweatherData   366 obs. of 24 variables\nhighTemps     int [1:366] 29 35 33 27 29...\nlowTemps      int [1:366] 24 28 25 7 8 20...\nWhen in debug mode, you can enter commands in the Console.  With these commands you can do things like view values in or execute functions on a vector:\nBrowse[1]&gt; highTemps[1:20]\n[1] 29 35 33 27 29 36 42 39 42 38 16 23 18 34 42 33 26 15 21 22\nBrowse[1]&gt; max(highTemps)\n[1] 94\nOr, you can create a new variable and add it to the Environment:\nBrowse[1]&gt; highTemp_C = (5/9)*(highTemps-32)\nBrowse[1]&gt;\nhighTemp_C     num [1:366] -1.667 1.667 0.556 -2.778...",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#moving-through-code-in-debug-browse-mode",
    "href": "lessons/2-13_Breakpoints.html#moving-through-code-in-debug-browse-mode",
    "title": "2-13: Breakpoints",
    "section": "6 Moving through code in debug (browse) mode",
    "text": "6 Moving through code in debug (browse) mode\nWhen your script arrives at a breakpoint (Figure 2) , five buttons to control the flow of your script appear in the Console tab:\n1) Next: executes the command at the green arrow (in other debuggers, this is often called Step Over)\n2) Step In: moves into a function\n3) Step Out: completes a for loop or function\n4) Continue: unpauses the execution of the script (like hitting the Play button when a video is paused)\n5) Stop: quits the script (no more code is executed)\n \nWhen in debug mode you should only use the buttons to control the flow of your script.  In debug mode, clicking Source will cause problems with your script. Extension: Clicking Source in debug mode (read next section on Stop first).\n\n\n\n\n\n\nFigure 3: The five breakpoint control in debug mode\n\n\n\n\n6.1 Stop\nClicking Stop will take R out of debug mode and end the execution of the script.  In other words, no more commands in the script will be executed and all the components of debug mode (Figure 2) will go away.\n \nWhen you click Stop, Q is put in the Console. Q is the command to quit debug mode. You could directly type Q instead of clicking Stop.\n\n\n\n\n\n\nFigure 4: Stopping debug mode\n\n\n\n\n\n6.2 Continue to next Breakpoint\n## In the lesson script:\n## Add a second breakpoint on line 17 (so, now we have breakpoints at lines 8 and 17) and click Source\n17 sunsetTimes_12Hour = c();\nThe script will pause at the first breakpoint (line 8).  If you click Continue, the script will unpause and continue executing the script until the next breakpoint is reached on line 17 and pause there (green arrow).  Between the first and second pause, lines 9-17 are executed and the results of these commands are in the Environment.\n \nIn Console, the Continue command is c.\n\n\n\n\n\n\nFigure 5: Continue takes the script to the next breakpoint (if there is another one)\n\n\n\n\n\n6.3 Continue to end of script\nAfter line 17 there are no more breakpoints, so if you click Continue again, the rest of the script will be executed and you will be taken out of debug mode.\n\n\n\n\n\n\nFigure 6: Clicking Continue when there are no more breakpoint executes the rest of the script\n\n\n\n\n\n6.4 breakpoint inside for loop\n## In lesson script:\n##   Remove the breakpoints at lines 9 and 18\n##   Add a breakpoint at line 24 (inside the for loop)\n24 sunsetTimes_12Hour[i] = convertTime(sunsetTimes[i]);\nIf you put a breakpoint inside a for loop then Continue will stop at the breakpoint every cycle of the for loop. In Figure 7 I clicked Continue 20 time and the for loop has cycled 20 times (and i = 20)\n\n\n\n\n\n\nFigure 7: Continue clicked 20 times (note: i=20) with a breakpoint inside the for loop\n\n\n\n\n\n6.5 Next\n## In lesson script:\n##   Remove breakpoint on line 24\n##   Add a breakpoint on line 14\n14 sunsetTimes = weatherData$sunset;\nIf we Source the script, the code up until line 13 will execute and line 14 will have a green arrow in the gutter.\n \nWe can now execute one command at a time using Next.\n \nClicking Next executes the command on line 14 and moves the green arrow to the next command on line 15.\n \nSo, sunsetTimes is created and put in the Environment and line 15, which creates sunriseTimes, is highlighted with the green arrow..\n\n\n\n\n\n\nFigure 8: Clicking Next executes the command at the green arrow and moves the green arrow to the next command\n\n\n\n\n\n6.6 Multiple Commands on one line\n## In lesson script:\n##   Click Next until you get to line 20\n20 testCommand1=1; testCommand2=2; testCommand3=3;\nNext does not execute lines, Next executes commands.  Lines 17 and 18 have one command each but line 20 has 3 commands. If there are multiple commands on one line then Next will execute them one at a time and the debugger will highlight the current command.\n\n\n\n\n\n\nFigure 9: Only the current command is highlighted – clicking Next moves through the commands on the line.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#debugging-in-a-for-loop",
    "href": "lessons/2-13_Breakpoints.html#debugging-in-a-for-loop",
    "title": "2-13: Breakpoints",
    "section": "7 Debugging in a for loop",
    "text": "7 Debugging in a for loop\n## In lesson script:\n##   Click Next until you get to line 22\n22 for(i in 1:length(sunsetTimes))\nWhen the green arrow gets to a for loop, RStudio will highlight the whole for loop:\n\n\n\n\n\n\nFigure 10: Highlighting the whole for loop in debug mode\n\n\n\n \nClicking Next executes the initialization command for the for loop:\nfor(i in 1:length(sunsetTimes))\nIn this initialization command:\n\nthe variable i is set to 1\na rule is given for how i changes each time the for loop cycles (i.e., i increases by 1)\nthe cycles end when i is equal to sunsetTime\n\n \nThe initialization command of a for loop executes once whereas everything inside the for loop executes once per cycle of the for loop.\n \nAfter the initialization command is executed, Next will move the control inside the for loop:\n\n\n\n\n\n\nFigure 11: After executing the initialization command, the green arrow moves inside the for loop\n\n\n\nIf you keep clicking Next and debug mode will go through each command in the for loop for each cycle of the for loop\n\n7.1 Step Out of the for loop\nIf you are inside a for loop and want to finish executing the whole for loop (i.e., complete every cycle of the loop), you can click Step Out.  This will execute the rest of the for loop and put the control on the next command as long as you have no breakpoints in the for loop.\n\n\n\n\n\n\nFigure 12: Clicking Step Out will execute the rest of the for loop and move control to the next command\n\n\n\nNote: If you have a breakpoint inside the for loop then Step Out will just execute to the breakpoint – similar to Continue (Figure 5).\n\n\n7.2 Conditional breakpoints\n## In lesson script:\n##   Click Stop\n##   Add breakpoint on line 29 and Source script\n27  if(i == 200)  # acts as conditional breakpoint\n28  {\n29    NULL;   # this line functionally does nothing\n30  }\nA for loop can easily run thousands or millions of times and you often only want a breakpoint on a specific cycle of the for loop.  In most programming language, you can attach a condition to the breakpoint so that the breakpoint only activates when specified.\n \nIn R, you need to manually code this condition.  You can pause at a specific cycle of the for loop using an if statement:\nif(i == 200)    # acts as conditional breakpoint\n{\n  NULL;  # this line functionally does nothing\n}\nThe breakpoint needs to be put inside the codeblock attached to the if statement. Inside the codeblock is a NULL command – meaning it does nothing (it is only there to provide a space for the breakpoint).\n \nWith the breakpoint on line 29, the script will pause on the 200th cycle of the for loop:\n\n\n\n\n\n\nFigure 13: Using an if statement as a conditional breakpoint inside a for loop\n\n\n\n \nOr, if you put a a breakpoint at line 33, you can conditionally break on a value being used in the for loop:\nif(sunsetTimes[i] == 2000)\n{\n  NULL; \n}\nThe script will pause on the 141st cycle of the for loop, which represents the first day that sunset is at exactly 8:00pm (2000 hours)\n\n\n\n\n\n\nFigure 14: Conditional breakpoint based on a variable used in the for loop",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#if-else-statements",
    "href": "lessons/2-13_Breakpoints.html#if-else-statements",
    "title": "2-13: Breakpoints",
    "section": "8 If-else statements",
    "text": "8 If-else statements\n## In lesson script:\n##   Remove breakpoint on line 33\n##   Add a breakpoint on line 38\n38 if(testCommand3 == 1) # FALSE\nSimilar to the initialization of for loops, the code inside the parentheses of if-else statements is a command.  The command, which is a conditional statements, outputs a Boolean (TRUE/FALSE) value that is used to determined if the codeblock gets executed.\n \nWhen you set a breakpoint at the if() line, the whole if-else is highlighted in RStudio when the code is stopped at the line. \n\n\n\n\n\n\nFigure 15: Debug mode when the control is at the beginning of an if-else structure\n\n\n\nAs you click Next, the control (green arrow) will either:\n\nmove to the next conditional statement (if the current conditional statement is FALSE)\nmove inside the codeblock (if the current conditional statement is TRUE)\n\n \nThe following lines are not executed in an if-else structure and ill be skipped over in debug mode:\n\ncodeblocks attached to FALSE conditional statements\nelse statements that were preceded by a TRUE conditional statement\n\nthe codeblock attached to these else statements will also not be executed",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#debugging-within-functions-step-in",
    "href": "lessons/2-13_Breakpoints.html#debugging-within-functions-step-in",
    "title": "2-13: Breakpoints",
    "section": "9 Debugging within functions (Step In)",
    "text": "9 Debugging within functions (Step In)\nInside the for loop on lines 24 and 25, we call convertTime twice.  convertTime is a function inside debugTest.R.  If you click Next while on line 24, then the whole line is executed, along with the convertTime function, and control will go to the next line.\n \nYou can debug inside the convertTime function by clicking Step-In while on the lines with the function – this will move control to the function and the whole function will be highlighted:\n\n\n\n\n\n\nFigure 16: After clicking Step-In on line 24, control is moved to the function\n\n\n\nStep-in works whether the function is inside the same script or in another script.  However, Step-in will not work if the function is inside a package – for packages that we need to use trace() (next lesson).\n\n9.1 Executing command within the function\nOnce inside the function you can use the debug buttons like before. Next will execute one command at a time inside the function.  Step Out will complete the whole function and return to the next command in the main script.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#other-ways-to-add-breakpoints",
    "href": "lessons/2-13_Breakpoints.html#other-ways-to-add-breakpoints",
    "title": "2-13: Breakpoints",
    "section": "10 Other ways to add breakpoints",
    "text": "10 Other ways to add breakpoints\nThis lesson only goes through the fundamentals of breakpoints and debugging that apply to just about any programming language.  However, the methods in this lesson will not work for adding breakpoints to script files outside of your main script (the one you Source) or functions within packages.  Other strategies are needed to add breakpoints to these location.\n \nThe functions that can add breakpoints to external script files and packages are (in order of complexity) are:\n\nbrowser()\ndebugonce()\ndebug()\ntrace()\n\n \nIn the next lesson, we will look at these debug commands.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#application",
    "href": "lessons/2-13_Breakpoints.html#application",
    "title": "2-13: Breakpoints",
    "section": "11 Application",
    "text": "11 Application\nIn Comments at the end of the script answer the following questions:\n\nWhy might it be a bad idea to put breakpoint without a condition inside a for loop?\nWhat happens when you try to put a breakpoint on a line with only comments? \nWhat happens if you put a breakpoint at line 48 and click Source?  How about line 44?  Why is there a difference?\nWhat happens if you put a breakpoint in the middle of the ggplot() call? \nSet up a conditional breakpoint within the for loop that pauses the script every 30th cycle.\n\nA good way to to do this involves using modulus division\n\nSet up a conditional breakpoint within a for loop to pause the code when windSpeed is between 35 and 40mph.\n\n \nSave the script as app2-13.r in your scripts folder and  email your Project Folder to Charlie Belinsky at belinsky@msu.edu.\n \nInstructions for zipping the Project Folder are here.\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n11.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n11.2 End-of-class survey\nPlease take this short (less than 5 minutes) survey regarding this class.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#extension-clicking-source-in-debug-mode",
    "href": "lessons/2-13_Breakpoints.html#extension-clicking-source-in-debug-mode",
    "title": "2-13: Breakpoints",
    "section": "12 Extension: Clicking Source in debug mode",
    "text": "12 Extension: Clicking Source in debug mode\nSourcing a script when it is in debug mode is never a good idea. When you click Source while in debug mode, you are creating a new instance of your script with all the breakpoints attached. What this effectively means is that you are in multiple debug modes for the same script. When you want to quit debug mode, you have to quit for each instance. Something like this:\n\n\n\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\nBrowse[1]&gt; Q\n&gt; \n\n\nFigure 17: Had to quit 10 times because Source was clicked 9 times while in debug mode",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#extension-modifying-breakpoints-in-debug-mode",
    "href": "lessons/2-13_Breakpoints.html#extension-modifying-breakpoints-in-debug-mode",
    "title": "2-13: Breakpoints",
    "section": "13 Extension: Modifying breakpoints in debug mode",
    "text": "13 Extension: Modifying breakpoints in debug mode\nBreakpoints added in debug mode will not work until the next time the script is Sourced. You will see an outlined red dot and a message about how breakpoints will not be active.\n\n\n\n\n\n\nFigure 18: Adding a breakpoint on line 18 while in debug mode\n\n\n\nIf you remove a breakpoint in debug mode, the red dot will disappear but the breakpoint remains in effect until you exit debug mode.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  },
  {
    "objectID": "lessons/2-13_Breakpoints.html#extension-removing-all-breakpoints",
    "href": "lessons/2-13_Breakpoints.html#extension-removing-all-breakpoints",
    "title": "2-13: Breakpoints",
    "section": "14 Extension: Removing all breakpoints",
    "text": "14 Extension: Removing all breakpoints\nSometimes breakpoints will not go away even after you click to remove the red dot. This is a bug in RStudio. To fix this you can tell RStudio to remove all breakpoints Menu -&gt; Debug -&gt; Remove All\n \nIf the problem persists, you will need to close and reopen RStudio.",
    "crumbs": [
      "<b>Fundamentals of Programming class</b>",
      "Part 2: Data Programming",
      "2-13: Breakpoints"
    ]
  }
]