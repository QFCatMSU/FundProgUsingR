---
title: "2-14: Debugging External Scripts (Unfinished)"
short: "2-14"
# special characters for highlighting code : «»
---

### Using gutter breakpoints in external scripts

-   Adding breakpoints (gutter) to external script (probably not a good idea...)

    -   if using source(), bp must be added after

        -   source() removes bp

    -   if using debugsource(), bp can be added before or after

    -   either way: you must then Run the function

        -   bp will not work on source()/debugsource() execution

        -   be careful with rm(list=...)

## Purpose

-   Use browser() to debug external script (don't forget to remove browser()

-   Alternate ways to debug script

-   Downloading package script and debugging those

## Material

The [script for the lesson is here](../scripts/2-13_Breakpoints_new.R)

A [second script that contains a function to debug](../scripts/debugTest.r)

The [data used for the lesson](../data/Lansing2016Noaa-3.csv) is here

## Adding breakpoints to external scripts

In last lesson, we learned how to put an R script in debug mode using the RStudio interface to add a breakpoint in the gutter area of the script. This method works well for debugging your main script (the script you Source). However, you will likely find yourself wanting to add a breakpoint to a external script called by your main script. This could either be a functions script or a script from a package. Adding breakpoints to external scripts called from your main script is not quite as simple. In this lesson we will go over the ways to add breakpoints to scripts outside of your main script

## browser()

As a general rule, it is easiest to use breakpoints in the script you are Sourcing and browser() in scripts that

 

The most universal way to add a breakpoint is to add the command ***browser()*** to the location in your script where you want the breakpoint. ***browser()*** acts just like a breakpoint by pausing your script and putting your script in debug mode. We can take examples from the last lesson and replace the breakpoint with ***browser()***. [Note: browser() is added to your script and needs to be removed after debugging.]{.hl}

### browser() in the main script

In last lesson, the first breakpoint we set was on line 8. Instead of a breakpoint, we can put a browser() command to put the script in debug mode:

``` r
rm(list=ls());  
source("scripts/debugTest.r");

weatherData = read.csv(file = "data/lansing2016Noaa-3.csv");
highTemps = weatherData$maxTemp;
lowTemps = weatherData$minTemp;
«browser()»
diffTemp = highTemps - lowTemps;

weatherData$diffTemp = diffTemp;
```

The breakpoints in RStudio call broswer(), so putting browser() in the code is skipping the middle man ...Almost... because RStudio cannot see the injected browser() until after commands have been executed

-   do examples from last lesson

-   then put the script in a functionand call from a seconf script \[or, use 1-15 function's script?\]

-   mention that most external scripts contain functions

### add browser to code

We can add browser() to line 7 of the script from last lesson and click Source. You will see the familiar debug features

 

\<image of browser() with green arrow\>

### add browser to for loop

Instead of putting a NULL command in a for loop so that a breakpoint can be put on the line, we can put browser(). Don't forget to remove or comment out browser() when you are done debugging

\<link back to last lesson's NULL in for loops\>

\<image for loop with two browser() instead of NULL\>

### Don't forget to remove browser()

## browser() in function scripts

The main reason to use browser() is that it work in script files outside of script being Sourced. In the script files, we call a second script named \< \>. This script has functions in used by the main script. Adding breakpoints to the functions script will not work if you Source the main script. However, adding browser() will work.

### Example 1: if

### Example 2: for loop

You do not have editting access to script inside of a package so you cannot easily add browser(). The way around this is to download the package and add it to your library directly.

### Downloading package script

### Including downloaded package scripts

### Modifying downloaded scripts

## Alternate ways to add breakpoints

### source() outside script first, add breakpoints

-   do not source() or rm(list=lm()) in main script

-   only works when Run

### source() from main script, add breakpoints, run function

-   do not source() or rm(list=lm()) in main script

-   only works when Run

-   does it work if you put the bp on the function??

    -   No, because source()

### add breakpoints, debugSource() from main script, run function

-   do not source() or rm(list=lm()) in main script

-   only works when Run

-   does it work if you put the bp on the function??

    -   no, it gets really weird!

## Package scripts

-   once package scripts are downloaded, bp/browser() will work as above

## Application

Add a br
