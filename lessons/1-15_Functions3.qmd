---
title: "1-15: Functions 3"
short: "1-15"
# special characters for highlighting code : «»
---

## Purpose {#sec-first}

-   look at other functions in temperature.r

see @sec-first for more

## Questions about the material...

The files for this lesson:

-   Script: [you can download the script here](../scripts/1-15_Functions3.R)

-   Second Script: [a second script containing functions can be downloaded here](../scripts/temperature.R)

-   Data: [download the data file here](../data/LansingNOAA2016.csv)

 

If you have any questions about the material in this lesson, feel free to email them to the instructor, {{< var instructor.name >}}, at {{< var instructor.email >}}.

## Functions and arguments

In this lesson we will build up to a function that takes two arguments:

-   a vector of temperature values

-   the units of the temperature (e.g., F, C)

 

And the function will return:

-   a vector that has categorical values for the temperatures (e.g. "high", "low", "medium").

 

From the outside the function will look like this:

``` r
tempCategory5 = function(tempVector, unit="F")
```

***tempVector*** and ***unit*** are the two arguments for the function and ***unit*** is given a default value of "F" (Fahrenheit), but can be changed by the caller. 

### Arguments and variables

[Arguments are variables]{.hl} -- more specifically, argumentsare variables that are:

-   set by the caller of the function

```         
-   or, sometimes set to default value by the function if the caller does not set the value
```

-   used inside the function's codeblock

 

So, ***tempCategory5()*** has two variables that can be set by the caller (***tempVector*** and ***unit***).  It might have more variables inside, but those are hidden from the caller.

## Functions are kind of like black boxes

R has numerous built-in function in what is called the R Base package, the R Base package is automatically installed in every version of R. [Here is a list of all the functions in R Base](#0). Even though these function are not a part of your script, you can access any of these functions from your script -- you just need to know what arguments to pass to the function.

 

Most functions have arguments.  ***mean()*** will take the ***x*** value passed in by the caller and find the mean value.  It will probably do this by adding all the value and dividing that by the number of values.  But, we do not know this for sure because we cannot see inside a function -- we just see the input (arguments) and the output (return value).

 

When you call ***mean()***, you are setting the variable ***x*** for the function and ***x*** gets used inside the function.  You can also, optionally, set ***trim*** and ***na.rm*** -- but those already have default values (**0** and **FALSE**).

![The mean() function -- note than stat.ethz.ch is the website used in the RStudio Help tab](images/R-1-15_MeanFunction.png){#fig-mean-function .fs}

## Creating your own functions

You can create your own function to perform a task that you do multiple times, and this function can be used in any of your scripts.  It is best to put functions in a script of their own because they should be designed to operate independently.  Putting functions in a separate script also helps reinforce the independence of functions from the rest of script.

 

We will start be creating a new script file called ***termperature.r*** and save it to the ***script*** folder.  ***temperature.r***.

### Categorizing temperatures using a function

We will start off simply and have our first function, ***tempCategory()***, take one value as an argument and give a category for the temperature (e.g., hot, warm, cold).  This argument will be called ***tempValue***.  ***tempValue*** could be given a default value (e.g., ***tempValue = 50***), but this probably does not make sense because there are too many values the caller could use (and infinitely many if you include decimals).

``` r
tempCategory = function(tempValue)  # there is no default value for tempValue
{
  # like if-else statements and for loops, the curly brackets create a codeblock
  # attached to the function -- and all code inside the function gets indented
}
```

Next we add in a ***if-else-if*** structure to categorize the temperature value:

-   freezing (1-20 degrees)

-   cold (21-40 degrees)

-   moderate (41-60 degrees)

-   warm (61-80 degrees)

-   hot (81-100 degrees)

 

And for each ***if-else-if*** statement, we will return the temperature category.

``` r
tempCategory = function(tempValue)
{
  if(tempValue >= 1 & tempValue <= 20)
  {
    return("freezing");
  }
  else if(tempValue >= 21 & tempValue <= 40)
  {
    return("cold");
  }
  else if(tempValue >= 41 & tempValue <= 60)
  {
    return("moderate");
  }
  else if(tempValue >= 61 & tempValue <= 80)
  {
    return("warm");
  }
  else if(tempValue >= 81 & tempValue <= 100)
  {
    return("hot");
  }
}
```

### Getting functions into a script

***tempCategory()*** exists in the script ***temperature.r*** in the scripts folder of you project.  ***tempCategory()*** can be used in any script file in your project by including the line:

``` r
source(file="scripts/temperature.r");
```

The line above reads all the functions inside ***temperature.r*** and puts them into the ***Environment*** so that the rest of the script can use the functions inside ***temperature.r***.

``` {.r tab="Environment"}
tempCategory:   function (tempValue)
```

### Calling functions

Now we can call ***tempCategory()***.

 

[The argument **tempValue** is a variable]{.hl} that is set by the caller and used by the function ***tempCategory()***.  Here we test out 4 different calls to ***tempCategory()*** -- each setting ***tempValue*** to a value:

``` r
cat1a = tempCategory(45);
cat1b = tempCategory(tempValue=85);
cat1c = tempCategory(tempValue=17);
cat1d = tempCategory(-2); 
```

``` {.r tab="Environment"}
cat1a:   "moderate"
cat1b:   "hot"
cat1c:   "freezing"
cat1d:   NULL
```

When **-2** is the argument, **NULL** is the return value.  The function does not handle negative values so **nothing**, or ***NULL***, was returned**.\
**

[Note: In programming, NULL is an empty object whereas NA is an empty or nonexistent value.]{.note}

### Return values

Functions, in many ways, are designed to answer a question from the caller.  The answer comes in the form of a return value given by ***return()***.  It is up to the caller to determine how to use the return value.   When the following line of code is executed:

``` r
cat1b = tempCategory(tempValue=85);
```

***tempCategory()*** is called with the argument ***tempValue*** set to **85**.  The code inside ***tempCategory()*** is executed and the value "hot" is returned.  The variable ***cat1b*** is set to the return value, "hot".

## Adding an argument for the unit

Up to this point we are assuming that the temperature will be in Fahrenheit.  But, we want to make the function more robust and allow for both Fahrenheit and Celsius temperatures.  This means we need the caller to give us two pieces of information (i.e., two arguments).  One that gives the temperature and one that gives the unit.

 

The easiest way is to just create a string argument that holds the unit.  Since there are only two choices (at this point), we will put a default value of "F".  This means that if the caller does not set ***unit***, the temperature is assumed to be in Fahrenheit:

``` r
tempCategory2 = function(tempValue, unit="F") # there is a default value for unit.
{

}
```

The function will allow for two possibilities units for ***tempValue***: Fahrenheit (F) and Celsius (C).  This means we need code to handle both situations.

 

The ***if-else*** structure already uses Fahrenheit temperatures so we only need to do something extra if the unit is Celsius.  The easiest thing to do is convert the Celsius temperatures into Fahrenheit before the ***if-else*** structure:

``` r
tempCategory2 = function(tempValue, unit="F")
{
  «if(unit == "C")»  # if the unit is set to Celsius by the caller
  {
    «tempValue = (9/5)*tempValue + 32;»    # Convert tempValue to Fahrenheit
  }
  # note: the if statement above is completely independent from the
  #       if-else-if structure below
  if(tempValue >= 1 & tempValue <= 20)
  {
    return("freezing");
  }
  else if(tempValue >= 21 & tempValue <= 40)
  {
    return("cold");
  }
  else if(tempValue >= 41 & tempValue <= 60)
  {
    return("moderate");
  }
  else if(tempValue >= 61 & tempValue <= 80)
  {
    return("warm");
  }
  else if(tempValue >= 81 & tempValue <= 100)
  {
    return("hot");
  }
}
```

### Calling tempCategory2()

Let's test the ***unit*** argument in ***tempCategory2()*** from our outside script:

``` r
cat2a = tempCategory2(45);       
cat2b = tempCategory2(15, "F");  
cat2c = tempCategory2(15, "C");                 # 15C ~ 59F
cat2d = tempCategory2(tempValue=35, unit="C");  # 35C ~ 95F
cat2e = tempCategory2(tempValue=45, unit="C");  # NULL because 45C > 100F
```

``` {.r tab="Environment"}
cat2a:   "moderate"
cat2b:   "freezing"
cat2c:   "moderate"
cat2d:   "hot"
cat2e:   NULL
```

### setting ( = ) vs comparing ( == )

This is probably a good time to reinforce the difference between these two commonly mixed up operations: ( = ) and ( == ). 

The ( **=** ) operation [sets]{.hl}the variable on the left to the value on the right:

``` r
a = 4;           # set a to be 4
tempValue = 45;  # set tempValue to be 45
unit = "F";      # set unit to be "F"
```

The ( **==** ) operation [compares]{.hl}the variable on the left to the value on the right and returns a Boolean (TRUE/FALSE) value:

``` r
a == 4          # Is a equal to 4?  TRUE if a is 4, FALSE otherwise
tempValue == 45 # Is tempValue equal to 45? TRUE if tempValue is 45, FALSE otherwise
unit == "F"     # Is unit equal to "F"? TRUE if unit is "F", FALSE otherwise
```

[Note: "F" here means Fahrenheit -- another reason to not use T or F to represent TRUE and FALSE]{.note}

## Boolean argument

An alternate way to setup the ***tempCategory()*** function is to use a Boolean argument to determine whether the temperature is Fahrenheit or Celsius.  A [Boolean]{.hl}has two possible values: **TRUE** and **FALSE**.  Boolean values are convenient to use when there are only two choice.  In this case the two choice are Fahrenheit and Celsius, or, another way to put it: **Fahrenheit** and **not Fahrenheit**.

``` r
tempCategory3 = function(tempValue, isFahr=TRUE) # isFahr = FALSE means Celsius
{

}
```

[TRUE and FALSE do not go into quotes.  They are predefined variables in R.]{.hl}  If you use quotes then R will think you mean the character "T" followed by the character "R" followed by the character "U" followed by the character "E".  This is not the same as the Boolean **TRUE**.

``` r
tempCategory3 = function(tempValue, isFahr=TRUE)
{
  # Do not put TRUE and FALSE in quotes. They are variables in R -- not strings.
  «if(isFahr == FALSE)»  # the tempValue is Celsius
  {
    # convert tempValue to Fahrenheit
    «tempValue = (9/5)*tempValue + 32;»
  }

  if(tempValue >= 1 & tempValue <= 20)
  {
    return("freezing");
  }
  else if(tempValue >= 21 & tempValue <= 40)
  {
    return("cold");
  }
  else if(tempValue >= 41 & tempValue <= 60)
  {
    return("moderate");
  }
  else if(tempValue >= 61 & tempValue <= 80)
  {
    return("warm");
  }
  else if(tempValue >= 81 & tempValue <= 100)
  {
    return("hot");
  }
}
```

### Using tempCategory3()

Aside from changing the second argument to a Boolean value, this function works the same as the last:

``` r
cat3a = tempCategory3(45);
cat3b = tempCategory3(15, TRUE);
cat3c = tempCategory3(15, FALSE);
cat3d = tempCategory3(tempValue=35, isFahr=FALSE);
cat3e = tempCategory3(tempValue=45, isFahr=FALSE);
```

Since we used the same values and units as last time, the results are the same:

``` {.r tab="Environment"}
cat3a:   "moderate"
cat3b:   "freezing"
cat3c:   "moderate"
cat3d:   "hot"
cat3e:   NULL
```

### Advantages/disadvantages of using Boolean

The ***advantages*** to using Boolean arguments over string arguments:

-   The script runs faster.  The difference is tiny but tiny differences could become noticeable if you are executing the function 100,000 times.

-   The script is less prone to user error.  A Boolean has two possible values for the caller: **TRUE** and **FALSE**.  Whereas strings can be misinterpreted -- someone might type in "Fahr" instead of "F", or just misspell Fahrenheit and the function will not be able to handle it.

 

The ***disadvantage*** to Boolean arguments is that string values are more robust and can handle more complex situations.  For instance, you might want to extend the function to include Kelvin temperatures.  You cannot handle 3 units (F, K, and C) with one Boolean variable, but you can handle as many units as you want with one string variable -- you just need to extend the ***if-else-if*** structure that coverts the value:

``` r
tempCategory4 = function(tempValue, unit="F")
{
  if(unit == "C")
  {
    tempValue = (9/5)*tempValue + 32;
  }
  «else if(unit == "K")»
  {
    «tempValue = tempValue - 273;»      # convert K to C
    tempValue = (9/5)*tempValue + 32; # convert C to F
  }

  if(tempValue >= 1 & tempValue <= 20)
  {
    return("freezing");
  }
  else if(tempValue >= 21 & tempValue <= 40)
  {
    return("cold");
  }
  else if(tempValue >= 41 & tempValue <= 60)
  {
    return("moderate");
  }
  else if(tempValue >= 61 & tempValue <= 80)
  {
    return("warm");
  }
  else if(tempValue >= 81 & tempValue <= 100)
  {
    return("hot");
  }
}
```

[Note: I broke the conversion from Kelvin to Fahrenheit into 2 steps: Kelvin to Celsius and Celsius to Fahrenheit.  This could have been done in one step.]{.note}

### Using tempCategory4()

Testing out the Kelvin is less intuitive as 300K is about room temperature:

``` r
cat4a = tempCategory4(305, "K");   # ~89F
cat4b = tempCategory4(270, "K");   # ~26F            
cat4c = tempCategory4(285, "K");   # ~53F
cat4d = tempCategory4(tempValue=325, unit="K"); # ~125F
```

Since we used the same values and units as last time, the results are the same:

``` {.r tab="Environment"}
cat4a:   "hot"
cat4b:   "cold"
cat4c:   "moderate"
cat4d:   NULL
```

## Using a vector instead of a single value

Finally, we do not just want to categorize one value at a time, we want to be able to categorize a vector of values.

 

There are three changes we need to make to the code to handle vectors instead of single values:

1.  a ***for*** loop to cycle through each value in the vector

2.  index the temperature vector so that we are checking one value at a time

3.  a vector output of categories (i.e, we need a category for each value in the vector)

### For loop to cycle through every value

We need a ***for*** loop to cycle through, and categorize, every value in the vector ***tempVector***.  The number of cycles we need is the same as the length of ***tempVector***, which is given by ***length(tempVector)***.

``` r
tempCategory5 = function(tempVector, unit="F")
{
  «# This part stays the same» 
  if(unit == "C") 
  {
    tempVector = (9/5)*tempVector + 32;
  }
  else if(unit == "K")
  {
    tempValue = tempValue - 273;      # convert K to C
    tempValue = (9/5)*tempValue + 32; # convert C to F
  }

  # go through each value in tempVector
  «for(i in 1:length(tempVector))»
  {
    # the i will index tempVector each time through the loop
    # i will go from 1 to the length of the vector
  }
}
```

### Index the temperature values

Inside the ***for*** loop, we need to index the vector, ***tempVector*** so that we are only checking one value at a time.  ***i*** is the value that index ***tempVector*** and ***i*** changes each time the for loop cycles (***i*** goes from 1 to the length of the vector)

``` r
tempCategory5 = function(tempVector, unit="F")
{
  # This part stays the same
  if(unit == "C") 
  {
    tempVector = (9/5)*tempVector + 32;
  }
  else if(unit == "K")
  {
    tempValue = tempValue - 273;      # convert K to C
    tempValue = (9/5)*tempValue + 32; # convert C to F
  }

  # go through each value in tempVector
  for(i in 1:length(tempVector))
  {
    if(tempVector«[i]» >= 1 & tempVector«[i]» <= 20)
    {

    }
    else if(tempVector«[i]» >= 21 & tempVector«[i]» <= 40)
    {

    }
    else if(tempVector«[i]» >= 41 & tempVector«[i]» <= 60)
    {
 
    }
    else if(tempVector«[i]» >= 61 & tempVector«[i]» <= 80)
    {

    }
    else if(tempVector«[i]» >= 81 & tempVector«[i]» <= 100)
    {

    }
  }
}
```

### Return a vector output

We are no longer returning a single categorical value, we are returning a vector of categorical values.  The return vector is the same size at the temperature vector.

 

There are 3 steps here:

1.  Create a return vector before the ***for*** loop (this is a state variable that updates each time through the ***for*** loop)

2.  Append categorical values to the return vector inside the ***for*** loop

3.  Return the vector to the caller after the ***for*** loop (after the vector has been fully populated with values)

``` r
tempCategory5 = function(tempVector, unit="F")
{
  # This part stays the same
  if(unit == "C") 
  {
    tempVector = (9/5)*tempVector + 32;
  }
  else if(unit == "K")
  {
    tempValue = tempValue - 273;      # convert K to C
    tempValue = (9/5)*tempValue + 32; # convert C to F
  }

  «# step 1: create a return vector»
  «retVector = c();»   # c() means this is a vector

  # go through each value in tempVector
  for(i in 1:length(tempVector))
  {
    if(tempVector[i] >= 1 & tempVector[i] <= 20)
    {
      «# step 2: populate the return value inside the for loop»
      «retVector[i] = "freezing";» 
    }
    else if(tempVector[i] >= 21 & tempVector[i] <= 40)
    {
      retVector[i] = "cold";  
    }
    else if(tempVector[i] >= 41 & tempVector[i] <= 60)
    {
      retVector[i] = "moderate";  
    }
    else if(tempVector[i] >= 61 & tempVector[i] <= 80)
    {
      retVector[i] = "warm";  
    }
    else if(tempVector[i] >= 81 & tempVector[i] <= 100)
    {
      retVector[i] = "hot";  
    }
  }
  «# step 3: return the populated vector to the caller:»
  «return(retVector);»
}
```

### Using tempCategory5()

Let's first test to make sure the function still works with one value:

``` r
cat5a = tempCategory(45);
cat5b = tempCategory(tempVector=85);
cat5c = tempCategory(tempVector=17);
cat5d = tempCategory(-2); 
```

``` {.r tab="Environment"}
cat5a:   "moderate"
cat5b:   "hot"
cat5c:   "freezing"
cat5d:   NULL
```

And next test ***tempCategory5()*** with vectors that we create using ***c()*** and ***seq()***:

``` r
cat5e = tempCategory5(c(10,30,50,70,90));
cat5f = tempCategory5(seq(from=5, to=90, by=20));
cat5g = tempCategory5(tempVector=c(30,25,20,15,10), unit="C");
cat5h = tempCategory5(tempVector=seq(from=25, to=-5, by=-5), unit="C");
```

``` {.r tab="Environment"}
cat5e = tempCategory5(c(10,30,50,70,90));
cat5f = tempCategory5(seq(from=5, to=90, by=20));
cat5g = tempCategory5(tempVector=c(30,25,20,15,10), unit="C");
cat5h = tempCategory5(tempVector=seq(from=25, to=-5, by=-5), unit="C");
```

And, lastly, test ***tempCategory5()*** with vectors from a data frame.  For this we will use the Lansing weather data for the year 2016 and use the ***maxTemp*** and ***minTemp*** columns:

``` r
weatherData = read.csv(file="data/LansingNOAA2016.csv", 
                       sep=",",
                       header=TRUE, 
                       stringsAsFactors = FALSE); 

cat5i = tempCategory5(weatherData$maxTemp);
cat5j = tempCategory5(weatherData$minTemp);
```

### Saving vectors to a data frame

The ***Environment*** says that there are **366** values inside ***cat5i*** and ***cat5j***, but it would be easier to see the values in context -- by adding the vectors to the ***weatherData*** data frame.

``` r
  weatherData$maxTempCat = cat5i;
  weatherData$minTempCat = cat5j;
```

When you double-click on ***weatherData*** in the ***Environment***, you will see the new columns at the end (***maxTempCat*** and ***minTempCat***).  The view in @fig-add-vector-to-df is days at the beginning of the year -- so, January and it's cold.

![Adding the temperature vectors to the weatherData data frame](images/clipboard-1744612833.png){#fig-add-vector-to-df .fs}

 

[Extension: Creating a factor (categorical) vector](#extension-creating-a-factor-categorical-vector)

## Application

1\) Create a script named ***app1-15.r*** in your scripts folder.

[Note: in this application you will by modifying and creating functions in the ***temperature.r*** script -- these functions all need to be tested in the ***app1-15.r*** script.]{.note}

 

2\) In comments at the top of your script, answer the following questions:

-   How do arguments make a function more robust? 

-   Why does this code from [Functions and arguments] have a default value for ***unit*** but not for ***tempVector***?

-   Why does the first part of ***tempCategory5*** (in [Index the temperature values]), where you check for the unit and convert all the values in the vector,[not need to be in a ***for*** loop]{.hl}?

 

3\) Fix the following two issues in ***tempCategory5()***:

-   Give errors for temperatures not covered in the ***if-else-if*** structure -- and have a different error for temperature that are too high and temperatures that are too low.

-   The function works for all integer values from 1-100.  Have the function work for all decimal values.  Some values that do not currently not work (i.e., returns **NULL**) in ***tempCategory5()*** are **20.5**, **40.5**, **60.5**, and **80.5**.

 

Questions 4 and 5 can be done [with or without a for loop]{.hl}.  You should first get 4 and 5 to work for a single value and then move to multiple values (i.e., vectors)

4\) Create [one function]{.hl} in ***temperature.r*** that converts a vector from Celsius to Fahrenheit and Fahrenheit to Celsius. 

-   Have the function use a Boolean argument to determine the direction of the conversion

 

5\) Create[one function]{.hl} that does all of the following temperature conversions (note: Kelvin = Celsius + 273):

a\) F -\> C

b\) C -\> F

c\) F -\> K

d\) C -\> K

e\) K -\> C

f\) K -\> F

 

This can be done with 2 arguments:

-   a temperature vector

-   a string that gives the conversion type ("FtoC", "CtoK"...)

     

This method requires an ***if-else-if*** structure that looks at the second argument to determine which conversion is needed.

 

[A better way to do it is with 3 arguments:]{.hl}

-   the temperature vector

-   the unit to convert from

-   the unit to convert to

     

The second method will require multiple conditions in your ***if-else-if*** structure:

**if(convertFrom == "C" & convertTo == "F")**

 

6\) Create a function that finds the [difference in temperatures]{.hl} between consecutive days and returns the temperature differences as a vector.

 

So if you have four high temperatures: **40, 45, 35, 42**:

-   the four calculations would be: **(no calculation), (45-40), (35-45), (42-35)**

-   and the return vector would be:  **(NA, 5, -10, 7**

[Note: The first value of the return vector is always NA because there is nothing to subtract.]{.note}

[Save you script file as **app1-15.r**  in the **scripts** folder of your RStudio Project for the class.]{.note}

{{< include ../assets/_AppInstructions.qmd >}}

## {for next lesson}

5\) Create a function in ***toolbox.r*** that calculates the Mean Square Error (MSE) of a vector (V) of numeric values.

$$
M S E=\frac{1}{n} \sum_{i=1}^{n}\left(V_{i}-\operatorname{mean}(V)\right)^{2}
$$

A good middle step for this problem is to calculate the mean of the vector using a ***for*** loop (i.e., add all the vector values using a ***for*** loop and then divide by the length of the vector).

### Tips for question 4

-   ***n*** is the same as the length of the vector

-   Use the ***mean()*** function to find the mean of the vector.

-   Create a state variable that hold the total value

-   Use a ***for*** loop to cycle through each value in the vector.  For each value you want to calculate $\left(V_{i}-\operatorname{mean}(V)\right)^{2}$ and add that to the total value

-   After you get the total, divide it by the length of the vector

 

**Example** If you have:

``` r
vec = c(8, 11, 9, 4);
```

then the ***mean(vec) = 8*** and

$$
M S E=\frac{(8-8)^{2}+(11-8)^{2}+(9-8)^{2}+(4-8)^{2}}{4}=6.5
$$

### End-of-unit survey

[Please take this short (less than 5 minute) survey regarding this class.](https://msu.co1.qualtrics.com/jfe/form/SV_b9I3VPJ2We28Qzs?online=true&sync=false&class=rfund)

## Extension: Creating a factor (categorical) vector {#extension-creating-a-factor-categorical-vector}

***cat5i*** is a string vector with only 5 values in it: **hot**, **warm**, **moderate**, **cold**, and **freezing**.

 

We can convert this vector into a factor, or categorical, vector using as.factor();

``` r
  factorVector = as.factor(cat5i);
```

In the ***Environment*** we see ***factorVector*** is:

``` {.r tab="Environment"}
factorVector:  Factor w/ 5 levels "cold", "freezing",...: 1 1 1 1 1 1 4 1 4 ...
```

The 5 levels are just the five possible values from the original vector ***cat5i*** in alphabetical order.  You can also get these five levels in the ***Console***:

``` {.r tab="Console"}
> levels(factorVector)
[1] "cold"     "freezing" "hot"      "moderate" "warm"  
```

The numbers refer to the 5 levels.  1 is "cold", 2 is "freezing"... We can look at the numbers in the ***Console*** using ***as.numeric()***:

``` {.r tab="Console"}
> as.numeric(factorVector)
  [1] 1 1 1 1 1 1 4 1 4 1 2 1 2 1 4 1 1 2 1 1 1 1 1 1 1 4 1 1 1 4 4 4 1 4 1 1 1
 [38] 4 1 1 1 1 1 2 2 1 1 1 1 4 4 4 1 4 1 1 1 4 4 4 1 1 1 1 1 4 4 5 5 4 4 4 4 4
 [75] 4 4 4 4 1 4 4 4 4 1 4 4 5 4 4 5 5 4 1 4 1 4 4 1 1 1 4 4 4 4 4 5 5 5 3 5 5
[112] 5 4 4 5 5 4 4 4 4 4 4 4 5 4 5 5 5 5 5 4 5 5 5 4 4 5 5 5 5 5 5 5 5 3 3 3 3
[149] 3 3 3 3 5 5 3 3 5 5 5 5 5 3 3 3 5 5 3 5 3 3 3 3 3 3 5 3 3 3 3 5 5 3 5 5 5
[186] 3 3 3 3 3 5 3 3 3 3 3 5 5 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 3 3 3 3 3 3 3 3 3
[223] 3 3 3 3 3 3 3 3 3 3 3 5 5 5 3 3 3 5 3 3 3 5 5 5 5 5 3 3 3 5 5 5 5 5 3 5 5
[260] 5 5 5 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 3 4 5 5 5 5 4 5 5 5 5 5 5 4 4 4
[297] 5 4 4 1 4 4 5 4 4 5 5 4 4 5 5 5 4 4 5 4 4 4 4 4 4 5 5 4 1 1 1 1 4 4 1 4 4
[334] 4 4 4 1 1 1 1 4 1 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 1 1 4 1 1 1 1 4
```

We can reorder the levels to go by temperature category instead of alphabetical instead using factor():

``` r
  reorderedFactor = factor(factorVector, 
                           levels=c("freezing", "cold", "moderate", 
                                    "warm", "hot"));
```

And now the output is a bit more intuitive:

``` {.r tab="Console"}
> levels(reorderedFactor)
[1] "freezing" "cold"     "moderate" "warm"     "hot"     
> as.numeric(reorderedFactor)
  [1] 2 2 2 2 2 2 3 2 3 2 1 2 1 2 3 2 2 1 2 2 2 2 2 2 2 3 2 2 2 3 3 3 2 3 2 2 2
 [38] 3 2 2 2 2 2 1 1 2 2 2 2 3 3 3 2 3 2 2 2 3 3 3 2 2 2 2 2 3 3 4 4 3 3 3 3 3
 [75] 3 3 3 3 2 3 3 3 3 2 3 3 4 3 3 4 4 3 2 3 2 3 3 2 2 2 3 3 3 3 3 4 4 4 5 4 4
[112] 4 3 3 4 4 3 3 3 3 3 3 3 4 3 4 4 4 4 4 3 4 4 4 3 3 4 4 4 4 4 4 4 4 5 5 5 5
[149] 5 5 5 5 4 4 5 5 4 4 4 4 4 5 5 5 4 4 5 4 5 5 5 5 5 5 4 5 5 5 5 4 4 5 4 4 4
[186] 5 5 5 5 5 4 5 5 5 5 5 4 4 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 5 5 5 5 5 5 5 5 5
[223] 5 5 5 5 5 5 5 5 5 5 5 4 4 4 5 5 5 4 5 5 5 4 4 4 4 4 5 5 5 4 4 4 4 4 5 4 4
[260] 4 4 4 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 3 4 4 4 4 3 4 4 4 4 4 4 3 3 3
[297] 4 3 3 2 3 3 4 3 3 4 4 3 3 4 4 4 3 3 4 3 3 3 3 3 3 4 4 3 2 2 2 2 3 3 2 3 3
[334] 3 3 3 2 2 2 2 3 2 2 2 2 2 2 2 2 1 1 2 2 1 2 2 2 2 2 2 3 2 2 2 2 3
```

The advantage to using factors is that they are faster.  Factors are actually numeric vectors with each possible number asigned a string value.  So, there are 366 numeric values and 5 string values in ***reorderedFactor***.  Numeric values can be be read in and processed much quicker than string values.  Also, there are older statistical and plotting functions that only accept factors as an argument.

 

The disadvantage is that factors are clumsy to work with.  While they are faster than string vectors, modern functions will essentially factorize a string vector in the background -- minimizing the lost processing time.  And pretty much all modern statistical and plotting functions will happily take string vectors -- including GGPlot. 
