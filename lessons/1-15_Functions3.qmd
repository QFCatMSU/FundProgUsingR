---
title: "1-15: Functions 3"
short: "1-15"
# special characters for highlighting code : «»
---

### To-Do {#sec-first}

-   Add page number (PDF), remove header/footer

## Purpose

-   embedded for loops

-   functions within a script

-   using matrices

-   named values in a vector

## Questions about the material...

The files for this lesson:

-   Script (only one this lesson): [you can download the script here](../scripts/1-15_Functions3.R)

-   Data (should there be data?)

 

If you have any questions about the material in this lesson, feel free to email them to the instructor, {{< var instructor.name >}}, at {{< var instructor.email >}}.

## Functions within a script

In the previous two lessons, we created a separate script for the functions. For this lesson, the functions we use will be put inside the main script. This is not usually the best place to put functions (why this is true will be an application question). However, there are many occasions where you will see functions put directly inside a script, so it is good to be familiar with this practice.

### functions, like variables, need to be declared first

Functions are like variables in that they store information to a named objects – and [objects must be declared before they are used]{.hl}. If you are going to put a function directly in a script then you need to declare the function before you call the function.

 

Examples of named objects:

-   1

-   2

-   3

-   4

-   

## Embedded for loops

We are going to look at two function:

isPrime3(): a modification of isPrime2() from last lesson that checks multiple values for prime

windChillMatrix(): takes a range of temerpatures and wind speed and creates a 2D vector (called a matrix) of wind chills

 

Both of these functions use nested for loops, in other words for loops within for loop. These are a staple of programming especially when you have multiple dimensions of data that you need to perform a task or check on.

## Checking multiple values for prime

For the first function, we have modified ***isPrime2()*** from last lesson so that it can check multiple numbers for prime. Instead of one number being passed in to check for prime, the caller passes in a vector of numbers and ***isPrime3()*** will check through each number to see which are prime.

 

In this case, [***isPrime3()***]{.underline} will return a ***TRUE/FALSE*** vector that marks each number as prime (**TRUE**) or not prime (**FALSE**).

``` r
isPrime3 = function(vals)
{
  isPrime = c(rep(TRUE, length(vals)));
  names(isPrime) = vals; 
   
  for(i in 1:length(vals))
  {
    for(j in 2:(vals[i]-1))
    {
      if(vals[i] %% j == 0)
      {
        isPrime[i] = FALSE;
      }
    }
  }
  return(isPrime);
}
```

### Examples

\<put examples before explanation of the code\>

### Named values

\<something here about how the values in the vector got named\>

## Nested for loops

isPRime3() has two for loops:

-   outer for loop: the range of dividends

-   inner for loop: the range of divisors that will be used to check the dividend for prime,

### Outer loop

The job of the outer loop is to feed the various dividends to the inner loops, where those dividends will be check for prime. The outer loop cycles through all of the dividends

``` r
  «for(i in 1:length(vals))»
  «{»
    for(j in 2:(vals[i]-1))»
    {
      if(vals[i] %% j == 0)
      {
        isPrime[i] = FALSE;
      }
    }
  «}»
```

### Inner loop

isPrime2() needed a for loop to check the dividend to see if it was prime. The for loop cycled through every single value from 2 to one less that the dividend. This for loop is the inner for loop in isPrime3().

``` r
  for(i in 1:length(vals))
  {
    «for(j in 2:(vals[i]-1))»
    «{»
      if(vals[i] %% j == 0)
      {
        isPrime[i] = FALSE;
      }
    «}»
  }
```

In isPrime2() there was only one return value. This time there is a return vector of Boolean values. The inner for loop sets the vector values to TRUE of FALSE based on whether the number is prime.

### Set up the return value

The function returns a Boolean vector to the caller that is the same length as the number of dividends the caller passed in .

 

All numbers are assumed to be prime (**TRUE**) before they get checked in the ***for*** loops. Highlighted line 1 creates a vector that is the length of the dividends and sets each value to TRUE.

 

\<show how rep() works\>

 

In the inner ***for*** loop, if one of the divisors divides the dividend evenly then we know the dividend is not prime and, in highlighted line 2, switch the value in the vector to **FALSE**.

``` r
isPrime3 = function(vals)
{
  «isPrime = c(rep(TRUE, length(vals)));»  #1
  names(isPrime) = vals;
   
  for(i in 1:length(vals))
  {
    for(j in 2:(vals[i]-1))
    {
      if(vals[i] %% j == 0)
      {
        «isPrime[i] = FALSE;»   #2
      }
    }
  }
  «return(isPrime);»  #3
}
```

Finally, we return the whole Boolean vector back to the caller

 

[Extension: alternative naming to i and j]

### Named values

This line:

names(isPrime) = vals;

makes is a little easier to read the Boolean vector by naming each value with the dividend:

\<show in Environment\>

### for loops within a for loops

In ***isPrime2()***, we needed a ***for*** loop so we could cycle through all numbers to check if any of them divided the value evenly.

 

In ***isPrime3()***, we need to add a ***for*** loop that goes through each value we are checking for prime

 

\<highlight outer for loop here\>

``` r
# does not handle one or two well
isPrime3 = function(vals)
{
  isPrime = c(rep(TRUE, length(vals)));
  names(isPrime) = vals; 
   
  for(i in 1:length(vals))
  {
    for(j in 2:(vals[i]-1))
    {
      if(vals[i] %% j == 0)
      {
        isPrime[i] = FALSE;
      }
    }
  }
  return(isPrime);
}
```

### REturn value

\<highlight return – talk about how its a vector (like the return value in ***findFactors()*** )\>

``` r
# does not handle one or two well
isPrime3 = function(vals)
{
  isPrime = c(rep(TRUE, length(vals)));
  names(isPrime) = vals; 
   
  for(i in 1:length(vals))
  {
    for(j in 2:(vals[i]-1))
    {
      if(vals[i] %% j == 0)
      {
        isPrime[i] = FALSE;
      }
    }
  }
  return(isPrime);
}
```

## A Matrix of values

We have a second function that also uses ***for*** loops within ***for*** loops. In this case, the for loops are creating a two-dimensional vector called a [matrix]{.hl}. The matrix contains wind chill values calculated from temperatures (rows) and wind speeds (columns)

\<image of matrix\>

### What is a matrix

\<larger lesson later on MAtrices\>

\<2D vector\>

\<data types are all the same – across rows and columns (diff from data frame)\>

\<examples of creating a matrix in Console\>

### Testing the function

\<ranges of temp and wind speeds\>

\<note the row(temp) and column (wind speed) setup\>

## matrix setup

Structuring is the most important part – proper structure makes ***for*** loops much easier to embed.

 

Much like ***isPrime3()***, one of the most important tasks is setting up the return value, which is a two-dimensional matrix whose length and width are determined by the number of temperature and wind speed values:

 

Create the sequences based on user input

``` r
tempSeq = seq(tempStart, tempEnd, tempStep) 
windSeq = seq(windStart, windEnd, windStep)
```

Get the length of each sequence (this is the number of rows and columns):

``` r
  numRows = length(tempSeq);
  numCols = length(windSeq);
```

Create a blank matrix with the appropriate number of rows and columns:

``` r
windChillTable = matrix(nrow=numRows, ncol=numCols); 
```

Give the rows and columns names that match the temperature and wind speed values they represent: \<more about the row and column setup\>

``` r
rownames(windChillTable) = tempSeq; 
colnames(windChillTable) = windSeq;
```

### for loops handling matrix rows and columns

\<explcitly talk about the inner and out for loops and highlight them\>

``` r
  for(i in 1:numRows)
  {
    for(j in 1:numCols)
    {
      windChillMatrix[i,j] = 35.74 + 
                            0.6215*tempSeq[i] - 
                            35.75*(windSeq[j]^0.16) + 
                            0.4275*tempSeq[i]*(windSeq[j]^0.16);
    }
  }
```

``` r
  for(i in 1:numRows)
  {
    for(j in 1:numCols)
    {
      windChillMatrix[i,j] = 35.74 + 
                            0.6215*tempSeq[i] - 
                            35.75*(windSeq[j]^0.16) + 
                            0.4275*tempSeq[i]*(windSeq[j]^0.16);
    }
  }
```

[note: the ***for*** loops can be reversed... this will be an application question]{.note}

### Populating the matrix:

This line of code calculates a wind chill based on the i^th^ temperature and j^th^ wind speed temperature values (based on the [wind chill formula given by the National Weather Service](https://www.weather.gov/media/epz/wxcalc/windChill.pdf)) and adds the value to the ***windChillMatrix*** at the appropriate position:

``` r
      windChillMatrix[i,j] = 35.74 + 
                            0.6215*tempSeq[i] - 
                            35.75*(windSeq[j]^0.16) + 
                            0.4275*tempSeq[i]*(windSeq[j]^0.16);
```

### REturn the matrix back to the caller

The fully populated ***windChillMatrix*** is returned to the caller. When we look at it in RStudio, we can see the values

 

\<View windChillMatrix in RStudio\>

 

 

## Application

1\) Why might is be better to put functions in a separate script?

 

2\) REverse the for loops in the wind chill matrix...

-   calculate wind chill using avgTmp and windSpeed from weatherData

-   add windChill column to weatherData

 

2\) heat index matrix

error checking the matrix

 

3\) find all connected #s within a List

-   find pairs that evenly divide

-   return named vector

    -   dividend1: divisor1

    -   dividend2: divisor2

    -   ...

 

4\) difference between #s in vector

 \
5) MLE Calc \<probably removing\>

 

6\) Create a function that finds the [difference in temperatures]{.hl} between consecutive days and returns the temperature differences as a vector.

 

So if you have four high temperatures: **40, 45, 35, 42**:

-   the four calculations would be: **(no calculation), (45-40), (35-45), (42-35)**

-   and the return vector would be:  **(NA, 5, -10, 7)**

[Note: The first value of the return vector is always NA because there is nothing to subtract.]{.note}

[Save you script file as **app1-15.r**  in the **scripts** folder of your RStudio Project for the class.]{.note}

 

Test this with vector you create and the ***highTemps*** column from weatherData

{{< include ../assets/_AppInstructions.qmd >}}

## Extension: alternative naming to i and j

In general, in programming the first, or outer, for loop uses i as its cycling value and the second, or inner, for loop uses j.

 

This is not a hard-and-fast rule, and it is not necessarily best practice, but it is what we will use for now.

\<highlight i and j\>

``` r
# does not handle one or two well isPrime3 = function(vals) {   isPrime = c(rep(TRUE, length(vals)));   names(isPrime) = vals;        for(i in 1:length(vals))   {     for(j in 2:(vals[i]-1))     {       if(vals[i] %% j == 0)       {         isPrime[i] = FALSE;       }     }   }   return(isPrime); }
```

### 
