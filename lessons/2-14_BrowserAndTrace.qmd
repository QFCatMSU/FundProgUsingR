---
title: "2-14: Browser and Trace"
short: "2-14"
# special characters for highlighting code : «»
---

### To-do

```         
View(ggplot2::geom_boxplot)
ggplot2::geom_boxplot

trace(at = c(2,3))
```

trace will not work if you Source() the function afterwards

## Purpose

## Material

The [script for the lesson is here](../scripts/2-13_Breakpoints_new.R)

A [second script that contains a function to debug](../scripts/debugTest.r)

The [data used for the lesson](../data/Lansing2016Noaa-3.csv) is here

## Breakpoint limitations

In the last lesson, we used breakpoints in RStudio to pause the execution of a script. Breakpoints are convenient because they can be easily turned on and off and are not a part of your script. However, breakpoints in RStudio are limited in use. They make a good introduction to debugging, and are widely used in other programming languages, but are not as practical in R as the debugging techniques taught in this lesson.

## browser()

browser() is an R command that instructs the script to pause. Effectively, browser() acts just like a breakpoint by pausing your script and putting your script in debug mode. We can take examples from the last lesson and replace the breakpoint with browser(). [Note: browser() is added to your script and needs to be removed after debugging.]{.hl}

### add browser to code

We can add browser() to line 7 of the script from last lesson and click Source. You will see the familiar debug features

 

\<image of browser() with green arrow\>

 

### add browser to for loop

Instead of putting a NULL command in a for loop so that a breakpoint can be put on the line, we can put browser(). Don't forget to remove or comment out browser() when you are done debugging

\<link back to last lesson's NULL in for loops\>

\<image for loop with two browser() instead of NULL\>

## browser() in function scripts

The main reason to use browser() is that it work in script files outside of script being Sourced. In the script files, we call a second script named \< \>. This script has functions in used by the main script. Adding breakpoints to the functions script will not work if you Source the main script. However, adding browser() will work.

### Example 1: if 

### Example 2: for loop

## debug() debugonce()

`script must be in Environment to debug???`{=html}

browser() does not work for functions that you cannot edit. In other words, you cannot use browser() to pause a function within a packages. If you need to debug a function in a package, then you can use debug() or debugonce(). Both of these function will inject a browser() command to the beginning of a function.

 

It is easiest to see how debug() works using a function within your script and then apply it to a function from

### debug function script

### undebug

### debugonce

### debug within package

find package function that's relatively easy to debug

pause is at beginning of script (not convenient)

## trace()

The disadvantage of debug() is that it always pauses the script at the beginning of a function. That is often not . If you want to control where the pause is put then you need to use trace(). trace() can be used to inject browser() anywhere in the function. This is done by telling trace() which command, by number, you want to pause before.

This command would acts just like the debug() above:

\<trace, first command\>

This command would put the pause on the third command:

\<trace, third command\>

The number is not the line number, but the command number

## trace() with loops and if statements

Complete if-else statements and for loops are counted as one command. So, if you want to put a pause after, you need to

\<trace, command after for loop\>

If you want to put a pause within an if-else ststement or for loop, that you need to subset the command number with a second command number

\<trace, command in for loop\>

\<trace, command in if-else statement\>

Every time there is an embedded if-else statement or for loop, you need to subset trace()

\<trace, command in for loop, in if-else, in for loop\>

## Inject code beyond browser()

trace() can inject any code into your function

\<inject cat() in for loop\>

\<inject if(i==1) { } in for loop\>

## Viewing package functions

So far, we have only paused within scripts we created. If you want to pause within a function inside a package, you need to first view the function and figure out the command/subcommand where you want the pause.

\<1-13 exention section 9 – choose a better function??\>

\<do pracma: isprime...\>

## Application

code to put a pause in the function ?? in package ??

code to put a pause in the for loop at 10 iteration in function ?? in package ??

code to put a pause in the for loop when x=?? in function ?? in package ??

code to put a pause inside if-if

code to print x every 10th iteration of a for loop

cat each factor
