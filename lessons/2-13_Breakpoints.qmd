---
title: "2-13: Breakpoints"
short: "2-13"
# special characters for highlighting code : «»
---

### To-do

-   switch to using browser() instead of RStudio breakpoints

-   next lesson: use trace() to add browser() to functions

## Purpose

## Material

The [script for the lesson is here](../scripts/2-13_Breakpoints.R)

A [second script that contains a function to debug](../scripts/debugTest.r)

The [data used for the lesson](../data/Lansing2016Noaa-3.csv) is here

## Debugging your code

One of the most powerful debugging tools in any programming language, and a staple of all professional programmers, is the breakpoint.  Breakpoints allows you to pause the execution of your script at a specific line or command.  While paused, you can look at the ***Environment***, enter commands in the ***Console***, or move through your script one command at a time.

 

One powerful use of a breakpoint is the ability to pause your code inside a for loop exactly when a variable goes out of expected bounds -- even if the for loop is executing 1000s of millions of times.

In R, the implementation of breakpoints is far less robust than most programming languages. Even with this poor implementation, breakpoints are still a useful debugging tool in R -- and learning how to use breakpoints will transfer to any programming language.

## Setting up a breakpoint

A breakpoint is like a pause button in the execution your script.  In RStudio, you set a breakpoint by clicking to the left of the line number -- this is called the [gutter area]{.hl}.  A red dot representing the breakpoint appears in the gutter area.  Clicking again will get rid of the breakpoint.

![Breakpoint (red dot) set on line 9 -- the left of the line is called the gutter area](images/R-2-12-SettingBreakpoint.png){#fig-set_breakpoint .fs}

When you ***Source*** your code, the script will execute up to, *but not including*, the line with the breakpoint.  Your script is now paused at the line with a breakpoint, and you are in *debug mode*, which R calls ***Browse*** mode.

 

[Note: A breakpoint only works when you ***Source*** your script.  It will not work if you use **Run** to execute lines of code.]{.note}

### Debug Mode

There are 4 things in RStudio that will indicate you are in debug mode:

1.  A green arrow will appear at the code line the script is paused at -- the green arrow shows you the line that will be executed next

2.  Breakpoint controls will appear in the ***Console*** tab

3.  The ***Console*** will indicate it is in browse mode  with ***\> Browse***

    -   The number (in this case, 2) is telling you how many levels deep you are.  We will see this when we talk about functions.

4.  A traceback window will appear at the bottom of the ***Environment*** tab

    -   traceback is a more advanced debugging tool that we will not get into in this lesson

 

![Sourcing a script with a breakpoint puts it into debug mode](images/R-2-12-DebugMode.png){#fig-source_with_bp .fs}

## Using the Browse in breakpoint

In this lesson I will put breakpoint instructions in comments like this so you can follow along:

[\## In the lesson script:]{.note}

[##    Place a breakpoint at line 9 in the lesson's script and click **Source**]{.note}

``` r
diffTemp = highTemps - lowTemps;
```

In @fig-source_with_bp, the script is currently paused at line 9, this means lines 1-8 has been executed.  In the ***Environment*** you can see ***weatherData***, ***highTemps***, and ***lowTemps,*** which were created between lines 1-8.

``` {.r tab="Environment"}
weatherData   366 obs. of 24 variables
highTemps     int [1:366] 29 35 33 27 29...
lowTemps      int [1:366] 24 28 25 7 8 20...
```

When in debug mode, you can enter commands in the ***Console***.  With these commands you can do things like view values in or execute functions on a vector:

``` {.r tab="Console"}
Browse[2]> highTemps[1:20]
[1] 29 35 33 27 29 36 42 39 42 38 16 23 18 34 42 33 26 15 21 22
Browse[2]> max(highTemps)
[1] 94
```

Or, you can create a new variable and add it to the ***Environment***:

``` {.r tab="Console"}
Browse[2]> highTemp_C = (5/9)*(highTemps-32)
Browse[2]>
```

``` {.r tab="Environment"}
highTemp_C     num [1:366] -1.667 1.667 0.556 -2.778...
```

## Moving through code in debug (browse) mode

When your script arrives at a breakpoint (@fig-source_with_bp) , five controls appear in the ***Console*** tab:

1\) ***Next***: executes the command at the green arrow (in other languages, this is often called ***Step Over***)

2\) ***Step In***: moves into a function

3\) ***Step Out***: completes a ***for*** loop or function

4\) ***Continue***: unpauses the execution of the script (like hitting the Play button when a video is paused)

5\) ***Stop***: quits the script (no more code is executed)

 

[Examples will be given for each in this lesson.]{.note}

 

These buttons allow you to control the flow of you script. They are pretty universal -- you will see these same controls when you use breakpoints in other programming languages.

 

When in debug mode you should only use the buttons to control the flow of your script.  In debug mode, clicking ***Source*** will cause problems with your script.

![The five breakpoint control in debug mode](images/R-2-13-BPControls.png){#fig-five_bp_controls .fs}

### Stop

Clicking ***Stop*** will take R out of debug mode and end the execution of the script.  In other words, no more commands in the script will be executed and the four components of debug mode (@fig-source_with_bp) will go away.

 

There are situations where you need to click ***Stop*** multiple times to get out of debugger mode   The most common reason is that ***Source*** was clicked while in debug mode.  For example, if you click ***Source*** 5 times in debugger mode, then you will need to click ***Stop*** 5 extra times (6 in all) to escape debug mode.  

![Stopping debug mode -- sometimes Stop has to be hit more than once.](images/R-2-12-StopWhen%20Sourced.png){#fig-bp_stop .fs}

### Continue to next Breakpoint

[\## In the lesson script:]{.note}

``` r
##   Add a second breakpoint on line 18 (so, now we have breakpoints at lines 9 and 18) and click SourcesunsetTimes_12Hour = c();
```

The script will pause at the first breakpoint (line 9).  If you click ***Continue***, the script will unpause and continue executing the script until the next breakpoint is reached on line 18 and pause there (green arrow).  Between the first and second pause, lines 9-17 are executed and the results of these commands are in the ***Environment***.

 

[Note: In most programming langauge you can add or remove breakpoints while in debug mode -- but you cannot do this in R]{.note}

![Continue takes the script to the next breakpoint (if there is another one)](images/R-2-12-Continue.png){#fig-bp_continue .fs}

### Continue to end of script

After line 18 there are no more breakpoints, so if you click ***Continue*** again, the rest of the script will be executed and you will be taken out of debug mode.

![Clicking Continue when there are no more breakpoint executes the rest of the script](images/R-2-12-ContinueToEnd.png){#fig-continue_to_end .fs}

### Continue if breakpoint is in for loop

[\## In lesson script:]{.note}

[##   Remove the breakpoints at lines 9 and 18]{.note}

[##   Add a breakpoint at line 25 (inside the ***for*** loop)]{.note}

``` r
sunsetTimes_12Hour[i] = convertTime(sunsetTimes[i]);
```

If you put a **breakpoint inside a for loop** then ***Continue*** will stop at the breakpoint [every cycle of the **for** loop]{.hl}*.* 

![Continue clicked 20 times (note: i=20) with a breakpoint inside the for loop](images/R-2-12-ContinueForLoop.png){#fig-continue_for_loop .fs}

### Next

[\## In lesson script:]{.note}

[##   Remove breakpoint on line 25]{.note}

[##   Add a breakpoint on line 15]{.note}

``` r
sunsetTimes = weatherData$sunset;
```

If we ***Source*** the script, the code up until line 14 will execute and line 15 will have a green arrow in the gutter.

 

We can now execute one command at a time using ***Next***.

 

Clicking ***Next*** executes the command on line 15 and moves the green arrow to the next command on line 16.

 

So, ***sunset_times*** is created and put in the ***Environment*** and line 16, which creates ***sunriseTimes***, is highlighted with the green arrow..

![Clicking Next executes the command at the green arrow and moves the green arrow to the next command](images/R-2-12-Next.png){#fig-bp_next .fs}

### Multiple Commands on one line

[\## In lesson script:]{.note}

[\##   Click ***Next*** until you get to line 21]{.note}

Lines 15-19 have one command each but line 21 has three commands:

``` r
testCommand1=1; testCommand2=2; testCommand3=3;
```

***Next*** does not execute lines, [**Next** executes commands]{.hl}.  If there are multiple commands on one line then ***Next*** will execute them one at a time.

 

When there are multiple commands on a line, the debugger in RStudio will highlight the current command.

![Only the current command is highlighted -- clicking Next moves through the commands on the line.](images/R-2-12-MultipleCommandsOnLine.png){#fig-multiple_command_line .fs}

## Debugging in a for loop

[\## In lesson script:]{.note}

[##   Click **Next** until you get to line 23]{.note}

 

When the green arrow gets to a ***for*** loop, RStudio will highlight the whole ***for*** loop:

![Highlighting the whole for loop in debug mode](images/R-2-12-ForLoop.png){#fig-whole_for_loop .fs}

 

Clicking ***Next*** executes the initialization command for the ***for*** loop:

``` r
for(i in 1:length(sunsetTimes))
```

In this initialization command:

-   the variable ***i*** is initialized to **1**

-   a rule is given for how ***i*** changes each time the ***for*** loop cycles (***i*** increases by **1**)

-   the cycles end when ***i*** is equal to ***sunsetTime***

 

The initialization command of a ***for*** loop only executes once whereas everything inside the ***for*** loop will executes *once per cycle* of the ***for*** loop.

 

After the initialization command is executed, ***Next*** will move the control inside the ***for*** loop:

![After executing the initialization command, the green arrow moves inside the for loop](images/R-2-12-ForLoopPostInit'.png){#fig-arrow_within_for_loop .fs}

 

Continue to hit ***Next*** and debug mode will go through each command in the ***for*** loop for each cycle of the ***for*** loop

### Step Out of the for loop

If you are inside a ***for*** loop and want to finish executing the whole ***for*** loop (i.e., complete every cycle of the loop), you can click ***Step Out***.  This will execute the rest of the ***for*** loop and put the control on the next command [as long as you have no breakpoints in the **for** loop]{.hl}.

![Clicking Step Out will execute the rest of the for loop and move control to the next command](images/R-2-12-SteopOutFor-01.png){#fig-step_out .fs}

[Note: If you have a breakpoint inside the **for** loop then ***Step Out*** will just execute to the breakpoint -- similar to ***Continue*** (@fig-bp_continue).]{.note}

### Conditional breakpoints

[\## In lesson script:]{.note}

[##   Click **Stop**]{.note}

[##   Add breakpoint on line 30 and **Source** script]{.note}

 

A ***for*** loop can easily run thousands or millions of times and you often only want a breakpoint on specific cycles of the ***for*** loop.  In most programming language, you can attach a condition to the breakpoint so that the breakpoint only activates when specified.

 

In R, you need to manually code this condition.  You can pause at a specific cycle of the ***for*** loop using an ***if*** statement:

``` r
if(i == 200)     # NULL here?
{
  NULL;  # this line functionally does nothing
}
```

The breakpoint needs to be put on the line inside the codeblock attached to the ***if*** statement. Inside the codeblock is a NULL command -- meaning it does nothing (it is only there to provide a space for the breakpoint).

 

With the breakpoint on line 30, the script will pause on the 200^th^ cycle of the for loop:

![Using an if statement as a conditional breakpoint inside a for loop](images/R-2-12-ConditinalBreakpoint'.png){#fig-if_null_bp .fs}

 

Or, if you put a a breakpoint at line 34, you can conditionally break on some other value being used in the ***for*** loop:

``` r
if(sunsetTimes[i] == 2000)
{
  NULL; 
}
```

The script will pause on the 141^st^ cycle of the ***for*** loop, which represent the day that sunset is at 8:00pm (2000 hours)

![Conditional breakpoint based on a variable used in the for loop](images/R-2-12-ConditinalBreakpoint2.png){#fig-conditional_br .fs}

## If-else statements

[\## In lesson script:]{.note}

[##   Remove breakpoint on line 34]{.note}

[##   Add a breakpoint on line 39]{.note}

 

Similar to ***for*** loops, the code inside the parentheses of ***if-else*** statements is a command.  The command, which is a conditional statements, outputs a Boolean (TRUE/FALSE) value that is used to determined if the codeblock gets executed.

 

When you set a breakpoint at the ***if()*** line, the whole ***if-else*** is highlighted in RStudio when the code is stopped at the line. 

![Debug mode when the control is at the beginning of an if-else structure](images/R-2-12-IfElse.png){#fig-if_else_debug .fs}

As you click ***Next***, the control (green arrow) will either:

-   move to the next conditional statement (if the current conditional statement was **FALSE**)

-   move inside the codeblock (if the current conditional statement was **TRUE**)

 

The following lines are not executed in an ***if-else*** structure so they will be skipped over in debug mode:

-   codeblocks attached to ***FALSE*** conditional statements

-   ***else*** statements that were preceded by a **TRUE** conditional statement

    -   the codeblock attached to these ***else*** statements will also not be executed

## Debugging within functions (Step In)

Inside the ***for*** loop on lines 25 and 26, we call ***convertTime*** twice.  ***convertTime*** is a function inside the ***debugTest.R***.  If you click ***Next*** while on line 25, then the whole line is executed, along with the ***convertTime*** function, and control will go to the next line.

 

You can debug inside the ***convertTime*** function by clicking ***Step-In*** while on the lines with the function -- this will move control to the function and the whole function will be highlighted:

![After clicking Step-In on line 25, control is moved to the function](images/R-2-12-Functions.png){#fig-step_in .fs}

***Step-in*** works whether the function is inside the same script or in another script.  However, ***Step-in*** will not work if the function is inside a package -- in R, you cannot debug script within a package.

 

[Note: when you Stepped In the function, the Browse number increased by 1 (from 2 to 3)]{.note}*.* The Browse number of sort of a measurement of how many levels deep you are in code. 

### Executing command within the function

Once inside the function you can use the debug buttons like before. ***Next*** will execute one command at a time inside the function.  Click ***Step Out*** to complete the whole function and return to the main script.

## Other ways to add breakpoints

This lesson only goes through the fundamentals of breakpoints -- these fundamentals apply to breakpoints in just about any programming language.  However, breakpoints are not implemented well in R -- this methods taught in the lesson will not work for adding breakpoints to script files outside of your main script (the one you ***Source***) or functions within packages.  Other strategies are needed to add breakpoints to these location.

 

The functions that can add breakpoints to external script files and packages are (in order of complexity) are:

-   ***browser()***

-   ***debugonce()***

-   ***debug()***

-   ***trace()***

 

Going through all of these would require another full lesson -- something that is, for now, outside the scope of this class.

## Application

A\) In Comments at the end of the script answer the following questions:

1.  Why might it be a bad idea to put breakpoint without a condition inside a ***for*** loop?

2.  What happens when you try to put a breakpoint on a line with only comments? 

3.  What happens if you put a breakpoint at line 45 and click ***Source***?  How about line 43?  Why is there a difference?

4.  What happens if you put a breakpoint in the middle of the ***ggplot()*** call? 

Add the following code to the script:

B\) Set up a conditional breakpoint within the ***for*** loop that pauses the script every 30^th^ cycle.

-   A good way to to do this involves using [modulus division](/content/DEVELOPMENT/2020/courses/DEV-belinsky-2020-ProgrammingFundamentalsUsingR/R/Lessons/1-13_Functions.html#modulus)

 

C\) Set up a conditional breakpoint within a ***for*** loop to pause the code when ***windSpeed*** is between 35 and 40mph.

{{< include ../assets/_AppInstructions.qmd >}}

### End-of-class survey

[Please take this short (less than 5 minutes) survey regarding this class.](https://msu.co1.qualtrics.com/jfe/form/SV_b9I3VPJ2We28Qzs?online=true&sync=false&class=ggplot)

## Extension: Breakpoints Issues (under construction)

This section will provide examples for bugs when using breakpoints in RStudio

### Modifying breakpoints in debug mode

[Breakpoints added in debug mode will not work until the next time the script is Sourced]{.hl}*.* You will see an outlined red dot and a message about how breakpoints will not be active.

![Adding a breakpoint on line 18 while in debug mode](images/R-2-12-BreakPointInDebugMode-01.png){#fig-add_bp_debug_mode .fs}

If you remove a breakpoint in debug mode, the red dot will disappear but the breakpoint remains in effect until you exit debug mode.

### Removing all breakpoints

-   Remove all breakpoints (***Debug --\> Remove all...***)

    -   do this if you get an error in fbody\[\[i\]\]

 

R can sometimes get into a weird state when you have put multiple breakpoints in.  For instance this error

Error in fBody\[\[i\]\] : no such index at level 5  \<show image\>

\- green arrow not showing up

 

When that happens go through these steps in order to fix the problem:

1.  Remove all breakpoints by clicking ***Debug -\> Remove all breakpoints***

2.  Right-click anywhere in RStudio and click ***Reload***

3.  Restart the R Session: ***Session -\> Restart R***

### Issues with Breakpoints in R/RStudio

Breakpoints are, unfortunately, not well implemented in R/RStudio.  Here are a couple of the issue:

-   Breakpoints will not work on lines that have (a) an inline comment and are (b) inside a ***for*** loops of ***if()*** statement

     

So, a breakpoint will not work on this line:

``` r
if(highTemps[i] > 50)
{
  # put a breakpoint on the line below
  cat("highTemp greater than 50");  # but... this comment breaks the breakpoint
}
```

But will work if you take out the breakpoint

So, a breakpoint will work on this line:

``` r
if(highTemps[i] > 50)
{
  # put a breakpoint on the line below (now it will work)
  cat("highTemp greater than 50"); 
}
```
